//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Abc.MyDog.Shared.Entities.QueueOptionSets
{
	public enum EmailRouterAccessApproval
	{
		/// <summary>
		/// Approved = 1
		/// </summary>
		Approved = 1,
		/// <summary>
		/// Empty = 0
		/// </summary>
		Empty = 0,
		/// <summary>
		/// Pending_Approval = 2
		/// </summary>
		Pending_Approval = 2,
		/// <summary>
		/// Rejected = 3
		/// </summary>
		Rejected = 3
	}

	public enum IncomingEmailDeliveryMethod
	{
		/// <summary>
		/// Forward_Mailbox = 3
		/// </summary>
		Forward_Mailbox = 3,
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Server_Side_Synchronization_or_Email_Router = 2
		/// </summary>
		Server_Side_Synchronization_or_Email_Router = 2
	}

	public enum IncomingEmailFilteringMethod
	{
		/// <summary>
		/// All_email_messages = 0
		/// </summary>
		All_email_messages = 0,
		/// <summary>
		/// Email_messages_from_Dynamics_365_Leads_Contacts_and_Accounts = 2
		/// </summary>
		Email_messages_from_Dynamics_365_Leads_Contacts_and_Accounts = 2,
		/// <summary>
		/// Email_messages_from_Dynamics_365_records_that_are_email_enabled = 3
		/// </summary>
		Email_messages_from_Dynamics_365_records_that_are_email_enabled = 3,
		/// <summary>
		/// Email_messages_in_response_to_Dynamics_365_email = 1
		/// </summary>
		Email_messages_in_response_to_Dynamics_365_email = 1,
		/// <summary>
		/// No_email_messages = 4
		/// </summary>
		No_email_messages = 4
	}

	public enum OutgoingEmailDeliveryMethod
	{
		/// <summary>
		/// None = 0
		/// </summary>
		None = 0,
		/// <summary>
		/// Server_Side_Synchronization_or_Email_Router = 2
		/// </summary>
		Server_Side_Synchronization_or_Email_Router = 2
	}

	public enum QueueTypeCode
	{
		/// <summary>
		/// Default_Value = 1
		/// </summary>
		Default_Value = 1
	}

	public enum QueueViewType
	{
		/// <summary>
		/// Private = 1
		/// </summary>
		Private = 1,
		/// <summary>
		/// Public = 0
		/// </summary>
		Public = 0
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Abc.MyDog.Shared.Entities
{
	public partial class Queue : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DefaultMailbox = "defaultmailbox";
			public const string Description = "description";
			public const string EMailAddress = "emailaddress";
			public const string EmailRouterAccessApproval = "emailrouteraccessapproval";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string IgnoreUnsolicitedEmail = "ignoreunsolicitedemail";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
			public const string IncomingEmailFilteringMethod = "incomingemailfilteringmethod";
			public const string IsEmailAddressApprovedByO365Admin = "isemailaddressapprovedbyo365admin";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NumberOfItems = "numberofitems";
			public const string NumberOfMembers = "numberofmembers";
			public const string OrganizationId = "organizationid";
			public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string QueueId = "queueid";
			public const string QueueTypeCode = "queuetypecode";
			public const string QueueViewType = "queueviewtype";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "queue";

		public const int EntityTypeCode = 2020;

		[DebuggerNonUserCode()]
		public Queue()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Queue(Guid QueueId)
		{
			Entity = new Entity(EntityLogicalName, QueueId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Queue(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Queue(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Queue(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Queue(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the queue record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the queue was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the queue.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Select the mailbox associated with this queue.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Mailbox</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DefaultMailbox
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DefaultMailbox); }
		}

		/// <summary>
		/// <para>Description of the queue.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Email address that is associated with the queue.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Incoming Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EMailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EMailAddress); }
			set { Entity.Attributes[Fields.EMailAddress] = value; }
		}

		/// <summary>
		/// <para>Shows the status of the primary email address.</para>
		/// <para>Picklist</para>
		/// <para>Primary Email Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.MyDog.Shared.Entities.QueueOptionSets.EmailRouterAccessApproval? EmailRouterAccessApproval
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.EmailRouterAccessApproval);
				if (value == null) return null;
				return (Abc.MyDog.Shared.Entities.QueueOptionSets.EmailRouterAccessApproval)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.EmailRouterAccessApproval] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.EmailRouterAccessApproval] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Entity Image Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the queue with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Information that specifies whether a queue is to ignore unsolicited email (deprecated).</para>
		/// <para>Boolean</para>
		/// <para>Convert To Email Activities</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IgnoreUnsolicitedEmail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IgnoreUnsolicitedEmail); }
			set { Entity.Attributes[Fields.IgnoreUnsolicitedEmail] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the data import or data migration that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Incoming email delivery method for the queue.</para>
		/// <para>Picklist</para>
		/// <para>Incoming Email Delivery Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.MyDog.Shared.Entities.QueueOptionSets.IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailDeliveryMethod);
				if (value == null) return null;
				return (Abc.MyDog.Shared.Entities.QueueOptionSets.IncomingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailDeliveryMethod] = null;
			}
		}

		/// <summary>
		/// <para>Convert Incoming Email To Activities</para>
		/// <para>Picklist</para>
		/// <para>Convert Incoming Email To Activities</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.MyDog.Shared.Entities.QueueOptionSets.IncomingEmailFilteringMethod? IncomingEmailFilteringMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.IncomingEmailFilteringMethod);
				if (value == null) return null;
				return (Abc.MyDog.Shared.Entities.QueueOptionSets.IncomingEmailFilteringMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.IncomingEmailFilteringMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.IncomingEmailFilteringMethod] = null;
			}
		}

		/// <summary>
		/// <para>Shows the status of approval of the email address by O365 Admin.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Email Address O365 Admin Approval Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsEmailAddressApprovedByO365Admin
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsEmailAddressApprovedByO365Admin); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the queue.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the queue was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the queue.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the queue.</para>
		/// <para>Required - String - MaxLength: 200</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Number of Queue items associated with the queue.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Queue Items</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfItems
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfItems); }
		}

		/// <summary>
		/// <para>Number of Members associated with the queue.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>No. of Members</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? NumberOfMembers
		{
			get { return Entity.GetAttributeValue<int?>(Fields.NumberOfMembers); }
		}

		/// <summary>
		/// <para>Unique identifier of the organization associated with the queue.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Outgoing email delivery method for the queue.</para>
		/// <para>Picklist</para>
		/// <para>Outgoing Email Delivery Method</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.MyDog.Shared.Entities.QueueOptionSets.OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OutgoingEmailDeliveryMethod);
				if (value == null) return null;
				return (Abc.MyDog.Shared.Entities.QueueOptionSets.OutgoingEmailDeliveryMethod)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OutgoingEmailDeliveryMethod] = null;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the queue.</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the queue.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the queue.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the queue.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Unique identifier of the queue.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Queue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid QueueId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.QueueId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Type of queue that is automatically assigned when a user or queue is created. The type can be public, private, or work in process.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Queue Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.MyDog.Shared.Entities.QueueOptionSets.QueueTypeCode? QueueTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.QueueTypeCode);
				if (value == null) return null;
				return (Abc.MyDog.Shared.Entities.QueueOptionSets.QueueTypeCode)value.Value;
			}
		}

		/// <summary>
		/// <para>Select whether the queue is public or private. A public queue can be viewed by all. A private queue can be viewed only by the members added to the queue.</para>
		/// <para>Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.MyDog.Shared.Entities.QueueOptionSets.QueueViewType? QueueViewType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.QueueViewType);
				if (value == null) return null;
				return (Abc.MyDog.Shared.Entities.QueueOptionSets.QueueViewType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.QueueViewType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.QueueViewType] = null;
			}
		}

		/// <summary>
		/// <para>Status of the queue.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.MyDog.Shared.Entities.QueueOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Abc.MyDog.Shared.Entities.QueueOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the queue.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.MyDog.Shared.Entities.QueueOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Abc.MyDog.Shared.Entities.QueueOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the queue.</para>
		/// <para>Lookup</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Version number of the queue.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
