//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Abc.MyDog.Shared.Entities.devkit_AzureAccountOptionSets
{
	public enum devkit_Category
	{
		/// <summary>
		/// Organization = 1
		/// </summary>
		Organization = 1,
		/// <summary>
		/// Owner = 2
		/// </summary>
		Owner = 2
	}
}

namespace Abc.MyDog.Shared.Entities
{
	public partial class devkit_AzureAccount : EntityBase
	{
		public struct Fields
		{
			public const string devkit_AccountId = "devkit_accountid";
			public const string devkit_AzureAccountId = "devkit_azureaccountid";
			public const string devkit_AzureAccountType = "devkit_azureaccounttype";
			public const string devkit_Category = "devkit_category";
			public const string devkit_City = "devkit_city";
			public const string devkit_CreatedOn = "devkit_createdon";
			public const string devkit_ModifiedOn = "devkit_modifiedon";
			public const string devkit_name = "devkit_name";
			public const string devkit_Price = "devkit_price";
			public const string devkit_Surface = "devkit_surface";
			public const string EmailAddress = "emailaddress";
		}

		public const string EntityLogicalName = "devkit_azureaccount";

		public const int EntityTypeCode = 10138;

		[DebuggerNonUserCode()]
		public devkit_AzureAccount()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public devkit_AzureAccount(Guid devkit_AzureAccountId)
		{
			Entity = new Entity(EntityLogicalName, devkit_AzureAccountId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public devkit_AzureAccount(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public devkit_AzureAccount(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public devkit_AzureAccount(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public devkit_AzureAccount(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference devkit_AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.devkit_AccountId); }
			set { Entity.Attributes[Fields.devkit_AccountId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Azure Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid devkit_AzureAccountId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.devkit_AzureAccountId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>AzureAccountType</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? devkit_AzureAccountType
		{
			get { return Entity.GetAttributeValue<int?>(Fields.devkit_AzureAccountType); }
			set { Entity.Attributes[Fields.devkit_AzureAccountType] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.MyDog.Shared.Entities.devkit_AzureAccountOptionSets.devkit_Category? devkit_Category
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.devkit_Category);
				if (value == null) return null;
				return (Abc.MyDog.Shared.Entities.devkit_AzureAccountOptionSets.devkit_Category)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.devkit_Category] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.devkit_Category] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_City); }
			set { Entity.Attributes[Fields.devkit_City] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_CreatedOn); }
			set { Entity.Attributes[Fields.devkit_CreatedOn] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_ModifiedOn); }
			set { Entity.Attributes[Fields.devkit_ModifiedOn] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_name); }
			set { Entity.Attributes[Fields.devkit_name] = value; }
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? devkit_Price
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.devkit_Price); }
			set { Entity.Attributes[Fields.devkit_Price] = value; }
		}

		/// <summary>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Surface</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? devkit_Surface
		{
			get { return Entity.GetAttributeValue<double?>(Fields.devkit_Surface); }
			set { Entity.Attributes[Fields.devkit_Surface] = value; }
		}

		/// <summary>
		/// <para>The primary email address for the entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Email Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EmailAddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.EmailAddress); }
			set { Entity.Attributes[Fields.EmailAddress] = value; }
		}
	}
}
