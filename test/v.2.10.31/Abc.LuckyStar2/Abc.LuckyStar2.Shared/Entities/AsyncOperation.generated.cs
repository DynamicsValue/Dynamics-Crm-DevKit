//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Abc.LuckyStar2.Shared.Entities.AsyncOperationOptionSets
{
	public enum OperationType
	{
		/// <summary>
		/// Activity_Propagation = 6
		/// </summary>
		Activity_Propagation = 6,
		/// <summary>
		/// AI_Builder_Prediction_Events = 190690092
		/// </summary>
		AI_Builder_Prediction_Events = 190690092,
		/// <summary>
		/// AI_Builder_Training_Events = 190690091
		/// </summary>
		AI_Builder_Training_Events = 190690091,
		/// <summary>
		/// ALM_Anomaly_Detection_Operation = 73
		/// </summary>
		ALM_Anomaly_Detection_Operation = 73,
		/// <summary>
		/// App_Module_Metadata_Operation = 72
		/// </summary>
		App_Module_Metadata_Operation = 72,
		/// <summary>
		/// Audit_Partition_Creation = 41
		/// </summary>
		Audit_Partition_Creation = 41,
		/// <summary>
		/// Bulk_Delete = 13
		/// </summary>
		Bulk_Delete = 13,
		/// <summary>
		/// Bulk_Delete_File_Attachment = 94
		/// </summary>
		Bulk_Delete_File_Attachment = 94,
		/// <summary>
		/// Bulk_Delete_Subprocess = 23
		/// </summary>
		Bulk_Delete_Subprocess = 23,
		/// <summary>
		/// Bulk_Duplicate_Detection = 8
		/// </summary>
		Bulk_Duplicate_Detection = 8,
		/// <summary>
		/// Bulk_Email = 2
		/// </summary>
		Bulk_Email = 2,
		/// <summary>
		/// Calculate_Organization_Maximum_Storage_Size = 22
		/// </summary>
		Calculate_Organization_Maximum_Storage_Size = 22,
		/// <summary>
		/// Calculate_Organization_Storage_Size = 18
		/// </summary>
		Calculate_Organization_Storage_Size = 18,
		/// <summary>
		/// Calculate_Rollup_Field = 57
		/// </summary>
		Calculate_Rollup_Field = 57,
		/// <summary>
		/// CallbackRegistration_Expander_Operation = 79
		/// </summary>
		CallbackRegistration_Expander_Operation = 79,
		/// <summary>
		/// Cascade_Grant_or_Revoke_Access_Version_Tracking_Async_Operation = 12801
		/// </summary>
		Cascade_Grant_or_Revoke_Access_Version_Tracking_Async_Operation = 12801,
		/// <summary>
		/// CascadeAssign = 90
		/// </summary>
		CascadeAssign = 90,
		/// <summary>
		/// CascadeDelete = 91
		/// </summary>
		CascadeDelete = 91,
		/// <summary>
		/// Check_For_Language_Pack_Updates = 42
		/// </summary>
		Check_For_Language_Pack_Updates = 42,
		/// <summary>
		/// Cleanup_inactive_workflow_assemblies = 32
		/// </summary>
		Cleanup_inactive_workflow_assemblies = 32,
		/// <summary>
		/// Cleanup_Solution_Components = 71
		/// </summary>
		Cleanup_Solution_Components = 71,
		/// <summary>
		/// Collect_Organization_Database_Statistics = 19
		/// </summary>
		Collect_Organization_Database_Statistics = 19,
		/// <summary>
		/// Collect_Organization_Statistics = 16
		/// </summary>
		Collect_Organization_Statistics = 16,
		/// <summary>
		/// Collection_Organization_Size_Statistics = 20
		/// </summary>
		Collection_Organization_Size_Statistics = 20,
		/// <summary>
		/// Convert_Date_And_Time_Behavior = 62
		/// </summary>
		Convert_Date_And_Time_Behavior = 62,
		/// <summary>
		/// Create_Or_Refresh_Virtual_Entity = 98
		/// </summary>
		Create_Or_Refresh_Virtual_Entity = 98,
		/// <summary>
		/// Database_log_backup = 26
		/// </summary>
		Database_log_backup = 26,
		/// <summary>
		/// Database_Tuning = 21
		/// </summary>
		Database_Tuning = 21,
		/// <summary>
		/// DBCC_SHRINKDATABASE_maintenance_job = 28
		/// </summary>
		DBCC_SHRINKDATABASE_maintenance_job = 28,
		/// <summary>
		/// DBCC_SHRINKFILE_maintenance_job = 29
		/// </summary>
		DBCC_SHRINKFILE_maintenance_job = 29,
		/// <summary>
		/// Deletion_Service = 14
		/// </summary>
		Deletion_Service = 14,
		/// <summary>
		/// Duplicate_Detection_Rule_Publish = 7
		/// </summary>
		Duplicate_Detection_Rule_Publish = 7,
		/// <summary>
		/// Encryption_Health_Check = 53
		/// </summary>
		Encryption_Health_Check = 53,
		/// <summary>
		/// EntityKey_Index_Creation = 63
		/// </summary>
		EntityKey_Index_Creation = 63,
		/// <summary>
		/// Event_Expander_Operation = 92
		/// </summary>
		Event_Expander_Operation = 92,
		/// <summary>
		/// Execute_Async_Request = 54
		/// </summary>
		Execute_Async_Request = 54,
		/// <summary>
		/// Flow_Notification = 75
		/// </summary>
		Flow_Notification = 75,
		/// <summary>
		/// Goal_Roll_Up = 40
		/// </summary>
		Goal_Roll_Up = 40,
		/// <summary>
		/// Import = 5
		/// </summary>
		Import = 5,
		/// <summary>
		/// Import_File_Parse = 3
		/// </summary>
		Import_File_Parse = 3,
		/// <summary>
		/// Import_Sample_Data = 38
		/// </summary>
		Import_Sample_Data = 38,
		/// <summary>
		/// Import_Solution_Metadata = 93
		/// </summary>
		Import_Solution_Metadata = 93,
		/// <summary>
		/// Import_Subprocess = 17
		/// </summary>
		Import_Subprocess = 17,
		/// <summary>
		/// Import_Translation = 59
		/// </summary>
		Import_Translation = 59,
		/// <summary>
		/// Incoming_Email_Processing = 51
		/// </summary>
		Incoming_Email_Processing = 51,
		/// <summary>
		/// Index_Management = 15
		/// </summary>
		Index_Management = 15,
		/// <summary>
		/// Mailbox_Test_Access = 52
		/// </summary>
		Mailbox_Test_Access = 52,
		/// <summary>
		/// Mass_Calculate_Rollup_Field = 58
		/// </summary>
		Mass_Calculate_Rollup_Field = 58,
		/// <summary>
		/// Matchcode_Update = 12
		/// </summary>
		Matchcode_Update = 12,
		/// <summary>
		/// Organization_Full_Text_Catalog_Index = 25
		/// </summary>
		Organization_Full_Text_Catalog_Index = 25,
		/// <summary>
		/// Outgoing_Activity = 50
		/// </summary>
		Outgoing_Activity = 50,
		/// <summary>
		/// Post_to_Yammer = 49
		/// </summary>
		Post_to_Yammer = 49,
		/// <summary>
		/// Provision_language_for_user = 201
		/// </summary>
		Provision_language_for_user = 201,
		/// <summary>
		/// Provision_Language_Pack = 43
		/// </summary>
		Provision_Language_Pack = 43,
		/// <summary>
		/// Quick_Campaign = 11
		/// </summary>
		Quick_Campaign = 11,
		/// <summary>
		/// Recurring_Series_Expansion = 35
		/// </summary>
		Recurring_Series_Expansion = 35,
		/// <summary>
		/// Refresh_Business_Unit_for_Records_Owned_By_Principal = 95
		/// </summary>
		Refresh_Business_Unit_for_Records_Owned_By_Principal = 95,
		/// <summary>
		/// Regenerate_Entity_Row_Count_Snapshot_Data = 46
		/// </summary>
		Regenerate_Entity_Row_Count_Snapshot_Data = 46,
		/// <summary>
		/// Regenerate_Read_Share_Snapshot_Data = 47
		/// </summary>
		Regenerate_Read_Share_Snapshot_Data = 47,
		/// <summary>
		/// Reindex_all_indices_maintenance_job = 30
		/// </summary>
		Reindex_all_indices_maintenance_job = 30,
		/// <summary>
		/// Relationship_Assistant_Cards = 69
		/// </summary>
		Relationship_Assistant_Cards = 69,
		/// <summary>
		/// Resource_Booking_Sync = 68
		/// </summary>
		Resource_Booking_Sync = 68,
		/// <summary>
		/// Revoke_Inherited_Access = 96
		/// </summary>
		Revoke_Inherited_Access = 96,
		/// <summary>
		/// Ribbon_Client_Metadata_Operation = 76
		/// </summary>
		Ribbon_Client_Metadata_Operation = 76,
		/// <summary>
		/// SQM_Data_Collection = 9
		/// </summary>
		SQM_Data_Collection = 9,
		/// <summary>
		/// Storage_Limit_Notification = 31
		/// </summary>
		Storage_Limit_Notification = 31,
		/// <summary>
		/// System_Event = 1
		/// </summary>
		System_Event = 1,
		/// <summary>
		/// Transform_Parse_Data = 4
		/// </summary>
		Transform_Parse_Data = 4,
		/// <summary>
		/// Update_Contract_States = 27
		/// </summary>
		Update_Contract_States = 27,
		/// <summary>
		/// Update_Entitlement_States = 56
		/// </summary>
		Update_Entitlement_States = 56,
		/// <summary>
		/// Update_Knowledge_Article_States = 65
		/// </summary>
		Update_Knowledge_Article_States = 65,
		/// <summary>
		/// Update_Organization_Database = 44
		/// </summary>
		Update_Organization_Database = 44,
		/// <summary>
		/// Update_Solution = 45
		/// </summary>
		Update_Solution = 45,
		/// <summary>
		/// Update_Statistic_Intervals = 24
		/// </summary>
		Update_Statistic_Intervals = 24,
		/// <summary>
		/// Workflow = 10
		/// </summary>
		Workflow = 10
	}

	public enum StateCode
	{
		/// <summary>
		/// Completed = 3
		/// </summary>
		Completed = 3,
		/// <summary>
		/// Locked = 2
		/// </summary>
		Locked = 2,
		/// <summary>
		/// Ready = 0
		/// </summary>
		Ready = 0,
		/// <summary>
		/// Suspended = 1
		/// </summary>
		Suspended = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Canceled = 32
		/// </summary>
		Canceled = 32,
		/// <summary>
		/// Canceling = 22
		/// </summary>
		Canceling = 22,
		/// <summary>
		/// Failed = 31
		/// </summary>
		Failed = 31,
		/// <summary>
		/// In_Progress = 20
		/// </summary>
		In_Progress = 20,
		/// <summary>
		/// Pausing = 21
		/// </summary>
		Pausing = 21,
		/// <summary>
		/// Succeeded = 30
		/// </summary>
		Succeeded = 30,
		/// <summary>
		/// Waiting = 10
		/// </summary>
		Waiting = 10,
		/// <summary>
		/// Waiting_For_Resources = 0
		/// </summary>
		Waiting_For_Resources = 0
	}
}

namespace Abc.LuckyStar2.Shared.Entities
{
	public partial class AsyncOperation : EntityBase
	{
		public struct Fields
		{
			public const string AsyncOperationId = "asyncoperationid";
			public const string BreadcrumbId = "breadcrumbid";
			public const string CallerOrigin = "callerorigin";
			public const string CompletedOn = "completedon";
			public const string CorrelationId = "correlationid";
			public const string CorrelationUpdatedTime = "correlationupdatedtime";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Data = "data";
			public const string DependencyToken = "dependencytoken";
			public const string Depth = "depth";
			public const string ErrorCode = "errorcode";
			public const string ExecutionTimeSpan = "executiontimespan";
			public const string ExpanderStartTime = "expanderstarttime";
			public const string FriendlyMessage = "friendlymessage";
			public const string HostId = "hostid";
			public const string IsWaitingForEvent = "iswaitingforevent";
			public const string Message = "message";
			public const string MessageName = "messagename";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OperationType = "operationtype";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningExtensionId = "owningextensionid";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentPluginExecutionId = "parentpluginexecutionid";
			public const string PostponeUntil = "postponeuntil";
			public const string PrimaryEntityType = "primaryentitytype";
			public const string RecurrencePattern = "recurrencepattern";
			public const string RecurrenceStartTime = "recurrencestarttime";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RequestId = "requestid";
			public const string RetainJobHistory = "retainjobhistory";
			public const string RetryCount = "retrycount";
			public const string RootExecutionContext = "rootexecutioncontext";
			public const string Sequence = "sequence";
			public const string StartedOn = "startedon";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subtype = "subtype";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string WorkflowActivationId = "workflowactivationid";
			public const string WorkflowIsBlocked = "workflowisblocked";
			public const string WorkflowStageName = "workflowstagename";
			public const string WorkflowState = "workflowstate";
			public const string Workload = "workload";
		}

		public const string EntityLogicalName = "asyncoperation";

		public const int EntityTypeCode = 4700;

		[DebuggerNonUserCode()]
		public AsyncOperation()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AsyncOperation(Guid AsyncOperationId)
		{
			Entity = new Entity(EntityLogicalName, AsyncOperationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AsyncOperation(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AsyncOperation(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AsyncOperation(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public AsyncOperation(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the system job.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>System Job</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid AsyncOperationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.AsyncOperationId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>The breadcrumb record ID.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Breadcrumb ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? BreadcrumbId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.BreadcrumbId); }
			set { Entity.Attributes[Fields.BreadcrumbId] = value; }
		}

		/// <summary>
		/// <para>The origin of the caller.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Caller Origin</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string CallerOrigin
		{
			get { return Entity.GetAttributeValue<string>(Fields.CallerOrigin); }
			set { Entity.Attributes[Fields.CallerOrigin] = value; }
		}

		/// <summary>
		/// <para>Date and time when the system job was completed.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Completed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedOn); }
		}

		/// <summary>
		/// <para>Unique identifier used to correlate between multiple SDK requests and system jobs.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Correlation Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? CorrelationId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.CorrelationId); }
			set { Entity.Attributes[Fields.CorrelationId] = value; }
		}

		/// <summary>
		/// <para>Last time the correlation depth was updated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Correlation Updated Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CorrelationUpdatedTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CorrelationUpdatedTime); }
			set { Entity.Attributes[Fields.CorrelationUpdatedTime] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the system job.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the system job was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the asyncoperation.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unstructured data associated with the system job.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Data
		{
			get { return Entity.GetAttributeValue<string>(Fields.Data); }
			set { Entity.Attributes[Fields.Data] = value; }
		}

		/// <summary>
		/// <para>Execution of all operations with the same dependency token is serialized.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Dependency Token</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DependencyToken
		{
			get { return Entity.GetAttributeValue<string>(Fields.DependencyToken); }
			set { Entity.Attributes[Fields.DependencyToken] = value; }
		}

		/// <summary>
		/// <para>Number of SDK calls made since the first call.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Depth</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Depth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Depth); }
			set { Entity.Attributes[Fields.Depth] = value; }
		}

		/// <summary>
		/// <para>Error code returned from a canceled system job.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Error Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ErrorCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ErrorCode); }
		}

		/// <summary>
		/// <para>Time that the system job has taken to execute.</para>
		/// <para>ReadOnly - Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>ExecutionTimeSpan</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? ExecutionTimeSpan
		{
			get { return Entity.GetAttributeValue<double?>(Fields.ExecutionTimeSpan); }
		}

		/// <summary>
		/// <para>The datetime when the Expander pipeline started.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Expander Start Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ExpanderStartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ExpanderStartTime); }
			set { Entity.Attributes[Fields.ExpanderStartTime] = value; }
		}

		/// <summary>
		/// <para>Message provided by the system job.</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Friendly message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FriendlyMessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.FriendlyMessage); }
			set { Entity.Attributes[Fields.FriendlyMessage] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the host that owns this system job.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Host</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string HostId
		{
			get { return Entity.GetAttributeValue<string>(Fields.HostId); }
			set { Entity.Attributes[Fields.HostId] = value; }
		}

		/// <summary>
		/// <para>Indicates that the system job is waiting for an event.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Waiting for Event</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsWaitingForEvent
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsWaitingForEvent); }
		}

		/// <summary>
		/// <para>Message related to the system job.</para>
		/// <para>ReadOnly - Memo - MaxLength: 100000</para>
		/// <para>Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Message
		{
			get { return Entity.GetAttributeValue<string>(Fields.Message); }
		}

		/// <summary>
		/// <para>Name of the message that started this system job.</para>
		/// <para>String - MaxLength: 160</para>
		/// <para>Message Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MessageName
		{
			get { return Entity.GetAttributeValue<string>(Fields.MessageName); }
			set { Entity.Attributes[Fields.MessageName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the system job.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the system job was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the asyncoperation.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the system job.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>System Job Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Type of the system job.</para>
		/// <para>Picklist</para>
		/// <para>System Job Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.LuckyStar2.Shared.Entities.AsyncOperationOptionSets.OperationType? OperationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OperationType);
				if (value == null) return null;
				return (Abc.LuckyStar2.Shared.Entities.AsyncOperationOptionSets.OperationType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OperationType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OperationType] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the system job.</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the system job.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the owning extension with which the system job is associated.</para>
		/// <para>Lookup</para>
		/// <para>Owning Extension</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningExtensionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningExtensionId); }
			set { Entity.Attributes[Fields.OwningExtensionId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ParentPluginExecutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ParentPluginExecutionId); }
			set { Entity.Attributes[Fields.ParentPluginExecutionId] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the system job should run only after the specified date and time.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Postpone Until</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? PostponeUntilUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.PostponeUntil); }
			set { Entity.Attributes[Fields.PostponeUntil] = value; }
		}

		/// <summary>
		/// <para>Type of entity with which the system job is primarily associated.</para>
		/// <para>EntityName</para>
		/// <para>Primary Entity Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryEntityType
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryEntityType); }
			set { Entity.Attributes[Fields.PrimaryEntityType] = value; }
		}

		/// <summary>
		/// <para>Pattern of the system job's recurrence.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Recurrence Pattern</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RecurrencePattern
		{
			get { return Entity.GetAttributeValue<string>(Fields.RecurrencePattern); }
			set { Entity.Attributes[Fields.RecurrencePattern] = value; }
		}

		/// <summary>
		/// <para>Starting time in UTC for the recurrence pattern.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Recurrence Start</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? RecurrenceStartTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.RecurrenceStartTime); }
			set { Entity.Attributes[Fields.RecurrenceStartTime] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the object with which the system job is associated.</para>
		/// <para>Lookup</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the request that generated the system job.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Request</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? RequestId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.RequestId); }
			set { Entity.Attributes[Fields.RequestId] = value; }
		}

		/// <summary>
		/// <para>Retain job history.</para>
		/// <para>Boolean</para>
		/// <para>Retain Job History</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? RetainJobHistory
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.RetainJobHistory); }
			set { Entity.Attributes[Fields.RetainJobHistory] = value; }
		}

		/// <summary>
		/// <para>Number of times to retry the system job.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Retry Count</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? RetryCount
		{
			get { return Entity.GetAttributeValue<int?>(Fields.RetryCount); }
		}

		/// <summary>
		/// <para>Root execution context of the job that trigerred async job.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>RootExecutionContext</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RootExecutionContext
		{
			get { return Entity.GetAttributeValue<string>(Fields.RootExecutionContext); }
			set { Entity.Attributes[Fields.RootExecutionContext] = value; }
		}

		/// <summary>
		/// <para>Order in which operations were submitted.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Sequence</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? Sequence
		{
			get { return Entity.GetAttributeValue<long?>(Fields.Sequence); }
		}

		/// <summary>
		/// <para>Date and time when the system job was started.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Started On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartedOn); }
		}

		/// <summary>
		/// <para>Status of the system job.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.LuckyStar2.Shared.Entities.AsyncOperationOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Abc.LuckyStar2.Shared.Entities.AsyncOperationOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the system job.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.LuckyStar2.Shared.Entities.AsyncOperationOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Abc.LuckyStar2.Shared.Entities.AsyncOperationOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>The Subtype of the Async Job</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 255</para>
		/// <para>Subtype</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Subtype
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Subtype); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the workflow activation related to the system job.</para>
		/// <para>Lookup</para>
		/// <para>Workflow Activation Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference WorkflowActivationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.WorkflowActivationId); }
			set { Entity.Attributes[Fields.WorkflowActivationId] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the workflow instance was blocked when it was persisted.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Workflow Is Blocked</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? WorkflowIsBlocked
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.WorkflowIsBlocked); }
		}

		/// <summary>
		/// <para>Name of a workflow stage.</para>
		/// <para>ReadOnly - String - MaxLength: 256</para>
		/// <para>Workflow Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WorkflowStageName
		{
			get { return Entity.GetAttributeValue<string>(Fields.WorkflowStageName); }
		}

		/// <summary>
		/// <para>State of the workflow job.</para>
		/// <para>ReadOnly - String - MaxLength: 1073741823</para>
		/// <para>Workflow State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string WorkflowState
		{
			get { return Entity.GetAttributeValue<string>(Fields.WorkflowState); }
		}

		/// <summary>
		/// <para>The workload name.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Workload</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Workload
		{
			get { return Entity.GetAttributeValue<string>(Fields.Workload); }
			set { Entity.Attributes[Fields.Workload] = value; }
		}
	}
}
