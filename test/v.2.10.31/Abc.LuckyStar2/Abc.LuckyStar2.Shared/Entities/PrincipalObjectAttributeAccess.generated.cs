//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Abc.LuckyStar2.Shared.Entities.PrincipalObjectAttributeAccessOptionSets
{

}

namespace Abc.LuckyStar2.Shared.Entities
{
	public partial class PrincipalObjectAttributeAccess : EntityBase
	{
		public struct Fields
		{
			public const string AttributeId = "attributeid";
			public const string ObjectId = "objectid";
			public const string OrganizationId = "organizationid";
			public const string PrincipalId = "principalid";
			public const string PrincipalObjectAttributeAccessId = "principalobjectattributeaccessid";
			public const string ReadAccess = "readaccess";
			public const string UpdateAccess = "updateaccess";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "principalobjectattributeaccess";

		public const int EntityTypeCode = 44;

		[DebuggerNonUserCode()]
		public PrincipalObjectAttributeAccess()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PrincipalObjectAttributeAccess(Guid PrincipalObjectAttributeAccessId)
		{
			Entity = new Entity(EntityLogicalName, PrincipalObjectAttributeAccessId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PrincipalObjectAttributeAccess(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PrincipalObjectAttributeAccess(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PrincipalObjectAttributeAccess(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public PrincipalObjectAttributeAccess(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the shared secured field</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Secured field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? AttributeId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.AttributeId); }
			set { Entity.Attributes[Fields.AttributeId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the entity instance with shared secured field</para>
		/// <para>Lookup</para>
		/// <para>Entity instance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated organization.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Organization</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OrganizationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OrganizationId); }
		}

		/// <summary>
		/// <para>Unique identifier of the principal to which secured field is shared</para>
		/// <para>Lookup</para>
		/// <para>Principal</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PrincipalId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PrincipalId); }
			set { Entity.Attributes[Fields.PrincipalId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the shared secured field instance</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Shared secured field</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid PrincipalObjectAttributeAccessId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.PrincipalObjectAttributeAccessId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Read permission for secured field instance</para>
		/// <para>Boolean</para>
		/// <para>Read permission</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? ReadAccess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.ReadAccess); }
			set { Entity.Attributes[Fields.ReadAccess] = value; }
		}

		/// <summary>
		/// <para>Update permission for secured field instance</para>
		/// <para>Boolean</para>
		/// <para>Update permission</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? UpdateAccess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.UpdateAccess); }
			set { Entity.Attributes[Fields.UpdateAccess] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
