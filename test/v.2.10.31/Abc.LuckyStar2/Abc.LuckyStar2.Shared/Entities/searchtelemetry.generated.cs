//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Abc.LuckyStar2.Shared.Entities.searchtelemetryOptionSets
{

}

namespace Abc.LuckyStar2.Shared.Entities
{
	public partial class searchtelemetry : EntityBase
	{
		public struct Fields
		{
			public const string CreatedOn = "createdon";
			public const string FeedbackData = "feedbackdata";
			public const string searchtelemetryId = "searchtelemetryid";
			public const string TTLInSeconds = "ttlinseconds";
			public const string UserQuery = "userquery";
		}

		public const string EntityLogicalName = "searchtelemetry";

		public const int EntityTypeCode = 10101;

		[DebuggerNonUserCode()]
		public searchtelemetry()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public searchtelemetry(Guid searchtelemetryId)
		{
			Entity = new Entity(EntityLogicalName, searchtelemetryId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public searchtelemetry(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public searchtelemetry(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public searchtelemetry(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public searchtelemetry(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Feedback data for the search</para>
		/// <para>String - MaxLength: 1048577</para>
		/// <para>FeedbackData</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FeedbackData
		{
			get { return Entity.GetAttributeValue<string>(Fields.FeedbackData); }
			set { Entity.Attributes[Fields.FeedbackData] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>SearchTelemetry Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid searchtelemetryId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.searchtelemetryId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Time to live in seconds.</para>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Time to live</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TTLInSeconds
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TTLInSeconds); }
			set { Entity.Attributes[Fields.TTLInSeconds] = value; }
		}

		/// <summary>
		/// <para>User Query</para>
		/// <para>String - MaxLength: 1000</para>
		/// <para>UserQuery</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UserQuery
		{
			get { return Entity.GetAttributeValue<string>(Fields.UserQuery); }
			set { Entity.Attributes[Fields.UserQuery] = value; }
		}
	}
}
