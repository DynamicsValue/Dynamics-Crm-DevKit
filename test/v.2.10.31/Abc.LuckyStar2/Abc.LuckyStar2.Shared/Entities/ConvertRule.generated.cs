//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Abc.LuckyStar2.Shared.Entities.ConvertRuleOptionSets
{
	public enum ComponentState
	{
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted_Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3,
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1
	}

	public enum SourceTypeCode
	{
		/// <summary>
		/// Email = 2
		/// </summary>
		Email = 2,
		/// <summary>
		/// Social_Monitoring = 1
		/// </summary>
		Social_Monitoring = 1
	}

	public enum StateCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Draft = 0
		/// </summary>
		Draft = 0
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 2
		/// </summary>
		Active = 2,
		/// <summary>
		/// Draft = 1
		/// </summary>
		Draft = 1
	}
}

namespace Abc.LuckyStar2.Shared.Entities
{
	public partial class ConvertRule : EntityBase
	{
		public struct Fields
		{
			public const string AllowUnknownSender = "allowunknownsender";
			public const string ChannelPropertyGroupId = "channelpropertygroupid";
			public const string CheckActiveEntitlement = "checkactiveentitlement";
			public const string CheckBlockedSocialProfile = "checkblockedsocialprofile";
			public const string CheckDirectMessages = "checkdirectmessages";
			public const string CheckIfResolved = "checkifresolved";
			public const string ComponentState = "componentstate";
			public const string ConvertRuleId = "convertruleid";
			public const string ConvertRuleIdUnique = "convertruleidunique";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Description = "description";
			public const string ExchangeRate = "exchangerate";
			public const string IsManaged = "ismanaged";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string QueueId = "queueid";
			public const string RecordVersion = "recordversion";
			public const string ResolvedSince = "resolvedsince";
			public const string ResponseTemplateId = "responsetemplateid";
			public const string SendAutomaticResponse = "sendautomaticresponse";
			public const string SolutionId = "solutionid";
			public const string SourceChannelTypeCode = "sourcechanneltypecode";
			public const string SourceTypeCode = "sourcetypecode";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
			public const string WorkflowId = "workflowid";
		}

		public const string EntityLogicalName = "convertrule";

		public const int EntityTypeCode = 9300;

		[DebuggerNonUserCode()]
		public ConvertRule()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ConvertRule(Guid ConvertRuleId)
		{
			Entity = new Entity(EntityLogicalName, ConvertRuleId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ConvertRule(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ConvertRule(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ConvertRule(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ConvertRule(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Choose whether items from unknown senders should be converted to records.</para>
		/// <para>Boolean</para>
		/// <para>Allow Unknown Sender</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AllowUnknownSender
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AllowUnknownSender); }
			set { Entity.Attributes[Fields.AllowUnknownSender] = value; }
		}

		/// <summary>
		/// <para>channel property group associated with the convert rule.</para>
		/// <para>Lookup</para>
		/// <para>Channel Property Group</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ChannelPropertyGroupId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ChannelPropertyGroupId); }
			set { Entity.Attributes[Fields.ChannelPropertyGroupId] = value; }
		}

		/// <summary>
		/// <para>Choose whether cases should be created for customers with active entitlements.</para>
		/// <para>Boolean</para>
		/// <para>Check Active SLA</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CheckActiveEntitlement
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CheckActiveEntitlement); }
			set { Entity.Attributes[Fields.CheckActiveEntitlement] = value; }
		}

		/// <summary>
		/// <para>Information whether record needs to be created for black listed social profiles.</para>
		/// <para>Boolean</para>
		/// <para>Check black listed social profiles</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CheckBlockedSocialProfile
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CheckBlockedSocialProfile); }
			set { Entity.Attributes[Fields.CheckBlockedSocialProfile] = value; }
		}

		/// <summary>
		/// <para>Information whether record needs to be created for direct messages.</para>
		/// <para>Boolean</para>
		/// <para>Create records for private messages only</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CheckDirectMessages
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CheckDirectMessages); }
			set { Entity.Attributes[Fields.CheckDirectMessages] = value; }
		}

		/// <summary>
		/// <para>Choose whether an item related to a resolved case should be converted to a case.</para>
		/// <para>Boolean</para>
		/// <para>Check If Resolved</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? CheckIfResolved
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.CheckIfResolved); }
			set { Entity.Attributes[Fields.CheckIfResolved] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.LuckyStar2.Shared.Entities.ConvertRuleOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Abc.LuckyStar2.Shared.Entities.ConvertRuleOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Convert Rule</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ConvertRuleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ConvertRuleId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Unique Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ConvertRuleIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ConvertRuleIdUnique); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type additional information to describe the rule for creating records automatically.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the queue with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type a title or name of the queue for which the setting is defined.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Shows the business unit that the convert rule owner belongs to.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>Lookup</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
			set { Entity.Attributes[Fields.OwningTeam] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>Lookup</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
			set { Entity.Attributes[Fields.OwningUser] = value; }
		}

		/// <summary>
		/// <para>Choose the queue that the rule is assigned to.</para>
		/// <para>Lookup</para>
		/// <para>Queue</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference QueueId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.QueueId); }
			set { Entity.Attributes[Fields.QueueId] = value; }
		}

		/// <summary>
		/// <para>Record Version</para>
		/// <para>ReadOnly - String - MaxLength: 50</para>
		/// <para>Record Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RecordVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.RecordVersion); }
		}

		/// <summary>
		/// <para>If you want to create a new case for an item associated with a resolved case, type how long a case must remain resolved before a new case is created for the associated item.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Resolved Since</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ResolvedSince
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ResolvedSince); }
			set { Entity.Attributes[Fields.ResolvedSince] = value; }
		}

		/// <summary>
		/// <para>Choose the email template to use to create an automatic response to the customer.</para>
		/// <para>Lookup</para>
		/// <para>Response Email Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ResponseTemplateId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ResponseTemplateId); }
			set { Entity.Attributes[Fields.ResponseTemplateId] = value; }
		}

		/// <summary>
		/// <para>Choose whether to send an automatic email response to the customer after a record is created.</para>
		/// <para>Boolean</para>
		/// <para>Send Automatic Response</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SendAutomaticResponse
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SendAutomaticResponse); }
			set { Entity.Attributes[Fields.SendAutomaticResponse] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Identifies the Dynamics 365 activity that's the source of the record.</para>
		/// <para>EntityName</para>
		/// <para>Source Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string SourceChannelTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.SourceChannelTypeCode); }
			set { Entity.Attributes[Fields.SourceChannelTypeCode] = value; }
		}

		/// <summary>
		/// <para>Source of the record.</para>
		/// <para>Picklist</para>
		/// <para>Source Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.LuckyStar2.Shared.Entities.ConvertRuleOptionSets.SourceTypeCode? SourceTypeCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.SourceTypeCode);
				if (value == null) return null;
				return (Abc.LuckyStar2.Shared.Entities.ConvertRuleOptionSets.SourceTypeCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.SourceTypeCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.SourceTypeCode] = null;
			}
		}

		/// <summary>
		/// <para>Status of the Convert Rule</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.LuckyStar2.Shared.Entities.ConvertRuleOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Abc.LuckyStar2.Shared.Entities.ConvertRuleOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Convert Rule</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.LuckyStar2.Shared.Entities.ConvertRuleOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Abc.LuckyStar2.Shared.Entities.ConvertRuleOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the queue.</para>
		/// <para>Lookup</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>Version number of the convert rule.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Shows the workflow for this rule.</para>
		/// <para>Lookup</para>
		/// <para>Workflow</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference WorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.WorkflowId); }
			set { Entity.Attributes[Fields.WorkflowId] = value; }
		}
	}
}
