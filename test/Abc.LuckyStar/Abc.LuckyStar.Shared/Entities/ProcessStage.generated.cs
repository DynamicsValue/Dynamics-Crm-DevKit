//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Abc.LuckyStar.Shared.Entities.ProcessStageOptionSets
{
	public enum OperationKind
	{
		/// <summary>
		/// Http = 473330000
		/// </summary>
		Http = 473330000,
		/// <summary>
		/// PowerApp = 473330001
		/// </summary>
		PowerApp = 473330001,
		/// <summary>
		/// PowerAppV2 = 473330002
		/// </summary>
		PowerAppV2 = 473330002,
		/// <summary>
		/// Button = 473330003
		/// </summary>
		Button = 473330003,
		/// <summary>
		/// ApiConnection = 473330004
		/// </summary>
		ApiConnection = 473330004,
		/// <summary>
		/// Alert = 473330005
		/// </summary>
		Alert = 473330005,
		/// <summary>
		/// EventGrid = 473330006
		/// </summary>
		EventGrid = 473330006,
		/// <summary>
		/// CurrentTime = 473330007
		/// </summary>
		CurrentTime = 473330007,
		/// <summary>
		/// ConvertTimeZone = 473330008
		/// </summary>
		ConvertTimeZone = 473330008,
		/// <summary>
		/// GetFutureTime = 473330009
		/// </summary>
		GetFutureTime = 473330009,
		/// <summary>
		/// GetPastTime = 473330010
		/// </summary>
		GetPastTime = 473330010,
		/// <summary>
		/// AddToTime = 473330011
		/// </summary>
		AddToTime = 473330011,
		/// <summary>
		/// SubtractFromTime = 473330012
		/// </summary>
		SubtractFromTime = 473330012,
		/// <summary>
		/// AzureMonitorAlert = 473330013
		/// </summary>
		AzureMonitorAlert = 473330013,
		/// <summary>
		/// SecurityCenterAlert = 473330014
		/// </summary>
		SecurityCenterAlert = 473330014,
		/// <summary>
		/// JsonToJson = 473330015
		/// </summary>
		JsonToJson = 473330015,
		/// <summary>
		/// JsonToText = 473330016
		/// </summary>
		JsonToText = 473330016,
		/// <summary>
		/// XmlToJson = 473330017
		/// </summary>
		XmlToJson = 473330017,
		/// <summary>
		/// XmlToText = 473330018
		/// </summary>
		XmlToText = 473330018,
		/// <summary>
		/// Geofence = 473330019
		/// </summary>
		Geofence = 473330019,
		/// <summary>
		/// ODataOpenApiConnection = 473330020
		/// </summary>
		ODataOpenApiConnection = 473330020,
		/// <summary>
		/// IndexOf = 473330021
		/// </summary>
		IndexOf = 473330021,
		/// <summary>
		/// Substring = 473330022
		/// </summary>
		Substring = 473330022,
		/// <summary>
		/// VirtualAgent = 473330023
		/// </summary>
		VirtualAgent = 473330023,
		/// <summary>
		/// FormatNumber = 473330024
		/// </summary>
		FormatNumber = 473330024
	}

	public enum OperationType
	{
		/// <summary>
		/// Http = 473330000
		/// </summary>
		Http = 473330000,
		/// <summary>
		/// ApiApp = 473330001
		/// </summary>
		ApiApp = 473330001,
		/// <summary>
		/// Recurrence = 473330002
		/// </summary>
		Recurrence = 473330002,
		/// <summary>
		/// Workflow = 473330003
		/// </summary>
		Workflow = 473330003,
		/// <summary>
		/// Flow = 473330004
		/// </summary>
		Flow = 473330004,
		/// <summary>
		/// Wait = 473330005
		/// </summary>
		Wait = 473330005,
		/// <summary>
		/// ApiConnection = 473330006
		/// </summary>
		ApiConnection = 473330006,
		/// <summary>
		/// OpenApiConnection = 473330007
		/// </summary>
		OpenApiConnection = 473330007,
		/// <summary>
		/// Manual = 473330008
		/// </summary>
		Manual = 473330008,
		/// <summary>
		/// ApiConnectionWebhook = 473330009
		/// </summary>
		ApiConnectionWebhook = 473330009,
		/// <summary>
		/// OpenApiConnectionWebhook = 473330010
		/// </summary>
		OpenApiConnectionWebhook = 473330010,
		/// <summary>
		/// Response = 473330011
		/// </summary>
		Response = 473330011,
		/// <summary>
		/// HttpWebhook = 473330012
		/// </summary>
		HttpWebhook = 473330012,
		/// <summary>
		/// Compose = 473330013
		/// </summary>
		Compose = 473330013,
		/// <summary>
		/// Query = 473330014
		/// </summary>
		Query = 473330014,
		/// <summary>
		/// Function = 473330015
		/// </summary>
		Function = 473330015,
		/// <summary>
		/// ApiManagement = 473330016
		/// </summary>
		ApiManagement = 473330016,
		/// <summary>
		/// XmlValidation = 473330017
		/// </summary>
		XmlValidation = 473330017,
		/// <summary>
		/// FlatFileEncoding = 473330018
		/// </summary>
		FlatFileEncoding = 473330018,
		/// <summary>
		/// Scope = 473330019
		/// </summary>
		Scope = 473330019,
		/// <summary>
		/// Request = 473330020
		/// </summary>
		Request = 473330020,
		/// <summary>
		/// If = 473330021
		/// </summary>
		If = 473330021,
		/// <summary>
		/// Foreach = 473330022
		/// </summary>
		Foreach = 473330022,
		/// <summary>
		/// Until = 473330023
		/// </summary>
		Until = 473330023,
		/// <summary>
		/// Xslt = 473330024
		/// </summary>
		Xslt = 473330024,
		/// <summary>
		/// FlatFileDecoding = 473330025
		/// </summary>
		FlatFileDecoding = 473330025,
		/// <summary>
		/// Terminate = 473330026
		/// </summary>
		Terminate = 473330026,
		/// <summary>
		/// IntegrationAccountArtifactLookup = 473330027
		/// </summary>
		IntegrationAccountArtifactLookup = 473330027,
		/// <summary>
		/// Switch = 473330028
		/// </summary>
		Switch = 473330028,
		/// <summary>
		/// ParseJson = 473330029
		/// </summary>
		ParseJson = 473330029,
		/// <summary>
		/// Table = 473330030
		/// </summary>
		Table = 473330030,
		/// <summary>
		/// Join = 473330031
		/// </summary>
		Join = 473330031,
		/// <summary>
		/// Select = 473330032
		/// </summary>
		Select = 473330032,
		/// <summary>
		/// InitializeVariable = 473330033
		/// </summary>
		InitializeVariable = 473330033,
		/// <summary>
		/// IncrementVariable = 473330034
		/// </summary>
		IncrementVariable = 473330034,
		/// <summary>
		/// DecrementVariable = 473330035
		/// </summary>
		DecrementVariable = 473330035,
		/// <summary>
		/// SetVariable = 473330036
		/// </summary>
		SetVariable = 473330036,
		/// <summary>
		/// AppendToArrayVariable = 473330037
		/// </summary>
		AppendToArrayVariable = 473330037,
		/// <summary>
		/// AppendToStringVariable = 473330038
		/// </summary>
		AppendToStringVariable = 473330038,
		/// <summary>
		/// Batch = 473330039
		/// </summary>
		Batch = 473330039,
		/// <summary>
		/// SendToBatch = 473330040
		/// </summary>
		SendToBatch = 473330040,
		/// <summary>
		/// SlidingWindow = 473330041
		/// </summary>
		SlidingWindow = 473330041,
		/// <summary>
		/// Expression = 473330042
		/// </summary>
		Expression = 473330042,
		/// <summary>
		/// Liquid = 473330043
		/// </summary>
		Liquid = 473330043,
		/// <summary>
		/// JavascriptCode = 473330044
		/// </summary>
		JavascriptCode = 473330044,
		/// <summary>
		/// As2Decode = 473330045
		/// </summary>
		As2Decode = 473330045,
		/// <summary>
		/// As2Encode = 473330046
		/// </summary>
		As2Encode = 473330046,
		/// <summary>
		/// RosettaNetEncode = 473330047
		/// </summary>
		RosettaNetEncode = 473330047,
		/// <summary>
		/// RosettaNetDecode = 473330048
		/// </summary>
		RosettaNetDecode = 473330048,
		/// <summary>
		/// RosettaNetWaitForResponse = 473330049
		/// </summary>
		RosettaNetWaitForResponse = 473330049,
		/// <summary>
		/// ApiConnectionNotification = 473330050
		/// </summary>
		ApiConnectionNotification = 473330050,
		/// <summary>
		/// Changeset = 473330051
		/// </summary>
		Changeset = 473330051,
		/// <summary>
		/// SwiftEncode = 473330052
		/// </summary>
		SwiftEncode = 473330052
	}

	public enum StageCategory
	{
		/// <summary>
		/// Qualify = 0
		/// </summary>
		Qualify = 0,
		/// <summary>
		/// Develop = 1
		/// </summary>
		Develop = 1,
		/// <summary>
		/// Propose = 2
		/// </summary>
		Propose = 2,
		/// <summary>
		/// Close = 3
		/// </summary>
		Close = 3,
		/// <summary>
		/// Identify = 4
		/// </summary>
		Identify = 4,
		/// <summary>
		/// Research = 5
		/// </summary>
		Research = 5,
		/// <summary>
		/// Resolve = 6
		/// </summary>
		Resolve = 6,
		/// <summary>
		/// Approval = 7
		/// </summary>
		Approval = 7
	}
}

namespace Abc.LuckyStar.Shared.Entities
{
	public partial class ProcessStage : EntityBase
	{
		public struct Fields
		{
			public const string ClientData = "clientdata";
			public const string Connector = "connector";
			public const string IsTrigger = "istrigger";
			public const string OperationId = "operationid";
			public const string OperationKind = "operationkind";
			public const string OperationType = "operationtype";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string PrimaryEntityTypeCode = "primaryentitytypecode";
			public const string ProcessId = "processid";
			public const string ProcessStageId = "processstageid";
			public const string StageCategory = "stagecategory";
			public const string StageName = "stagename";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "processstage";

		public const int EntityTypeCode = 4724;

		[DebuggerNonUserCode()]
		public ProcessStage()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProcessStage(Guid ProcessStageId)
		{
			Entity = new Entity(EntityLogicalName, ProcessStageId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProcessStage(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProcessStage(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProcessStage(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProcessStage(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Step metadata for process stage</para>
		/// <para>ReadOnly - Memo - MaxLength: 1073741823</para>
		/// <para>Client Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ClientData
		{
			get { return Entity.GetAttributeValue<string>(Fields.ClientData); }
		}

		/// <summary>
		/// <para>The connector associated with the stage.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Connector</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Connector
		{
			get { return Entity.GetAttributeValue<string>(Fields.Connector); }
			set { Entity.Attributes[Fields.Connector] = value; }
		}

		/// <summary>
		/// <para>Whether the stage is a trigger</para>
		/// <para>Boolean</para>
		/// <para>Is Trigger</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTrigger
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTrigger); }
			set { Entity.Attributes[Fields.IsTrigger] = value; }
		}

		/// <summary>
		/// <para>The operation id of the stage</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Operation Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string OperationId
		{
			get { return Entity.GetAttributeValue<string>(Fields.OperationId); }
			set { Entity.Attributes[Fields.OperationId] = value; }
		}

		/// <summary>
		/// <para>The operation kind</para>
		/// <para>Picklist</para>
		/// <para>Operation Kind</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.LuckyStar.Shared.Entities.ProcessStageOptionSets.OperationKind? OperationKind
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OperationKind);
				if (value == null) return null;
				return (Abc.LuckyStar.Shared.Entities.ProcessStageOptionSets.OperationKind)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OperationKind] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OperationKind] = null;
			}
		}

		/// <summary>
		/// <para>The type of the operation</para>
		/// <para>Picklist</para>
		/// <para>Operation Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.LuckyStar.Shared.Entities.ProcessStageOptionSets.OperationType? OperationType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.OperationType);
				if (value == null) return null;
				return (Abc.LuckyStar.Shared.Entities.ProcessStageOptionSets.OperationType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.OperationType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.OperationType] = null;
			}
		}

		/// <summary>
		/// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
		/// <para>ReadOnly - Required - Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Select the business unit that owns the record.</para>
		/// <para>ReadOnly - Required - Uniqueidentifier</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Primary entity associated with the stage.</para>
		/// <para>EntityName</para>
		/// <para>Primary Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryEntityTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryEntityTypeCode); }
			set { Entity.Attributes[Fields.PrimaryEntityTypeCode] = value; }
		}

		/// <summary>
		/// <para>Shows the ID of the process.</para>
		/// <para>Lookup</para>
		/// <para>Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ProcessId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Shows the ID of the process stage record.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Process Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ProcessStageId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ProcessStageId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Select the category of the sales process.</para>
		/// <para>Picklist</para>
		/// <para>Stage Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.LuckyStar.Shared.Entities.ProcessStageOptionSets.StageCategory? StageCategory
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StageCategory);
				if (value == null) return null;
				return (Abc.LuckyStar.Shared.Entities.ProcessStageOptionSets.StageCategory)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StageCategory] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StageCategory] = null;
			}
		}

		/// <summary>
		/// <para>Type a name for the process stage.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Process Stage Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StageName
		{
			get { return Entity.GetAttributeValue<string>(Fields.StageName); }
			set { Entity.Attributes[Fields.StageName] = value; }
		}

		/// <summary>
		/// <para>Version number of the process stage.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
