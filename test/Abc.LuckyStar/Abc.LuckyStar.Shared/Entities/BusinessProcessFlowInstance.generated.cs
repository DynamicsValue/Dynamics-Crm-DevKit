//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Abc.LuckyStar.Shared.Entities.BusinessProcessFlowInstanceOptionSets
{
	public enum StateCode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Finished = 2
		/// </summary>
		Finished = 2,
		/// <summary>
		/// Aborted = 3
		/// </summary>
		Aborted = 3
	}
}

namespace Abc.LuckyStar.Shared.Entities
{
	public partial class BusinessProcessFlowInstance : EntityBase
	{
		public struct Fields
		{
			public const string ActiveStageStartedOn = "activestagestartedon";
			public const string BusinessProcessFlowInstanceId = "businessprocessflowinstanceid";
			public const string CompletedOn = "completedon";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string Entity1Id = "entity1id";
			public const string Entity1ObjectTypeCode = "entity1objecttypecode";
			public const string Entity2Id = "entity2id";
			public const string Entity2ObjectTypeCode = "entity2objecttypecode";
			public const string Entity3Id = "entity3id";
			public const string Entity3ObjectTypeCode = "entity3objecttypecode";
			public const string Entity4Id = "entity4id";
			public const string Entity4ObjectTypeCode = "entity4objecttypecode";
			public const string Entity5Id = "entity5id";
			public const string Entity5ObjectTypeCode = "entity5objecttypecode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string ProcessId = "processid";
			public const string ProcessStageId = "processstageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string TraversedPath = "traversedpath";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "businessprocessflowinstance";

		public const int EntityTypeCode = 4725;

		[DebuggerNonUserCode()]
		public BusinessProcessFlowInstance()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BusinessProcessFlowInstance(Guid BusinessProcessFlowInstanceId)
		{
			Entity = new Entity(EntityLogicalName, BusinessProcessFlowInstanceId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BusinessProcessFlowInstance(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BusinessProcessFlowInstance(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BusinessProcessFlowInstance(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public BusinessProcessFlowInstance(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Date and time when the active stage was started.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Active Stage Started On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ActiveStageStartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ActiveStageStartedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the business process flow instance.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Process Instance ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid BusinessProcessFlowInstanceId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.BusinessProcessFlowInstanceId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Date and time when the process completed.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Completed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Unique identifier of the first entity instance.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Entity 1 ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Entity1Id
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Entity1Id); }
			set { Entity.Attributes[Fields.Entity1Id] = value; }
		}

		/// <summary>
		/// <para>Object type code for the first entity of the business process flow instance.</para>
		/// <para>EntityName</para>
		/// <para>Entity1ObjectTypeCode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Entity1ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Entity1ObjectTypeCode); }
			set { Entity.Attributes[Fields.Entity1ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the second entity instance.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Entity 2 ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Entity2Id
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Entity2Id); }
			set { Entity.Attributes[Fields.Entity2Id] = value; }
		}

		/// <summary>
		/// <para>Object type code for the second entity of the business process flow instance.</para>
		/// <para>EntityName</para>
		/// <para>Entity2ObjectTypeCode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Entity2ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Entity2ObjectTypeCode); }
			set { Entity.Attributes[Fields.Entity2ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the third entity instance.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Entity 3 ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Entity3Id
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Entity3Id); }
			set { Entity.Attributes[Fields.Entity3Id] = value; }
		}

		/// <summary>
		/// <para>Object type code for the third entity of the business process flow instance.</para>
		/// <para>EntityName</para>
		/// <para>Entity3ObjectTypeCode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Entity3ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Entity3ObjectTypeCode); }
			set { Entity.Attributes[Fields.Entity3ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the fourth entity instance.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Entity 4 Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Entity4Id
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Entity4Id); }
			set { Entity.Attributes[Fields.Entity4Id] = value; }
		}

		/// <summary>
		/// <para>Object type code for the fourth entity of the business process flow instance.</para>
		/// <para>EntityName</para>
		/// <para>Entity4ObjectTypeCode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Entity4ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Entity4ObjectTypeCode); }
			set { Entity.Attributes[Fields.Entity4ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the fifth entity instance.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Entity 5 ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? Entity5Id
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.Entity5Id); }
			set { Entity.Attributes[Fields.Entity5Id] = value; }
		}

		/// <summary>
		/// <para>Object type code for the fifth entity of the business process flow instance.</para>
		/// <para>EntityName</para>
		/// <para>Entity5ObjectTypeCode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Entity5ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.Entity5ObjectTypeCode); }
			set { Entity.Attributes[Fields.Entity5ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Shows who last updated the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Shows who created the record on behalf of another user.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Type a descriptive name for the instance.</para>
		/// <para>String - MaxLength: 200</para>
		/// <para>Instance Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business process flow.</para>
		/// <para>Lookup</para>
		/// <para>Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ProcessId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of active stage in the business process flow instance.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Active Stage ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessStageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessStageId); }
			set { Entity.Attributes[Fields.ProcessStageId] = value; }
		}

		/// <summary>
		/// <para>Shows whether the business process flow instance is active or inactive.</para>
		/// <para>State</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.LuckyStar.Shared.Entities.BusinessProcessFlowInstanceOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Abc.LuckyStar.Shared.Entities.BusinessProcessFlowInstanceOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Business process flow instance's status.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Abc.LuckyStar.Shared.Entities.BusinessProcessFlowInstanceOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Abc.LuckyStar.Shared.Entities.BusinessProcessFlowInstanceOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>Active Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TraversedPath
		{
			get { return Entity.GetAttributeValue<string>(Fields.TraversedPath); }
			set { Entity.Attributes[Fields.TraversedPath] = value; }
		}

		/// <summary>
		/// <para>Version number of the business process flow instance.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
