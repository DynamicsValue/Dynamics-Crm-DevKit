//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.devkit_WebApiOptionSets
{
	public enum devkit_MultiOptionSetCode
	{
		/// <summary>
		/// Crm_2011 = 100000001
		/// </summary>
		Crm_2011 = 100000001,
		/// <summary>
		/// Crm_2013 = 100000002
		/// </summary>
		Crm_2013 = 100000002,
		/// <summary>
		/// Crm_2015 = 100000003
		/// </summary>
		Crm_2015 = 100000003,
		/// <summary>
		/// Crm_2016 = 100000004
		/// </summary>
		Crm_2016 = 100000004,
		/// <summary>
		/// Crm_4 = 100000000
		/// </summary>
		Crm_4 = 100000000,
		/// <summary>
		/// Dynamics_365 = 100000005
		/// </summary>
		Dynamics_365 = 100000005
	}

	public enum devkit_SingleOptionSetCode
	{
		/// <summary>
		/// Crm_2011 = 100000001
		/// </summary>
		Crm_2011 = 100000001,
		/// <summary>
		/// Crm_2013 = 100000002
		/// </summary>
		Crm_2013 = 100000002,
		/// <summary>
		/// Crm_2015 = 100000003
		/// </summary>
		Crm_2015 = 100000003,
		/// <summary>
		/// Crm_2016 = 100000004
		/// </summary>
		Crm_2016 = 100000004,
		/// <summary>
		/// Crm_4 = 100000000
		/// </summary>
		Crm_4 = 100000000,
		/// <summary>
		/// Dynamics_365 = 100000005
		/// </summary>
		Dynamics_365 = 100000005
	}

	public enum devkit_SingleOptionSetCodeCalculated
	{
		/// <summary>
		/// Crm_2011 = 100000001
		/// </summary>
		Crm_2011 = 100000001,
		/// <summary>
		/// Crm_2013 = 100000002
		/// </summary>
		Crm_2013 = 100000002,
		/// <summary>
		/// Crm_2015 = 100000003
		/// </summary>
		Crm_2015 = 100000003,
		/// <summary>
		/// Crm_2016 = 100000004
		/// </summary>
		Crm_2016 = 100000004,
		/// <summary>
		/// Crm_4 = 100000000
		/// </summary>
		Crm_4 = 100000000,
		/// <summary>
		/// Dynamics_365 = 100000005
		/// </summary>
		Dynamics_365 = 100000005
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Active_2 = 100000000
		/// </summary>
		Active_2 = 100000000,
		/// <summary>
		/// Active_3 = 100000001
		/// </summary>
		Active_3 = 100000001,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2,
		/// <summary>
		/// Inactive_2 = 100000002
		/// </summary>
		Inactive_2 = 100000002,
		/// <summary>
		/// Inactive_3 = 100000003
		/// </summary>
		Inactive_3 = 100000003
	}
}

namespace Dev.DevKit.Shared.Entities
{
	public partial class devkit_WebApi : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string devkit_AlternateKey = "devkit_alternatekey";
			public const string devkit_Currency = "devkit_currency";
			public const string devkit_currency_Base = "devkit_currency_base";
			public const string devkit_CustomerId = "devkit_customerid";
			public const string devkit_DateOnlyDateOnly = "devkit_dateonlydateonly";
			public const string devkit_DateOnlyDateOnlyCalculated = "devkit_dateonlydateonlycalculated";
			public const string devkit_DateOnlyDateOnlyRollup = "devkit_dateonlydateonlyrollup";
			public const string devkit_DateOnlyDateOnlyRollup_Date = "devkit_dateonlydateonlyrollup_date";
			public const string devkit_DateOnlyDateOnlyRollup_State = "devkit_dateonlydateonlyrollup_state";
			public const string devkit_DecimalNumber = "devkit_decimalnumber";
			public const string devkit_FloatingPointNumber = "devkit_floatingpointnumber";
			public const string devkit_LinkWebApiId = "devkit_linkwebapiid";
			public const string devkit_MultiOptionSetCode = "devkit_multioptionsetcode";
			public const string devkit_MultipleLiniesofText = "devkit_multipleliniesoftext";
			public const string devkit_Name = "devkit_name";
			public const string devkit_ParentWebApiId = "devkit_parentwebapiid";
			public const string devkit_SingleLineofTextEmail = "devkit_singlelineoftextemail";
			public const string devkit_SingleLineofTextPhone = "devkit_singlelineoftextphone";
			public const string devkit_SingleLineofTextText = "devkit_singlelineoftexttext";
			public const string devkit_SingleLineofTextTextArea = "devkit_singlelineoftexttextarea";
			public const string devkit_SingleLineofTextTickerSymbol = "devkit_singlelineoftexttickersymbol";
			public const string devkit_SingleLineofTextUrl = "devkit_singlelineoftexturl";
			public const string devkit_SingleOptionSetCode = "devkit_singleoptionsetcode";
			public const string devkit_SingleOptionSetCodeCalculated = "devkit_singleoptionsetcodecalculated";
			public const string devkit_TimeZoneDateAndTime = "devkit_timezonedateandtime";
			public const string devkit_TimeZoneDateAndTimeCalculated = "devkit_timezonedateandtimecalculated";
			public const string devkit_TimeZoneDateAndTimeRollup = "devkit_timezonedateandtimerollup";
			public const string devkit_TimeZoneDateAndTimeRollup_Date = "devkit_timezonedateandtimerollup_date";
			public const string devkit_TimeZoneDateAndTimeRollup_State = "devkit_timezonedateandtimerollup_state";
			public const string devkit_TimeZoneDateOnly = "devkit_timezonedateonly";
			public const string devkit_TimeZoneDateOnlyCalculated = "devkit_timezonedateonlycalculated";
			public const string devkit_TimeZoneDateOnlyRollup = "devkit_timezonedateonlyrollup";
			public const string devkit_TimeZoneDateOnlyRollup_Date = "devkit_timezonedateonlyrollup_date";
			public const string devkit_TimeZoneDateOnlyRollup_State = "devkit_timezonedateonlyrollup_state";
			public const string devkit_UserLocalDateAndTime = "devkit_userlocaldateandtime";
			public const string devkit_UserLocalDateAndTimeCalculated = "devkit_userlocaldateandtimecalculated";
			public const string devkit_UserLocalDateAndTimeRollup = "devkit_userlocaldateandtimerollup";
			public const string devkit_UserLocalDateAndTimeRollup_Date = "devkit_userlocaldateandtimerollup_date";
			public const string devkit_UserLocalDateAndTimeRollup_State = "devkit_userlocaldateandtimerollup_state";
			public const string devkit_UserLocalDateOnly = "devkit_userlocaldateonly";
			public const string devkit_UserLocalDateOnlyCalculated = "devkit_userlocaldateonlycalculated";
			public const string devkit_UserLocalDateOnlyRollup = "devkit_userlocaldateonlyrollup";
			public const string devkit_UserLocalDateOnlyRollup_Date = "devkit_userlocaldateonlyrollup_date";
			public const string devkit_UserLocalDateOnlyRollup_State = "devkit_userlocaldateonlyrollup_state";
			public const string devkit_WebApiId = "devkit_webapiid";
			public const string devkit_WholeNumberDuration = "devkit_wholenumberduration";
			public const string devkit_WholeNumberLanguage = "devkit_wholenumberlanguage";
			public const string devkit_WholeNumberNone = "devkit_wholenumbernone";
			public const string devkit_WholeNumberTimeZone = "devkit_wholenumbertimezone";
			public const string devkit_YesAndNo = "devkit_yesandno";
			public const string devkit_YesAndNoCalculated = "devkit_yesandnocalculated";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "devkit_webapi";

		public const int EntityTypeCode = 10030;

		[DebuggerNonUserCode()]
		public devkit_WebApi()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public devkit_WebApi(Guid devkit_WebApiId)
		{
			Entity = new Entity(EntityLogicalName, devkit_WebApiId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public devkit_WebApi(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public devkit_WebApi(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public devkit_WebApi(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public devkit_WebApi(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>String - MaxLength: 20</para>
		/// <para>Alternate Key</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_AlternateKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_AlternateKey); }
			set { Entity.Attributes[Fields.devkit_AlternateKey] = value; }
		}

		/// <summary>
		/// <para>Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? devkit_Currency
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.devkit_Currency);
				if (value == null) return null;
				return value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.devkit_Currency] = new Money(value.Value);
				else
					Entity.Attributes[Fields.devkit_Currency] = null;
			}
		}

		/// <summary>
		/// <para>Value of the Currency in base currency.</para>
		/// <para>ReadOnly - Money - MinValue: -922,337,203,685,477 - MaxValue: 922,337,203,685,477</para>
		/// <para>Currency (Base)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? devkit_currency_Base
		{
			get
			{
				var value = Entity.GetAttributeValue<Money>(Fields.devkit_currency_Base);
				if (value == null) return null;
				return value.Value;
			}
		}

		/// <summary>
		/// <para>Customer</para>
		/// <para>Customer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference devkit_CustomerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.devkit_CustomerId); }
			set { Entity.Attributes[Fields.devkit_CustomerId] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
		/// <para>Date Only Date Only</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? devkit_DateOnlyDateOnly
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.devkit_DateOnlyDateOnly);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
			set
			{
				if (value.HasValue)
				{
					DateTime? dateTime = value.Value.ToDateTime();
					Entity.Attributes[Fields.devkit_DateOnlyDateOnly] = dateTime;
				}
				else
					Entity.Attributes[Fields.devkit_DateOnlyDateOnly] = null;
			}
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
		/// <para>Date Only Date Only Calculated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? devkit_DateOnlyDateOnlyCalculated
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.devkit_DateOnlyDateOnlyCalculated);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: DateOnly - DateTimeFormat: DateOnly</para>
		/// <para>Date Only Date Only Rollup</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Date? devkit_DateOnlyDateOnlyRollup
		{
			get
			{
				var dateTime = Entity.GetAttributeValue<DateTime?>(Fields.devkit_DateOnlyDateOnlyRollup);
				if (dateTime == null) return null;
				return dateTime.Value.ToDate();
			}
		}

		/// <summary>
		/// <para>Last Updated time of rollup field Date Only Date Only Rollup.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Date Only Date Only Rollup (Last Updated On)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_DateOnlyDateOnlyRollup_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_DateOnlyDateOnlyRollup_Date); }
		}

		/// <summary>
		/// <para>State of rollup field Date Only Date Only Rollup.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Date Only Date Only Rollup (State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? devkit_DateOnlyDateOnlyRollup_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.devkit_DateOnlyDateOnlyRollup_State); }
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Decimal Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? devkit_DecimalNumber
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.devkit_DecimalNumber); }
			set { Entity.Attributes[Fields.devkit_DecimalNumber] = value; }
		}

		/// <summary>
		/// <para>Double - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>Floating Point Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public double? devkit_FloatingPointNumber
		{
			get { return Entity.GetAttributeValue<double?>(Fields.devkit_FloatingPointNumber); }
			set { Entity.Attributes[Fields.devkit_FloatingPointNumber] = value; }
		}

		/// <summary>
		/// <para>Lookup to devkit_webapi</para>
		/// <para>Link WebApi</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference devkit_LinkWebApiId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.devkit_LinkWebApiId); }
			set { Entity.Attributes[Fields.devkit_LinkWebApiId] = value; }
		}

		/// <summary>
		/// <para>MultiSelectPicklist</para>
		/// <para>Multi OptionSet</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public System.Collections.Generic.List<Dev.DevKit.Shared.Entities.devkit_WebApiOptionSets.devkit_MultiOptionSetCode> devkit_MultiOptionSetCode
		{
			get
			{
				var data = new System.Collections.Generic.List<Dev.DevKit.Shared.Entities.devkit_WebApiOptionSets.devkit_MultiOptionSetCode>();
				var items = Entity.GetAttributeValue<OptionSetValueCollection>(Fields.devkit_MultiOptionSetCode);
				if (items != null)
				{
					foreach (OptionSetValue item in items)
					{
						data.Add((Dev.DevKit.Shared.Entities.devkit_WebApiOptionSets.devkit_MultiOptionSetCode)item.Value);
					}
				}
				return data;
			}
			set
			{
				var data = new OptionSetValueCollection();
				foreach (var item in value)
				{
					data.Add(new OptionSetValue((int)item));
				}
				if (data.Count == 0)
				{
					Entity.Attributes[Fields.devkit_MultiOptionSetCode] = null;
				}
				else
				{
					Entity.Attributes[Fields.devkit_MultiOptionSetCode] = data;
				}
			}
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Multiple Linies of Text</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_MultipleLiniesofText
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_MultipleLiniesofText); }
			set { Entity.Attributes[Fields.devkit_MultipleLiniesofText] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 500</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_Name); }
			set { Entity.Attributes[Fields.devkit_Name] = value; }
		}

		/// <summary>
		/// <para>Lookup to devkit_webapi</para>
		/// <para>Parent WebApi</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference devkit_ParentWebApiId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.devkit_ParentWebApiId); }
			set { Entity.Attributes[Fields.devkit_ParentWebApiId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Single Line of Text Email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_SingleLineofTextEmail
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_SingleLineofTextEmail); }
			set { Entity.Attributes[Fields.devkit_SingleLineofTextEmail] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Single Line of Text Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_SingleLineofTextPhone
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_SingleLineofTextPhone); }
			set { Entity.Attributes[Fields.devkit_SingleLineofTextPhone] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Single Line of Text Text</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_SingleLineofTextText
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_SingleLineofTextText); }
			set { Entity.Attributes[Fields.devkit_SingleLineofTextText] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Single Line of Text Text Area</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_SingleLineofTextTextArea
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_SingleLineofTextTextArea); }
			set { Entity.Attributes[Fields.devkit_SingleLineofTextTextArea] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Single Line of Text Ticker Symbol</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_SingleLineofTextTickerSymbol
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_SingleLineofTextTickerSymbol); }
			set { Entity.Attributes[Fields.devkit_SingleLineofTextTickerSymbol] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Single Line of Text Url</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string devkit_SingleLineofTextUrl
		{
			get { return Entity.GetAttributeValue<string>(Fields.devkit_SingleLineofTextUrl); }
			set { Entity.Attributes[Fields.devkit_SingleLineofTextUrl] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Single OptionSet</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.devkit_WebApiOptionSets.devkit_SingleOptionSetCode? devkit_SingleOptionSetCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.devkit_SingleOptionSetCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.devkit_WebApiOptionSets.devkit_SingleOptionSetCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.devkit_SingleOptionSetCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.devkit_SingleOptionSetCode] = null;
			}
		}

		/// <summary>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Single OptionSet Calculated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.devkit_WebApiOptionSets.devkit_SingleOptionSetCodeCalculated? devkit_SingleOptionSetCodeCalculated
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.devkit_SingleOptionSetCodeCalculated);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.devkit_WebApiOptionSets.devkit_SingleOptionSetCodeCalculated)value.Value;
			}
		}

		/// <summary>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>TimeZone Date And Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_TimeZoneDateAndTime
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_TimeZoneDateAndTime); }
			set { Entity.Attributes[Fields.devkit_TimeZoneDateAndTime] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>TimeZone Date And Time Calculated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_TimeZoneDateAndTimeCalculated
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_TimeZoneDateAndTimeCalculated); }
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>TimeZone Date And Time Rollup</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_TimeZoneDateAndTimeRollup
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_TimeZoneDateAndTimeRollup); }
		}

		/// <summary>
		/// <para>Last Updated time of rollup field TimeZone Date And Time Rollup.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>TimeZone Date And Time Rollup (Last Updated On)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_TimeZoneDateAndTimeRollup_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_TimeZoneDateAndTimeRollup_Date); }
		}

		/// <summary>
		/// <para>State of rollup field TimeZone Date And Time Rollup.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>TimeZone Date And Time Rollup (State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? devkit_TimeZoneDateAndTimeRollup_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.devkit_TimeZoneDateAndTimeRollup_State); }
		}

		/// <summary>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateOnly</para>
		/// <para>TimeZone Date Only</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_TimeZoneDateOnly
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_TimeZoneDateOnly); }
			set { Entity.Attributes[Fields.devkit_TimeZoneDateOnly] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateOnly</para>
		/// <para>TimeZone Date Only Calculated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_TimeZoneDateOnlyCalculated
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_TimeZoneDateOnlyCalculated); }
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateOnly</para>
		/// <para>TimeZone Date Only Rollup</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_TimeZoneDateOnlyRollup
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_TimeZoneDateOnlyRollup); }
		}

		/// <summary>
		/// <para>Last Updated time of rollup field TimeZone Date Only Rollup.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>TimeZone Date Only Rollup (Last Updated On)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_TimeZoneDateOnlyRollup_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_TimeZoneDateOnlyRollup_Date); }
		}

		/// <summary>
		/// <para>State of rollup field TimeZone Date Only Rollup.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>TimeZone Date Only Rollup (State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? devkit_TimeZoneDateOnlyRollup_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.devkit_TimeZoneDateOnlyRollup_State); }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>User Local Date And Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_UserLocalDateAndTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_UserLocalDateAndTime); }
			set { Entity.Attributes[Fields.devkit_UserLocalDateAndTime] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>User Local Date And Time Calculated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_UserLocalDateAndTimeCalculatedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_UserLocalDateAndTimeCalculated); }
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>User Local Date And Time Rollup</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_UserLocalDateAndTimeRollupUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_UserLocalDateAndTimeRollup); }
		}

		/// <summary>
		/// <para>Last Updated time of rollup field User Local Date And Time Rollup.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>User Local Date And Time Rollup (Last Updated On)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_UserLocalDateAndTimeRollup_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_UserLocalDateAndTimeRollup_Date); }
		}

		/// <summary>
		/// <para>State of rollup field User Local Date And Time Rollup.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>User Local Date And Time Rollup (State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? devkit_UserLocalDateAndTimeRollup_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.devkit_UserLocalDateAndTimeRollup_State); }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>User Local Date Only</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_UserLocalDateOnlyUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_UserLocalDateOnly); }
			set { Entity.Attributes[Fields.devkit_UserLocalDateOnly] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>User Local Date Only Calculated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_UserLocalDateOnlyCalculatedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_UserLocalDateOnlyCalculated); }
		}

		/// <summary>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>User Local Date Only Rollup</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_UserLocalDateOnlyRollupUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_UserLocalDateOnlyRollup); }
		}

		/// <summary>
		/// <para>Last Updated time of rollup field User Local Date Only Rollup.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>User Local Date Only Rollup (Last Updated On)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? devkit_UserLocalDateOnlyRollup_DateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.devkit_UserLocalDateOnlyRollup_Date); }
		}

		/// <summary>
		/// <para>State of rollup field User Local Date Only Rollup.</para>
		/// <para>ReadOnly - Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>User Local Date Only Rollup (State)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? devkit_UserLocalDateOnlyRollup_State
		{
			get { return Entity.GetAttributeValue<int?>(Fields.devkit_UserLocalDateOnlyRollup_State); }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>WebApi</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid devkit_WebApiId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.devkit_WebApiId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Whole Number Duration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? devkit_WholeNumberDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.devkit_WholeNumberDuration); }
			set { Entity.Attributes[Fields.devkit_WholeNumberDuration] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Whole Number Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? devkit_WholeNumberLanguage
		{
			get { return Entity.GetAttributeValue<int?>(Fields.devkit_WholeNumberLanguage); }
			set { Entity.Attributes[Fields.devkit_WholeNumberLanguage] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Whole Number None</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? devkit_WholeNumberNone
		{
			get { return Entity.GetAttributeValue<int?>(Fields.devkit_WholeNumberNone); }
			set { Entity.Attributes[Fields.devkit_WholeNumberNone] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: -1,500 - MaxValue: 1,500</para>
		/// <para>Whole Number TimeZone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? devkit_WholeNumberTimeZone
		{
			get { return Entity.GetAttributeValue<int?>(Fields.devkit_WholeNumberTimeZone); }
			set { Entity.Attributes[Fields.devkit_WholeNumberTimeZone] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Yes And No</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? devkit_YesAndNo
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.devkit_YesAndNo); }
			set { Entity.Attributes[Fields.devkit_YesAndNo] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Yes And No Calculated</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? devkit_YesAndNoCalculated
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.devkit_YesAndNoCalculated); }
		}

		/// <summary>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
		/// <para>ReadOnly - Decimal - MinValue: 0 - MaxValue: 100,000,000,000</para>
		/// <para>Exchange Rate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? ExchangeRate
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.ExchangeRate); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}

		/// <summary>
		/// <para>Status of the WebApi</para>
		/// <para>State</para>
		/// <para>State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.devkit_WebApiOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.devkit_WebApiOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the WebApi</para>
		/// <para>Status</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.devkit_WebApiOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.devkit_WebApiOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the currency associated with the entity.</para>
		/// <para>Lookup to transactioncurrency</para>
		/// <para>Currency</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference TransactionCurrencyId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.TransactionCurrencyId); }
			set { Entity.Attributes[Fields.TransactionCurrencyId] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
