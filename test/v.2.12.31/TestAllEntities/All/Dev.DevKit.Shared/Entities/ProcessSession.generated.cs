//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.ProcessSessionOptionSets
{
	public enum StateCode
	{
		/// <summary>
		/// Complete = 1
		/// </summary>
		Complete = 1,
		/// <summary>
		/// Incomplete = 0
		/// </summary>
		Incomplete = 0
	}

	public enum StatusCode
	{
		/// <summary>
		/// Canceled = 5
		/// </summary>
		Canceled = 5,
		/// <summary>
		/// Completed = 4
		/// </summary>
		Completed = 4,
		/// <summary>
		/// Failed = 6
		/// </summary>
		Failed = 6,
		/// <summary>
		/// In_Progress = 2
		/// </summary>
		In_Progress = 2,
		/// <summary>
		/// Not_Started = 1
		/// </summary>
		Not_Started = 1,
		/// <summary>
		/// Paused = 3
		/// </summary>
		Paused = 3
	}
}

namespace Dev.DevKit.Shared.Entities
{
	public partial class ProcessSession : EntityBase
	{
		public struct Fields
		{
			public const string ActivityName = "activityname";
			public const string CanceledBy = "canceledby";
			public const string CanceledOn = "canceledon";
			public const string Comments = "comments";
			public const string CompletedBy = "completedby";
			public const string CompletedOn = "completedon";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ErrorCode = "errorcode";
			public const string ExecutedBy = "executedby";
			public const string ExecutedOn = "executedon";
			public const string InputArguments = "inputarguments";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string NextLinkedSessionId = "nextlinkedsessionid";
			public const string OriginatingSessionId = "originatingsessionid";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string PreviousLinkedSessionId = "previouslinkedsessionid";
			public const string ProcessId = "processid";
			public const string ProcessSessionId = "processsessionid";
			public const string ProcessStageName = "processstagename";
			public const string ProcessState = "processstate";
			public const string ProtectionKey = "protectionkey";
			public const string RegardingObjectId = "regardingobjectid";
			public const string StartedBy = "startedby";
			public const string StartedOn = "startedon";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string StepName = "stepname";
		}

		public const string EntityLogicalName = "processsession";

		public const int EntityTypeCode = 4710;

		[DebuggerNonUserCode()]
		public ProcessSession()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProcessSession(Guid ProcessSessionId)
		{
			Entity = new Entity(EntityLogicalName, ProcessSessionId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProcessSession(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProcessSession(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProcessSession(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ProcessSession(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Name of the activity that is being executed.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Activity Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ActivityName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ActivityName); }
			set { Entity.Attributes[Fields.ActivityName] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who canceled the dialog session.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Canceled By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CanceledBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CanceledBy); }
		}

		/// <summary>
		/// <para>Date and time when the dialog session was canceled.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Canceled On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CanceledOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CanceledOn); }
			set { Entity.Attributes[Fields.CanceledOn] = value; }
		}

		/// <summary>
		/// <para>User comments.</para>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Comments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Comments
		{
			get { return Entity.GetAttributeValue<string>(Fields.Comments); }
			set { Entity.Attributes[Fields.Comments] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who completed the dialog session.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Completed By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CompletedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CompletedBy); }
		}

		/// <summary>
		/// <para>Date and time when the dialog session was completed.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Completed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CompletedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CompletedOn); }
			set { Entity.Attributes[Fields.CompletedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who started the dialog session.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the dialog session was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the dialog session.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Error code related to the dialog session.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Error Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ErrorCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ErrorCode); }
			set { Entity.Attributes[Fields.ErrorCode] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who ran the dialog process.</para>
		/// <para>Lookup to systemuser</para>
		/// <para>Executed By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ExecutedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ExecutedBy); }
			set { Entity.Attributes[Fields.ExecutedBy] = value; }
		}

		/// <summary>
		/// <para>Date and time when the dialog process was run.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Executed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ExecutedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ExecutedOn); }
		}

		/// <summary>
		/// <para>Input arguments for the child dialog process.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Input Arguments</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InputArguments
		{
			get { return Entity.GetAttributeValue<string>(Fields.InputArguments); }
			set { Entity.Attributes[Fields.InputArguments] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the dialog session.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the dialog session was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the dialog session.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the dialog session.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the succeeding linked dialog session.</para>
		/// <para>Lookup to processsession</para>
		/// <para>Next Linked Session</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference NextLinkedSessionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.NextLinkedSessionId); }
			set { Entity.Attributes[Fields.NextLinkedSessionId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the originating dialog session.</para>
		/// <para>Lookup to processsession</para>
		/// <para>Originating Session</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OriginatingSessionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OriginatingSessionId); }
			set { Entity.Attributes[Fields.OriginatingSessionId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the dialog session.</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the dialog session.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the dialog session.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the dialog session.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Unique identifier of the preceding linked dialog session.</para>
		/// <para>Lookup to processsession</para>
		/// <para>Previous Linked Session</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PreviousLinkedSessionId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PreviousLinkedSessionId); }
			set { Entity.Attributes[Fields.PreviousLinkedSessionId] = value; }
		}

		/// <summary>
		/// <para>Select the process activation record that is related to the dialog session.</para>
		/// <para>Lookup to workflow</para>
		/// <para>Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ProcessId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ProcessId); }
			set { Entity.Attributes[Fields.ProcessId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the dialog session.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Dialog Session</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ProcessSessionId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ProcessSessionId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Name of the dialog stage.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Dialog Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProcessStageName
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProcessStageName); }
			set { Entity.Attributes[Fields.ProcessStageName] = value; }
		}

		/// <summary>
		/// <para>State of the dialog process.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Process State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProcessState
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProcessState); }
			set { Entity.Attributes[Fields.ProcessState] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - String - MaxLength: 256</para>
		/// <para>Protection Key</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProtectionKey
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProtectionKey); }
		}

		/// <summary>
		/// <para>Unique identifier of the object with which the dialog session is associated.</para>
		/// <para>Lookup to account;activityfileattachment;annotation;appelement;applicationuser;appmodulecomponentedge;appmodulecomponentnode;appnotification;appointment;appsetting;appusersetting;bot;botcomponent;businessunit;businessunitnewsarticle;canvasappextendedmetadata;cascadegrantrevokeaccessrecordstracker;cascadegrantrevokeaccessversiontracker;catalog;catalogassignment;channelaccessprofile;channelaccessprofilerule;connection;connectionreference;connectionrole;connector;contact;conversationtranscript;convertrule;customapi;customapirequestparameter;customapiresponseproperty;customeraddress;customerrelationship;datalakefolder;datalakefolderpermission;datalakeworkspace;datalakeworkspacepermission;devkit_bpfaccount;email;environmentvariabledefinition;environmentvariablevalue;expiredprocess;exportsolutionupload;externalparty;externalpartyitem;fax;featurecontrolsetting;flowmachine;flowmachinegroup;goal;goalrollupquery;holidaywrapper;internalcatalogassignment;kbarticle;kbarticlecomment;kbarticletemplate;keyvaultreference;knowledgearticle;knowledgebaserecord;letter;mailbox;mailmergetemplate;managedidentity;metric;msdynce_botcontent;msdyn_aibdataset;msdyn_aibdatasetfile;msdyn_aibdatasetrecord;msdyn_aibdatasetscontainer;msdyn_aibfile;msdyn_aibfileattacheddata;msdyn_aiconfiguration;msdyn_aifptrainingdocument;msdyn_aimodel;msdyn_aiodimage;msdyn_aiodlabel;msdyn_aiodtrainingboundingbox;msdyn_aiodtrainingimage;msdyn_aitemplate;msdyn_dataflow;msdyn_federatedarticle;msdyn_federatedarticleincident;msdyn_helppage;msdyn_kalanguagesetting;msdyn_kmfederatedsearchconfig;msdyn_kmpersonalizationsetting;msdyn_knowledgearticleimage;msdyn_knowledgearticletemplate;msdyn_knowledgeinteractioninsight;msdyn_knowledgepersonalfilter;msdyn_knowledgesearchfilter;msdyn_knowledgesearchinsight;msdyn_pminferredtask;msdyn_pmrecording;msdyn_richtextfile;msdyn_serviceconfiguration;msdyn_slakpi;msdyn_tour;newprocess;organizationdatasyncsubscription;organizationdatasyncsubscriptionentity;organizationsetting;package;pdfsetting;phonecall;position;processstageparameter;provisionlanguageforuser;queue;queueitem;recurringappointmentmaster;relationshiprole;report;revokeinheritedaccessrecordstracker;rollupfield;routingrule;routingruleitem;serviceplan;serviceplanmapping;settingdefinition;sharepointdocumentlocation;sharepointsite;sla;socialactivity;socialprofile;solutioncomponentattributeconfiguration;solutioncomponentbatchconfiguration;solutioncomponentconfiguration;solutioncomponentrelationshipconfiguration;stagesolutionupload;subject;systemuser;systemuserauthorizationchangetracker;task;team;teammobileofflineprofilemembership;template;territory;theme;transactioncurrency;translationprocess;usermapping;usermobileofflineprofilemembership;virtualentitymetadata;workflowbinary</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference RegardingObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.RegardingObjectId); }
			set { Entity.Attributes[Fields.RegardingObjectId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who started the dialog session.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Started By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference StartedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.StartedBy); }
		}

		/// <summary>
		/// <para>Date and time when the dialog session was started.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Started On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? StartedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.StartedOn); }
			set { Entity.Attributes[Fields.StartedOn] = value; }
		}

		/// <summary>
		/// <para>Status of the dialog session.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProcessSessionOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProcessSessionOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the dialog session.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.ProcessSessionOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.ProcessSessionOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Name of the dialog step.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Step Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StepName
		{
			get { return Entity.GetAttributeValue<string>(Fields.StepName); }
			set { Entity.Attributes[Fields.StepName] = value; }
		}
	}
}
