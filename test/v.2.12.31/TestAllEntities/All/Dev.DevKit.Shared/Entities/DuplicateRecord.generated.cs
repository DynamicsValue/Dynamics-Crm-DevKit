//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.DuplicateRecordOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	public partial class DuplicateRecord : EntityBase
	{
		public struct Fields
		{
			public const string AsyncOperationId = "asyncoperationid";
			public const string BaseRecordId = "baserecordid";
			public const string CreatedOn = "createdon";
			public const string DuplicateId = "duplicateid";
			public const string DuplicateRecordId = "duplicaterecordid";
			public const string DuplicateRuleId = "duplicateruleid";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningUser = "owninguser";
		}

		public const string EntityLogicalName = "duplicaterecord";

		public const int EntityTypeCode = 4415;

		[DebuggerNonUserCode()]
		public DuplicateRecord()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DuplicateRecord(Guid DuplicateRecordId)
		{
			Entity = new Entity(EntityLogicalName, DuplicateRecordId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DuplicateRecord(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DuplicateRecord(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DuplicateRecord(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public DuplicateRecord(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the system job that created this record.</para>
		/// <para>ReadOnly - Lookup to asyncoperation</para>
		/// <para>System Job</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference AsyncOperationId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.AsyncOperationId); }
		}

		/// <summary>
		/// <para>Unique identifier of the base record.</para>
		/// <para>ReadOnly - Lookup to account;activityfileattachment;applicationuser;appnotification;appointment;canvasappextendedmetadata;cascadegrantrevokeaccessrecordstracker;cascadegrantrevokeaccessversiontracker;catalogassignment;channelaccessprofile;connector;contact;conversationtranscript;datalakefolder;datalakefolderpermission;datalakeworkspace;datalakeworkspacepermission;email;emailserverprofile;environmentvariabledefinition;environmentvariablevalue;exportsolutionupload;fax;featurecontrolsetting;feedback;flowmachinegroup;goal;goalrollupquery;kbarticle;keyvaultreference;knowledgearticle;knowledgebaserecord;letter;managedidentity;msdyn_aibdataset;msdyn_aibdatasetfile;msdyn_aibdatasetrecord;msdyn_aibdatasetscontainer;msdyn_aibfile;msdyn_aibfileattacheddata;msdyn_aiodimage;msdyn_aiodlabel;msdyn_aiodtrainingboundingbox;msdyn_aiodtrainingimage;msdyn_dataflow;msdyn_federatedarticle;msdyn_federatedarticleincident;msdyn_kalanguagesetting;msdyn_kmfederatedsearchconfig;msdyn_knowledgearticleimage;msdyn_knowledgearticletemplate;msdyn_knowledgeinteractioninsight;msdyn_knowledgepersonalfilter;msdyn_knowledgesearchfilter;msdyn_knowledgesearchinsight;msdyn_pminferredtask;msdyn_pmrecording;msdyn_serviceconfiguration;msdyn_slakpi;organizationdatasyncsubscription;organizationdatasyncsubscriptionentity;package;phonecall;publisher;queue;recurringappointmentmaster;revokeinheritedaccessrecordstracker;serviceplan;serviceplanmapping;sharepointdocumentlocation;sharepointsite;socialactivity;socialprofile;solutioncomponentattributeconfiguration;solutioncomponentbatchconfiguration;solutioncomponentconfiguration;solutioncomponentrelationshipconfiguration;stagesolutionupload;systemuser;task;team;transactioncurrency</para>
		/// <para>Base Record ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference BaseRecordId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.BaseRecordId); }
		}

		/// <summary>
		/// <para>Date and time when the duplicate record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the duplicate record.</para>
		/// <para>Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? DuplicateId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.DuplicateId); }
			set { Entity.Attributes[Fields.DuplicateId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the potential duplicate record.</para>
		/// <para>ReadOnly - Lookup to account;activityfileattachment;applicationuser;appnotification;appointment;canvasappextendedmetadata;cascadegrantrevokeaccessrecordstracker;cascadegrantrevokeaccessversiontracker;catalogassignment;channelaccessprofile;connector;contact;conversationtranscript;datalakefolder;datalakefolderpermission;datalakeworkspace;datalakeworkspacepermission;email;emailserverprofile;environmentvariabledefinition;environmentvariablevalue;exportsolutionupload;fax;featurecontrolsetting;feedback;flowmachinegroup;goal;goalrollupquery;kbarticle;keyvaultreference;knowledgearticle;knowledgebaserecord;letter;managedidentity;msdyn_aibdataset;msdyn_aibdatasetfile;msdyn_aibdatasetrecord;msdyn_aibdatasetscontainer;msdyn_aibfile;msdyn_aibfileattacheddata;msdyn_aiodimage;msdyn_aiodlabel;msdyn_aiodtrainingboundingbox;msdyn_aiodtrainingimage;msdyn_dataflow;msdyn_federatedarticle;msdyn_federatedarticleincident;msdyn_kalanguagesetting;msdyn_kmfederatedsearchconfig;msdyn_knowledgearticleimage;msdyn_knowledgearticletemplate;msdyn_knowledgeinteractioninsight;msdyn_knowledgepersonalfilter;msdyn_knowledgesearchfilter;msdyn_knowledgesearchinsight;msdyn_pminferredtask;msdyn_pmrecording;msdyn_serviceconfiguration;msdyn_slakpi;organizationdatasyncsubscription;organizationdatasyncsubscriptionentity;package;phonecall;publisher;queue;recurringappointmentmaster;revokeinheritedaccessrecordstracker;serviceplan;serviceplanmapping;sharepointdocumentlocation;sharepointsite;socialactivity;socialprofile;solutioncomponentattributeconfiguration;solutioncomponentbatchconfiguration;solutioncomponentconfiguration;solutioncomponentrelationshipconfiguration;stagesolutionupload;systemuser;task;team;transactioncurrency</para>
		/// <para>Duplicate Record ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DuplicateRecordId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DuplicateRecordId); }
		}

		/// <summary>
		/// <para>Unique identifier of the duplicate rule against which this duplicate was found.</para>
		/// <para>ReadOnly - Lookup to duplicaterule</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference DuplicateRuleId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.DuplicateRuleId); }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the duplicate record.</para>
		/// <para>ReadOnly - Required - Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the duplicate record.</para>
		/// <para>ReadOnly - Required - Uniqueidentifier</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the duplicate record.</para>
		/// <para>ReadOnly - Required - Uniqueidentifier</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? OwningUser
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.OwningUser); }
		}
	}
}
