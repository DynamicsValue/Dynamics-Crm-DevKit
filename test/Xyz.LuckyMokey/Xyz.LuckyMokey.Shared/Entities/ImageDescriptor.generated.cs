//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Xyz.LuckyMokey.Shared.Entities.ImageDescriptorOptionSets
{

}

namespace Xyz.LuckyMokey.Shared.Entities
{
	public partial class ImageDescriptor : EntityBase
	{
		public struct Fields
		{
			public const string ColorDepthBits = "colordepthbits";
			public const string FileLocation = "filelocation";
			public const string FileName = "filename";
			public const string FileSizeBytes = "filesizebytes";
			public const string FileType = "filetype";
			public const string FullImageData = "fullimagedata";
			public const string FullImageURL = "fullimageurl";
			public const string ImageData = "imagedata";
			public const string ImageDescription = "imagedescription";
			public const string ImageDescriptorId = "imagedescriptorid";
			public const string ImagePixelHeight = "imagepixelheight";
			public const string ImagePixelWidth = "imagepixelwidth";
			public const string ImageTags = "imagetags";
			public const string ImageTimestamp = "imagetimestamp";
			public const string ImageURL = "imageurl";
			public const string MimeType = "mimetype";
			public const string ObjectId = "objectid";
			public const string ObjectTypeCode = "objecttypecode";
			public const string Size = "size";
			public const string Title = "title";
		}

		public const string EntityLogicalName = "imagedescriptor";

		public const int EntityTypeCode = 1007;

		[DebuggerNonUserCode()]
		public ImageDescriptor()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImageDescriptor(Guid ImageDescriptorId)
		{
			Entity = new Entity(EntityLogicalName, ImageDescriptorId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImageDescriptor(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImageDescriptor(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImageDescriptor(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public ImageDescriptor(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ColorDepthBits
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ColorDepthBits); }
			set { Entity.Attributes[Fields.ColorDepthBits] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileLocation
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileLocation); }
			set { Entity.Attributes[Fields.FileLocation] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileName); }
			set { Entity.Attributes[Fields.FileName] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileSizeBytes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileSizeBytes); }
			set { Entity.Attributes[Fields.FileSizeBytes] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileType
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileType); }
			set { Entity.Attributes[Fields.FileType] = value; }
		}

		/// <summary>
		/// <para>Virtual</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullImageData
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullImageData); }
			set { Entity.Attributes[Fields.FullImageData] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FullImageURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.FullImageURL); }
			set { Entity.Attributes[Fields.FullImageURL] = value; }
		}

		/// <summary>
		/// <para>Virtual</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ImageData
		{
			get { return Entity.GetAttributeValue<string>(Fields.ImageData); }
			set { Entity.Attributes[Fields.ImageData] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 512</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ImageDescription
		{
			get { return Entity.GetAttributeValue<string>(Fields.ImageDescription); }
			set { Entity.Attributes[Fields.ImageDescription] = value; }
		}

		/// <summary>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid ImageDescriptorId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.ImageDescriptorId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImagePixelHeight
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImagePixelHeight); }
			set { Entity.Attributes[Fields.ImagePixelHeight] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImagePixelWidth
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImagePixelWidth); }
			set { Entity.Attributes[Fields.ImagePixelWidth] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 512</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ImageTags
		{
			get { return Entity.GetAttributeValue<string>(Fields.ImageTags); }
			set { Entity.Attributes[Fields.ImageTags] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? ImageTimestamp
		{
			get { return Entity.GetAttributeValue<long?>(Fields.ImageTimestamp); }
		}

		/// <summary>
		/// <para>ReadOnly - String - MaxLength: 200</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ImageURL
		{
			get { return Entity.GetAttributeValue<string>(Fields.ImageURL); }
		}

		/// <summary>
		/// <para>String - MaxLength: 256</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ObjectId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ObjectId); }
		}

		/// <summary>
		/// <para>ReadOnly - EntityName</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
		}

		/// <summary>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Size
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Size); }
		}

		/// <summary>
		/// <para>String - MaxLength: 200</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Title
		{
			get { return Entity.GetAttributeValue<string>(Fields.Title); }
			set { Entity.Attributes[Fields.Title] = value; }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
