//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets
{
	public enum msdyn_DefaultCrewStrategy
	{
		/// <summary>
		/// Cascade_and_Accept_Cascade_Completely = 192350000
		/// </summary>
		Cascade_and_Accept_Cascade_Completely = 192350000,
		/// <summary>
		/// Crew_Leader_Management = 192350001
		/// </summary>
		Crew_Leader_Management = 192350001,
		/// <summary>
		/// Crew_Member_Self_Management = 192350002
		/// </summary>
		Crew_Member_Self_Management = 192350002
	}

	public enum msdyn_DefaultWorkOrderCompletedStatus
	{
		/// <summary>
		/// Open_Unscheduled = 690970000
		/// </summary>
		Open_Unscheduled = 690970000,
		/// <summary>
		/// Open_Scheduled = 690970001
		/// </summary>
		Open_Scheduled = 690970001,
		/// <summary>
		/// Open_In_Progress = 690970002
		/// </summary>
		Open_In_Progress = 690970002,
		/// <summary>
		/// Open_Completed = 690970003
		/// </summary>
		Open_Completed = 690970003,
		/// <summary>
		/// Closed_Posted = 690970004
		/// </summary>
		Closed_Posted = 690970004,
		/// <summary>
		/// Closed_Canceled = 690970005
		/// </summary>
		Closed_Canceled = 690970005
	}

	public enum msdyn_HistoricalDataFilter
	{
		/// <summary>
		/// Last_3_Months = 100000000
		/// </summary>
		Last_3_Months = 100000000,
		/// <summary>
		/// Last_6_Months = 100000001
		/// </summary>
		Last_6_Months = 100000001,
		/// <summary>
		/// Last_12_Months = 100000002
		/// </summary>
		Last_12_Months = 100000002,
		/// <summary>
		/// All = 100000003
		/// </summary>
		All = 100000003
	}

	public enum msdyn_ProductCostOrder
	{
		/// <summary>
		/// StandardCurrent = 690970000
		/// </summary>
		StandardCurrent = 690970000,
		/// <summary>
		/// CurrentStandard = 690970001
		/// </summary>
		CurrentStandard = 690970001
	}

	public enum msdyn_UndefinedBookingLocation
	{
		/// <summary>
		/// Previous_Known_Location = 690970000
		/// </summary>
		Previous_Known_Location = 690970000,
		/// <summary>
		/// Ignore_Location = 690970001
		/// </summary>
		Ignore_Location = 690970001
	}

	public enum msdyn_UseofProductsOutofStock
	{
		/// <summary>
		/// Confirm = 690970000
		/// </summary>
		Confirm = 690970000,
		/// <summary>
		/// Restrict = 690970001
		/// </summary>
		Restrict = 690970001
	}

	public enum msdyn_WorkOrderInvoiceCreation
	{
		/// <summary>
		/// On_Work_Order_Posted = 690970001
		/// </summary>
		On_Work_Order_Posted = 690970001,
		/// <summary>
		/// Never = 690970000
		/// </summary>
		Never = 690970000
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Xyz.LuckyMokey.Shared.Entities
{
	public partial class msdyn_fieldservicesetting : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_AdvancedSettings = "msdyn_advancedsettings";
			public const string msdyn_AgreementPrefix = "msdyn_agreementprefix";
			public const string msdyn_AgreementRecordGeneration = "msdyn_agreementrecordgeneration";
			public const string msdyn_AgreementStartingNumber = "msdyn_agreementstartingnumber";
			public const string msdyn_AutoAllocateEstimatedProducts = "msdyn_autoallocateestimatedproducts";
			public const string msdyn_AutoGenerateWOforAgreementBookings = "msdyn_autogeneratewoforagreementbooking";
			public const string msdyn_AutoGeoCodeAddresses = "msdyn_autogeocodeaddresses";
			public const string msdyn_AutoNumberingOptIn = "msdyn_autonumberingoptin";
			public const string msdyn_BookingAlertTemplate = "msdyn_bookingalerttemplate";
			public const string msdyn_BreakPayType = "msdyn_breakpaytype";
			public const string msdyn_BusinessClosurePayType = "msdyn_businessclosurepaytype";
			public const string msdyn_CancelCurrentSlotsWhenMoving = "msdyn_cancelcurrentslotswhenmoving";
			public const string msdyn_CustomGPSData = "msdyn_customgpsdata";
			public const string msdyn_CustomGPSLatitudefield = "msdyn_customgpslatitudefield";
			public const string msdyn_CustomGPSLocationentity = "msdyn_customgpslocationentity";
			public const string msdyn_CustomGPSLongitudefield = "msdyn_customgpslongitudefield";
			public const string msdyn_CustomGPSResourcefield = "msdyn_customgpsresourcefield";
			public const string msdyn_CustomGPSTimestampfield = "msdyn_customgpstimestampfield";
			public const string msdyn_DatabaseVersion = "msdyn_databaseversion";
			public const string msdyn_DeactivateBookingWhenCanceled = "msdyn_deactivatebookingwhencanceled";
			public const string msdyn_DeactivateBookingWhenCompleted = "msdyn_deactivatebookingwhencompleted";
			public const string msdyn_DeactivateWorkOrderWhenCanceled = "msdyn_deactivateworkorderwhencanceled";
			public const string msdyn_DeactivateWorkOrderWhenPosted = "msdyn_deactivateworkorderwhenposted";
			public const string msdyn_DefaultBookingDuration = "msdyn_defaultbookingduration";
			public const string msdyn_DefaultCanceledBookingStatus = "msdyn_defaultcanceledbookingstatus";
			public const string msdyn_DefaultCrewStrategy = "msdyn_defaultcrewstrategy";
			public const string msdyn_DefaultRadiusUnit = "msdyn_defaultradiusunit";
			public const string msdyn_DefaultRadiusValue = "msdyn_defaultradiusvalue";
			public const string msdyn_DefaultScheduledBookingStatus = "msdyn_defaultscheduledbookingstatus";
			public const string msdyn_DefaultWarehouse = "msdyn_defaultwarehouse";
			public const string msdyn_DefaultWorkOrderCompletedStatus = "msdyn_defaultworkordercompletedstatus";
			public const string msdyn_DisableRemoteAssistBookingStatusChanges = "msdyn_disableremoteassistbookingstatuschanges";
			public const string msdyn_EnableAddressSuggestions = "msdyn_enableaddresssuggestions";
			public const string msdyn_EnableLegacyScheduleAssistant = "msdyn_enablelegacyscheduleassistant";
			public const string msdyn_EnableSuggestedDuration = "msdyn_enablesuggestedduration";
			public const string msdyn_EntityNumberLength = "msdyn_entitynumberlength";
			public const string msdyn_fieldservicesettingId = "msdyn_fieldservicesettingid";
			public const string msdyn_GenerateAgreementInvoicesXDaysInAdvance = "msdyn_generateagreementinvoicesxdaysinadvance";
			public const string msdyn_GenerateAgreementWOXDaysInAdvance = "msdyn_generateagreementwoxdaysinadvance";
			public const string msdyn_GenerateBookingDatesXMonthsInAdvance = "msdyn_generatebookingdatesxmonthsinadvance";
			public const string msdyn_GenerateInvoiceDatesXMonthsInAdvance = "msdyn_generateinvoicedatesxmonthsinadvance";
			public const string msdyn_GPSLocationExpiresAfterXMinutes = "msdyn_gpslocationexpiresafterxminutes";
			public const string msdyn_HistoricalDataFilter = "msdyn_historicaldatafilter";
			public const string msdyn_InventoryAdjustmentPrefix = "msdyn_inventoryadjustmentprefix";
			public const string msdyn_InventoryAdjustmentStartingNumber = "msdyn_inventoryadjustmentstartingnumber";
			public const string msdyn_InventoryTransferPrefix = "msdyn_inventorytransferprefix";
			public const string msdyn_InventoryTransferStartingNumber = "msdyn_inventorytransferstartingnumber";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_NotificationTimeout = "msdyn_notificationtimeout";
			public const string msdyn_OvertimePayType = "msdyn_overtimepaytype";
			public const string msdyn_PostponeNumberCleanupUntil = "msdyn_postponenumbercleanupuntil";
			public const string msdyn_ProductCostOrder = "msdyn_productcostorder";
			public const string msdyn_PurchaseOrderApprovalRequired = "msdyn_purchaseorderapprovalrequired";
			public const string msdyn_PurchaseOrderPrefix = "msdyn_purchaseorderprefix";
			public const string msdyn_PurchaseOrderStartingNumber = "msdyn_purchaseorderstartingnumber";
			public const string msdyn_ResourcesSynchronizationTimeout = "msdyn_resourcessynchronizationtimeout";
			public const string msdyn_RMAPrefix = "msdyn_rmaprefix";
			public const string msdyn_RMAStartingNumber = "msdyn_rmastartingnumber";
			public const string msdyn_RTVPrefix = "msdyn_rtvprefix";
			public const string msdyn_RTVStartingNumber = "msdyn_rtvstartingnumber";
			public const string msdyn_SAAutoFilterServiceTerritory = "msdyn_saautofilterserviceterritory";
			public const string msdyn_SchedulerBusinessUnitDetailsView = "msdyn_schedulerbusinessunitdetailsview";
			public const string msdyn_SchedulerBusinessUnitTooltipView = "msdyn_schedulerbusinessunittooltipview";
			public const string msdyn_SchedulerCoreDetailsView = "msdyn_schedulercoredetailsview";
			public const string msdyn_SchedulerCoreSlotTextTemplate = "msdyn_schedulercoreslottexttemplate";
			public const string msdyn_SchedulerCoreTooltipView = "msdyn_schedulercoretooltipview";
			public const string msdyn_SchedulerFieldServiceDetailsView = "msdyn_schedulerfieldservicedetailsview";
			public const string msdyn_SchedulerFieldServiceSlotTextTemplate = "msdyn_schedulerfieldserviceslottexttemplate";
			public const string msdyn_SchedulerFieldServiceTooltipView = "msdyn_schedulerfieldservicetooltipview";
			public const string msdyn_SchedulerResourceDetailsView = "msdyn_schedulerresourcedetailsview";
			public const string msdyn_SchedulerResourceTooltipView = "msdyn_schedulerresourcetooltipview";
			public const string msdyn_SchedulerUnscheduledView = "msdyn_schedulerunscheduledview";
			public const string msdyn_sdkapimapkey = "msdyn_sdkapimapkey";
			public const string msdyn_TravelChargeItemId = "msdyn_travelchargeitemid";
			public const string msdyn_TravelPayType = "msdyn_travelpaytype";
			public const string msdyn_TravelTimeRescheduling = "msdyn_traveltimerescheduling";
			public const string msdyn_UndefinedBookingLocation = "msdyn_undefinedbookinglocation";
			public const string msdyn_UnscheduledWOTooltipsViewId = "msdyn_unscheduledwotooltipsviewid";
			public const string msdyn_UseofProductsOutofStock = "msdyn_useofproductsoutofstock";
			public const string msdyn_WorkOrderInvoiceCreation = "msdyn_workorderinvoicecreation";
			public const string msdyn_WorkOrderPrefix = "msdyn_workorderprefix";
			public const string msdyn_WorkOrderStartingNumber = "msdyn_workorderstartingnumber";
			public const string msdyn_WorkPayType = "msdyn_workpaytype";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_fieldservicesetting";

		public const int EntityTypeCode = 10217;

		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting(Guid msdyn_fieldservicesettingId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_fieldservicesettingId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_fieldservicesetting(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Advanced Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AdvancedSettings
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AdvancedSettings); }
			set { Entity.Attributes[Fields.msdyn_AdvancedSettings] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Agreement Prefix (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_AgreementPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_AgreementPrefix); }
			set { Entity.Attributes[Fields.msdyn_AgreementPrefix] = value; }
		}

		/// <summary>
		/// <para>This field defines the time of day when Work Orders and Invoices are generated by the Agreement Booking Setups and Agreement Invoice Setups where the timing was not defined on the related Agreement.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Agreement Record Generation Timing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_AgreementRecordGenerationUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_AgreementRecordGeneration); }
			set { Entity.Attributes[Fields.msdyn_AgreementRecordGeneration] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Agreement Starting Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_AgreementStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_AgreementStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_AgreementStartingNumber] = value; }
		}

		/// <summary>
		/// <para>If enabled then Allocated will be automatically set when entering a Work order Product with a Line Status of Estimate.</para>
		/// <para>Boolean</para>
		/// <para>Auto Allocate Estimated Products</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoAllocateEstimatedProducts
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoAllocateEstimatedProducts); }
			set { Entity.Attributes[Fields.msdyn_AutoAllocateEstimatedProducts] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Auto Generate WO for Agreement Booking</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoGenerateWOforAgreementBookings
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoGenerateWOforAgreementBookings); }
			set { Entity.Attributes[Fields.msdyn_AutoGenerateWOforAgreementBookings] = value; }
		}

		/// <summary>
		/// <para>If set then the system will automatically geo code addresses when the address has been updated and the record is saved</para>
		/// <para>Boolean</para>
		/// <para>Auto Geo Code Addresses</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoGeoCodeAddresses
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoGeoCodeAddresses); }
			set { Entity.Attributes[Fields.msdyn_AutoGeoCodeAddresses] = value; }
		}

		/// <summary>
		/// <para>For Internal Use. If Yes the org is opted in for use of latest autonumbering implementation. If No the org is not opted in.</para>
		/// <para>Boolean</para>
		/// <para>Auto-Numbering Opt In</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_AutoNumberingOptIn
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_AutoNumberingOptIn); }
			set { Entity.Attributes[Fields.msdyn_AutoNumberingOptIn] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>Booking Alert Template (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_BookingAlertTemplate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_BookingAlertTemplate); }
			set { Entity.Attributes[Fields.msdyn_BookingAlertTemplate] = value; }
		}

		/// <summary>
		/// <para>Default Pay Type to be used for Break hours</para>
		/// <para>Lookup</para>
		/// <para>Break Pay Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BreakPayType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BreakPayType); }
			set { Entity.Attributes[Fields.msdyn_BreakPayType] = value; }
		}

		/// <summary>
		/// <para>Default Pay Type to be used for business closure work hours</para>
		/// <para>Lookup</para>
		/// <para>Business Closure Pay Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_BusinessClosurePayType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_BusinessClosurePayType); }
			set { Entity.Attributes[Fields.msdyn_BusinessClosurePayType] = value; }
		}

		/// <summary>
		/// <para>Select whether, when moving open slots to the next day, to leave the old slots and change their status to "Cancel."</para>
		/// <para>Boolean</para>
		/// <para>Cancel Current Slots When Moving (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CancelCurrentSlotsWhenMoving
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CancelCurrentSlotsWhenMoving); }
			set { Entity.Attributes[Fields.msdyn_CancelCurrentSlotsWhenMoving] = value; }
		}

		/// <summary>
		/// <para>If enabled system will use custom entity for its source of Geo Locations for resources to be displayed on map view</para>
		/// <para>Boolean</para>
		/// <para>Custom GPS Data (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_CustomGPSData
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_CustomGPSData); }
			set { Entity.Attributes[Fields.msdyn_CustomGPSData] = value; }
		}

		/// <summary>
		/// <para>Shows the logical name of the latitude field to be used for geolocations.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Custom GPS Latitude field (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGPSLatitudefield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGPSLatitudefield); }
			set { Entity.Attributes[Fields.msdyn_CustomGPSLatitudefield] = value; }
		}

		/// <summary>
		/// <para>Shows the logical name of custom entity to be used for geolocations.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Custom GPS Location entity (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGPSLocationentity
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGPSLocationentity); }
			set { Entity.Attributes[Fields.msdyn_CustomGPSLocationentity] = value; }
		}

		/// <summary>
		/// <para>Shows the logical name of the longitude field to be used for geolocations.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Custom GPS Longitude field (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGPSLongitudefield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGPSLongitudefield); }
			set { Entity.Attributes[Fields.msdyn_CustomGPSLongitudefield] = value; }
		}

		/// <summary>
		/// <para>Shows the logical name of the resource field to be used for geolocations.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Custom GPS Resource field (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGPSResourcefield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGPSResourcefield); }
			set { Entity.Attributes[Fields.msdyn_CustomGPSResourcefield] = value; }
		}

		/// <summary>
		/// <para>Shows the logical name of the timestamp field to be used for geolocations.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Custom GPS Timestamp field (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_CustomGPSTimestampfield
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_CustomGPSTimestampfield); }
			set { Entity.Attributes[Fields.msdyn_CustomGPSTimestampfield] = value; }
		}

		/// <summary>
		/// <para>For Internal Use</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Database Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DatabaseVersion
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DatabaseVersion); }
			set { Entity.Attributes[Fields.msdyn_DatabaseVersion] = value; }
		}

		/// <summary>
		/// <para>Select whether the system should deactivate the resource booking when the system status is changed to "Canceled."</para>
		/// <para>Boolean</para>
		/// <para>Deactivate Booking When Canceled (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DeactivateBookingWhenCanceled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DeactivateBookingWhenCanceled); }
			set { Entity.Attributes[Fields.msdyn_DeactivateBookingWhenCanceled] = value; }
		}

		/// <summary>
		/// <para>Select whether the system should deactivate the resource booking when the system status is changed to "Completed."</para>
		/// <para>Boolean</para>
		/// <para>Deactivate Booking When Completed (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DeactivateBookingWhenCompleted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DeactivateBookingWhenCompleted); }
			set { Entity.Attributes[Fields.msdyn_DeactivateBookingWhenCompleted] = value; }
		}

		/// <summary>
		/// <para>Select whether the system should deactivate the work order when the system status is changed to "Closed - Canceled."</para>
		/// <para>Boolean</para>
		/// <para>Deactivate Work Order When Canceled (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DeactivateWorkOrderWhenCanceled
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DeactivateWorkOrderWhenCanceled); }
			set { Entity.Attributes[Fields.msdyn_DeactivateWorkOrderWhenCanceled] = value; }
		}

		/// <summary>
		/// <para>Select whether the system should deactivate the work order when the system status is changed to "Closed - Posted."</para>
		/// <para>Boolean</para>
		/// <para>Deactivate Work Order When Posted (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DeactivateWorkOrderWhenPosted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DeactivateWorkOrderWhenPosted); }
			set { Entity.Attributes[Fields.msdyn_DeactivateWorkOrderWhenPosted] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Default Booking Duration (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DefaultBookingDuration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DefaultBookingDuration); }
			set { Entity.Attributes[Fields.msdyn_DefaultBookingDuration] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Default Canceled Booking Status (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultCanceledBookingStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultCanceledBookingStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultCanceledBookingStatus] = value; }
		}

		/// <summary>
		/// <para>Default Crew Strategy</para>
		/// <para>Picklist</para>
		/// <para>Default Crew Strategy</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_DefaultCrewStrategy? msdyn_DefaultCrewStrategy
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_DefaultCrewStrategy);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_DefaultCrewStrategy)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DefaultCrewStrategy] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_DefaultCrewStrategy] = null;
			}
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Default Radius Unit (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DefaultRadiusUnit
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DefaultRadiusUnit); }
			set { Entity.Attributes[Fields.msdyn_DefaultRadiusUnit] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Default Radius Value (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_DefaultRadiusValue
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_DefaultRadiusValue); }
			set { Entity.Attributes[Fields.msdyn_DefaultRadiusValue] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Default Scheduled Booking Status (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultScheduledBookingStatus
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultScheduledBookingStatus); }
			set { Entity.Attributes[Fields.msdyn_DefaultScheduledBookingStatus] = value; }
		}

		/// <summary>
		/// <para>Shows the warehouse associated with the field service setting.</para>
		/// <para>Required - Lookup</para>
		/// <para>Default Warehouse</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_DefaultWarehouse
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_DefaultWarehouse); }
			set { Entity.Attributes[Fields.msdyn_DefaultWarehouse] = value; }
		}

		/// <summary>
		/// <para>Select whether the default work order completed status is either "Completed" or "Posted."</para>
		/// <para>Picklist</para>
		/// <para>Default Work Order Completed Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_DefaultWorkOrderCompletedStatus? msdyn_DefaultWorkOrderCompletedStatus
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_DefaultWorkOrderCompletedStatus);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_DefaultWorkOrderCompletedStatus)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_DefaultWorkOrderCompletedStatus] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_DefaultWorkOrderCompletedStatus] = null;
			}
		}

		/// <summary>
		/// <para>Specifies whether users can make booking status changes in the Remote Assist application.</para>
		/// <para>Boolean</para>
		/// <para>Disable Booking Status Changes on Remote Assist</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_DisableRemoteAssistBookingStatusChanges
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_DisableRemoteAssistBookingStatusChanges); }
			set { Entity.Attributes[Fields.msdyn_DisableRemoteAssistBookingStatusChanges] = value; }
		}

		/// <summary>
		/// <para>If enabled then address suggestions will be displayed when editing the address on the account, contact, user, or work order form.</para>
		/// <para>Boolean</para>
		/// <para>Enable Address Suggestions</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableAddressSuggestions
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableAddressSuggestions); }
			set { Entity.Attributes[Fields.msdyn_EnableAddressSuggestions] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Enable Legacy Schedule Assistant (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableLegacyScheduleAssistant
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableLegacyScheduleAssistant); }
			set { Entity.Attributes[Fields.msdyn_EnableLegacyScheduleAssistant] = value; }
		}

		/// <summary>
		/// <para>Enable Suggested Duration for Incident Type. System will calculate Suggested Duration daily or on demand based on historical bookings</para>
		/// <para>Boolean</para>
		/// <para>Enables the suggested duration functionality</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_EnableSuggestedDuration
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_EnableSuggestedDuration); }
			set { Entity.Attributes[Fields.msdyn_EnableSuggestedDuration] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 10</para>
		/// <para>Entity Number Length  (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_EntityNumberLength
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_EntityNumberLength); }
			set { Entity.Attributes[Fields.msdyn_EntityNumberLength] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Field Service Setting</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_fieldservicesettingId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_fieldservicesettingId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Generate Agreement Invoices X Days In Advance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GenerateAgreementInvoicesXDaysInAdvance
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GenerateAgreementInvoicesXDaysInAdvance); }
			set { Entity.Attributes[Fields.msdyn_GenerateAgreementInvoicesXDaysInAdvance] = value; }
		}

		/// <summary>
		/// <para>Specify default how many days in advance of the Agreement Booking Date the system should automatically generate a Work Order</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Generate Agreement WO X Days In Advance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GenerateAgreementWOXDaysInAdvance
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GenerateAgreementWOXDaysInAdvance); }
			set { Entity.Attributes[Fields.msdyn_GenerateAgreementWOXDaysInAdvance] = value; }
		}

		/// <summary>
		/// <para>Required - Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Generate Booking Dates X Months In Advance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GenerateBookingDatesXMonthsInAdvance
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GenerateBookingDatesXMonthsInAdvance); }
			set { Entity.Attributes[Fields.msdyn_GenerateBookingDatesXMonthsInAdvance] = value; }
		}

		/// <summary>
		/// <para>Required - Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Generate Invoice Dates X Months In Advance</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GenerateInvoiceDatesXMonthsInAdvance
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GenerateInvoiceDatesXMonthsInAdvance); }
			set { Entity.Attributes[Fields.msdyn_GenerateInvoiceDatesXMonthsInAdvance] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>GPS Location Expires After X Minutes (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_GPSLocationExpiresAfterXMinutes
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_GPSLocationExpiresAfterXMinutes); }
			set { Entity.Attributes[Fields.msdyn_GPSLocationExpiresAfterXMinutes] = value; }
		}

		/// <summary>
		/// <para>Choose the range of date to use for suggested duration calculation</para>
		/// <para>Required - Picklist</para>
		/// <para>Historical Data Filter</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_HistoricalDataFilter? msdyn_HistoricalDataFilter
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_HistoricalDataFilter);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_HistoricalDataFilter)value.Value;
			}
			set
	{
		Entity.Attributes[Fields.msdyn_HistoricalDataFilter] = new OptionSetValue((int)value);
}
		}

		/// <summary>
		/// <para>Shows the prefix to be added to the inventory adjustment numbers.</para>
		/// <para>String - MaxLength: 25</para>
		/// <para>Inventory Adjustment Prefix (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InventoryAdjustmentPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InventoryAdjustmentPrefix); }
			set { Entity.Attributes[Fields.msdyn_InventoryAdjustmentPrefix] = value; }
		}

		/// <summary>
		/// <para>Shows the number to be used as the starting number for inventory adjustments.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Inventory Adjustment Starting Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_InventoryAdjustmentStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_InventoryAdjustmentStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_InventoryAdjustmentStartingNumber] = value; }
		}

		/// <summary>
		/// <para>Shows the prefix to be added to the inventory transfer numbers.</para>
		/// <para>String - MaxLength: 25</para>
		/// <para>Inventory Transfer Prefix (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_InventoryTransferPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_InventoryTransferPrefix); }
			set { Entity.Attributes[Fields.msdyn_InventoryTransferPrefix] = value; }
		}

		/// <summary>
		/// <para>Shows the number to be used as the starting number for inventory transfers.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Inventory Transfer Starting Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_InventoryTransferStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_InventoryTransferStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_InventoryTransferStartingNumber] = value; }
		}

		/// <summary>
		/// <para>Enter the name of the custom entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Notification Timeout (In sec) (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_NotificationTimeout
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_NotificationTimeout); }
			set { Entity.Attributes[Fields.msdyn_NotificationTimeout] = value; }
		}

		/// <summary>
		/// <para>Default Pay Type to be used for overtime work hours</para>
		/// <para>Lookup</para>
		/// <para>Overtime Pay Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_OvertimePayType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_OvertimePayType); }
			set { Entity.Attributes[Fields.msdyn_OvertimePayType] = value; }
		}

		/// <summary>
		/// <para>Shows the date when cleanup of unique numbers will occur.</para>
		/// <para>DateTimeBehavior: TimeZoneIndependent - DateTimeFormat: DateAndTime</para>
		/// <para>Postpone Number Cleanup Until</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_PostponeNumberCleanupUntil
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_PostponeNumberCleanupUntil); }
			set { Entity.Attributes[Fields.msdyn_PostponeNumberCleanupUntil] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Product Cost Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_ProductCostOrder? msdyn_ProductCostOrder
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_ProductCostOrder);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_ProductCostOrder)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_ProductCostOrder] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_ProductCostOrder] = null;
			}
		}

		/// <summary>
		/// <para>Enable if a Purchase Order requires approval in order for the status to be changed to Submitted</para>
		/// <para>Boolean</para>
		/// <para>Purchase Order Approval Required</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_PurchaseOrderApprovalRequired
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_PurchaseOrderApprovalRequired); }
			set { Entity.Attributes[Fields.msdyn_PurchaseOrderApprovalRequired] = value; }
		}

		/// <summary>
		/// <para>Shows the prefix to be added to the purchase order numbers.</para>
		/// <para>String - MaxLength: 25</para>
		/// <para>Purchase Order Prefix (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_PurchaseOrderPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_PurchaseOrderPrefix); }
			set { Entity.Attributes[Fields.msdyn_PurchaseOrderPrefix] = value; }
		}

		/// <summary>
		/// <para>Shows the number to be used as starting number for the automatically generated purchase order number.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Purchase Order Starting Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_PurchaseOrderStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_PurchaseOrderStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_PurchaseOrderStartingNumber] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 1 - MaxValue: 2,147,483,647</para>
		/// <para>Resources Synchronization Timeout (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_ResourcesSynchronizationTimeout
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_ResourcesSynchronizationTimeout); }
			set { Entity.Attributes[Fields.msdyn_ResourcesSynchronizationTimeout] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>RMA Prefix (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RMAPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RMAPrefix); }
			set { Entity.Attributes[Fields.msdyn_RMAPrefix] = value; }
		}

		/// <summary>
		/// <para>Shows the number to be used as the starting number for the automatically generation RMA number.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>RMA Starting Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RMAStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RMAStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_RMAStartingNumber] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>RTV Prefix (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_RTVPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_RTVPrefix); }
			set { Entity.Attributes[Fields.msdyn_RTVPrefix] = value; }
		}

		/// <summary>
		/// <para>Shows the number to be used as the starting number for the automatically generated RTV number.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>RTV Starting Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_RTVStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_RTVStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_RTVStartingNumber] = value; }
		}

		/// <summary>
		/// <para>Select whether the schedule assistant should automatically filter the results based on the territory set on the work order.</para>
		/// <para>Boolean</para>
		/// <para>Auto Filter Service Territory (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_SAAutoFilterServiceTerritory
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_SAAutoFilterServiceTerritory); }
			set { Entity.Attributes[Fields.msdyn_SAAutoFilterServiceTerritory] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Scheduler Business Unit Details View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerBusinessUnitDetailsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerBusinessUnitDetailsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerBusinessUnitDetailsView] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Scheduler Business Unit Tooltip View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerBusinessUnitTooltipView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerBusinessUnitTooltipView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerBusinessUnitTooltipView] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Scheduler Core Details View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerCoreDetailsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerCoreDetailsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerCoreDetailsView] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 5000</para>
		/// <para>Scheduler Core Slot Text Template (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerCoreSlotTextTemplate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerCoreSlotTextTemplate); }
			set { Entity.Attributes[Fields.msdyn_SchedulerCoreSlotTextTemplate] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Scheduler Core Tooltip View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerCoreTooltipView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerCoreTooltipView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerCoreTooltipView] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Scheduler Field Service Details View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerFieldServiceDetailsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerFieldServiceDetailsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerFieldServiceDetailsView] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 5000</para>
		/// <para>Scheduler Field Service Slot Text Template (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerFieldServiceSlotTextTemplate
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerFieldServiceSlotTextTemplate); }
			set { Entity.Attributes[Fields.msdyn_SchedulerFieldServiceSlotTextTemplate] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Scheduler Field Service Tooltip View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerFieldServiceTooltipView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerFieldServiceTooltipView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerFieldServiceTooltipView] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Scheduler Resource Details View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerResourceDetailsView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerResourceDetailsView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerResourceDetailsView] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Scheduler Resource Tooltip View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerResourceTooltipView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerResourceTooltipView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerResourceTooltipView] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Scheduler Unscheduled View (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SchedulerUnscheduledView
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SchedulerUnscheduledView); }
			set { Entity.Attributes[Fields.msdyn_SchedulerUnscheduledView] = value; }
		}

		/// <summary>
		/// <para>Api key for map</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Bing API Key (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_sdkapimapkey
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_sdkapimapkey); }
			set { Entity.Attributes[Fields.msdyn_sdkapimapkey] = value; }
		}

		/// <summary>
		/// <para>Product to be used by the system for Travel Charges on Work Orders</para>
		/// <para>Lookup</para>
		/// <para>Travel Charge Item</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TravelChargeItemId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TravelChargeItemId); }
			set { Entity.Attributes[Fields.msdyn_TravelChargeItemId] = value; }
		}

		/// <summary>
		/// <para>Default Pay Type to be used for Travel hours</para>
		/// <para>Lookup</para>
		/// <para>Travel Pay Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_TravelPayType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_TravelPayType); }
			set { Entity.Attributes[Fields.msdyn_TravelPayType] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Travel Time Rescheduling (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? msdyn_TravelTimeRescheduling
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.msdyn_TravelTimeRescheduling); }
			set { Entity.Attributes[Fields.msdyn_TravelTimeRescheduling] = value; }
		}

		/// <summary>
		/// <para>Location for schedules where geo code info has not been defined</para>
		/// <para>Picklist</para>
		/// <para>Undefined Booking Location (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_UndefinedBookingLocation? msdyn_UndefinedBookingLocation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_UndefinedBookingLocation);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_UndefinedBookingLocation)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_UndefinedBookingLocation] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_UndefinedBookingLocation] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 50</para>
		/// <para>Unscheduled WO Tooltips View Id (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_UnscheduledWOTooltipsViewId
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_UnscheduledWOTooltipsViewId); }
			set { Entity.Attributes[Fields.msdyn_UnscheduledWOTooltipsViewId] = value; }
		}

		/// <summary>
		/// <para>Specify how the system should react when trying to use products that are out of stock.</para>
		/// <para>Picklist</para>
		/// <para>Use of Products Out of Stock</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_UseofProductsOutofStock? msdyn_UseofProductsOutofStock
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_UseofProductsOutofStock);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_UseofProductsOutofStock)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_UseofProductsOutofStock] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_UseofProductsOutofStock] = null;
			}
		}

		/// <summary>
		/// <para>Specify whether the system should automatically generate an invoice for work orders.</para>
		/// <para>Required - Picklist</para>
		/// <para>Work Order Invoice Creation</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_WorkOrderInvoiceCreation? msdyn_WorkOrderInvoiceCreation
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_WorkOrderInvoiceCreation);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.msdyn_WorkOrderInvoiceCreation)value.Value;
			}
			set
	{
		Entity.Attributes[Fields.msdyn_WorkOrderInvoiceCreation] = new OptionSetValue((int)value);
}
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Work Order Prefix (Deprecated)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_WorkOrderPrefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_WorkOrderPrefix); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderPrefix] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Work Order Starting Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? msdyn_WorkOrderStartingNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.msdyn_WorkOrderStartingNumber); }
			set { Entity.Attributes[Fields.msdyn_WorkOrderStartingNumber] = value; }
		}

		/// <summary>
		/// <para>Default Pay Type to be used for regular work hours</para>
		/// <para>Lookup</para>
		/// <para>Work Pay Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_WorkPayType
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_WorkPayType); }
			set { Entity.Attributes[Fields.msdyn_WorkPayType] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Field Service Setting</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Field Service Setting</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_fieldservicesettingOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
