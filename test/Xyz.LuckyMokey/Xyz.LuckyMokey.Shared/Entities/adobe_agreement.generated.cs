//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets
{
	public enum adobe_automaticreminder
	{
		/// <summary>
		/// Never = 648770000
		/// </summary>
		Never = 648770000,
		/// <summary>
		/// Every_Day_Until_Signed = 648770001
		/// </summary>
		Every_Day_Until_Signed = 648770001,
		/// <summary>
		/// Every_Week_Until_Signed = 648770002
		/// </summary>
		Every_Week_Until_Signed = 648770002
	}

	public enum adobe_identityverification
	{
		/// <summary>
		/// EMAIL = 648770003
		/// </summary>
		EMAIL = 648770003,
		/// <summary>
		/// PHONE = 648770004
		/// </summary>
		PHONE = 648770004,
		/// <summary>
		/// PASSWORD = 648770000
		/// </summary>
		PASSWORD = 648770000,
		/// <summary>
		/// KNOWLEDGE_BASE = 648770001
		/// </summary>
		KNOWLEDGE_BASE = 648770001,
		/// <summary>
		/// WEB_IDENTITY = 648770002
		/// </summary>
		WEB_IDENTITY = 648770002
	}

	public enum adobe_oquickcreateentityptionset
	{
		/// <summary>
		/// Opportunity = 648770000
		/// </summary>
		Opportunity = 648770000,
		/// <summary>
		/// Contact = 648770001
		/// </summary>
		Contact = 648770001,
		/// <summary>
		/// Lead = 648770002
		/// </summary>
		Lead = 648770002,
		/// <summary>
		/// Account = 648770003
		/// </summary>
		Account = 648770003,
		/// <summary>
		/// Contract = 648770004
		/// </summary>
		Contract = 648770004,
		/// <summary>
		/// Invoice = 648770005
		/// </summary>
		Invoice = 648770005,
		/// <summary>
		/// Order = 648770006
		/// </summary>
		Order = 648770006,
		/// <summary>
		/// Quote = 648770007
		/// </summary>
		Quote = 648770007,
		/// <summary>
		/// User = 648770008
		/// </summary>
		User = 648770008
	}

	public enum adobe_sendersigningoptions
	{
		/// <summary>
		/// I_sign_first = 648770000
		/// </summary>
		I_sign_first = 648770000,
		/// <summary>
		/// I_sign_last = 648770001
		/// </summary>
		I_sign_last = 648770001,
		/// <summary>
		/// Only_I_sign = 648770002
		/// </summary>
		Only_I_sign = 648770002
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Xyz.LuckyMokey.Shared.Entities
{
	public partial class adobe_agreement : EntityBase
	{
		public struct Fields
		{
			public const string adobe_add_recipient_from_parent_entity = "adobe_add_recipient_from_parent_entity";
			public const string adobe_addpostsignredirecturl = "adobe_addpostsignredirecturl";
			public const string adobe_adobe_agreementsystemuserlookup = "adobe_adobe_agreementsystemuserlookup";
			public const string adobe_agreementAccountlookup = "adobe_agreementaccountlookup";
			public const string adobe_agreementcontactlookup = "adobe_agreementcontactlookup";
			public const string adobe_agreementcontractlookup = "adobe_agreementcontractlookup";
			public const string adobe_agreementexpires = "adobe_agreementexpires";
			public const string adobe_AgreementFormId = "adobe_agreementformid";
			public const string adobe_agreementId = "adobe_agreementid";
			public const string adobe_agreementInvoicelookup = "adobe_agreementinvoicelookup";
			public const string adobe_agreementleadlookup = "adobe_agreementleadlookup";
			public const string adobe_agreementmessage = "adobe_agreementmessage";
			public const string adobe_agreementopportunitylookup = "adobe_agreementopportunitylookup";
			public const string adobe_agreementQuotelookup = "adobe_agreementquotelookup";
			public const string adobe_agreementsalesorderlookup = "adobe_agreementsalesorderlookup";
			public const string adobe_audittrailcontent = "adobe_audittrailcontent";
			public const string adobe_authoringurl = "adobe_authoringurl";
			public const string adobe_automaticreminder = "adobe_automaticreminder";
			public const string adobe_combineddocumenturl = "adobe_combineddocumenturl";
			public const string adobe_creationdata = "adobe_creationdata";
			public const string adobe_creationtype = "adobe_creationtype";
			public const string adobe_crmversion = "adobe_crmversion";
			public const string adobe_currentsignerurl = "adobe_currentsignerurl";
			public const string adobe_datesent = "adobe_datesent";
			public const string adobe_datesigned = "adobe_datesigned";
			public const string adobe_dateupdated = "adobe_dateupdated";
			public const string adobe_daysuntilexpires = "adobe_daysuntilexpires";
			public const string adobe_documentimagesurls = "adobe_documentimagesurls";
			public const string adobe_emailid = "adobe_emailid";
			public const string adobe_esagreementid = "adobe_esagreementid";
			public const string adobe_esagreementstatus = "adobe_esagreementstatus";
			public const string adobe_exceptionmessage = "adobe_exceptionmessage";
			public const string adobe_hostsigning = "adobe_hostsigning";
			public const string adobe_identityverification = "adobe_identityverification";
			public const string adobe_isattachmentadded = "adobe_isattachmentadded";
			public const string adobe_isaudittrailattached = "adobe_isaudittrailattached";
			public const string adobe_isPostAddedToParentEntity = "adobe_ispostaddedtoparententity";
			public const string adobe_isQuickCreate = "adobe_isquickcreate";
			public const string adobe_isrecipientadded = "adobe_isrecipientadded";
			public const string adobe_issignedpdfattached = "adobe_issignedpdfattached";
			public const string adobe_legacyid = "adobe_legacyid";
			public const string adobe_librarydocuments = "adobe_librarydocuments";
			public const string adobe_librarydocumentslong = "adobe_librarydocumentslong";
			public const string adobe_migrationguid = "adobe_migrationguid";
			public const string adobe_missingtemplatedocument = "adobe_missingtemplatedocument";
			public const string adobe_missingtemplaterecipient = "adobe_missingtemplaterecipient";
			public const string adobe_name = "adobe_name";
			public const string adobe_oquickcreateentityptionset = "adobe_oquickcreateentityptionset";
			public const string adobe_parentaccountId = "adobe_parentaccountid";
			public const string adobe_parentcontactid = "adobe_parentcontactid";
			public const string adobe_parentcontractid = "adobe_parentcontractid";
			public const string adobe_ParentInvoiceId = "adobe_parentinvoiceid";
			public const string adobe_parentleadid = "adobe_parentleadid";
			public const string adobe_parentopportunityid = "adobe_parentopportunityid";
			public const string adobe_ParentOrderId = "adobe_parentorderid";
			public const string adobe_parentquoteid = "adobe_parentquoteid";
			public const string adobe_parentuserid = "adobe_parentuserid";
			public const string adobe_plugintrigger = "adobe_plugintrigger";
			public const string adobe_plugintriggerasync = "adobe_plugintriggerasync";
			public const string adobe_postsigningredirecturl = "adobe_postsigningredirecturl";
			public const string adobe_postsignredirectdelay = "adobe_postsignredirectdelay";
			public const string adobe_postsignredirecturl = "adobe_postsignredirecturl";
			public const string adobe_quickcreatelookuptemplatelist = "adobe_quickcreatelookuptemplatelist";
			public const string adobe_ReaderRoleOnly = "adobe_readerroleonly";
			public const string adobe_recipientdata = "adobe_recipientdata";
			public const string adobe_reviewsigningorder = "adobe_reviewsigningorder";
			public const string adobe_securesignedpdf = "adobe_securesignedpdf";
			public const string adobe_selecteddatamap = "adobe_selecteddatamap";
			public const string adobe_selectedlanguage = "adobe_selectedlanguage";
			public const string adobe_selectedlibraryid = "adobe_selectedlibraryid";
			public const string adobe_senderId = "adobe_senderid";
			public const string adobe_sendersigning = "adobe_sendersigning";
			public const string adobe_sendersigningoptions = "adobe_sendersigningoptions";
			public const string adobe_sendersigningorder = "adobe_sendersigningorder";
			public const string adobe_sendersignsonly = "adobe_sendersignsonly";
			public const string adobe_sendfromlibrary = "adobe_sendfromlibrary";
			public const string adobe_sendfromlibrarycheckboxvalue = "adobe_sendfromlibrarycheckboxvalue";
			public const string adobe_signaturetype = "adobe_signaturetype";
			public const string adobe_signedpdfpassword = "adobe_signedpdfpassword";
			public const string adobe_signingorder = "adobe_signingorder";
			public const string adobe_signingpassword = "adobe_signingpassword";
			public const string adobe_subject = "adobe_subject";
			public const string adobe_templateid = "adobe_templateid";
			public const string adobe_triggeragreementupdate = "adobe_triggeragreementupdate";
			public const string adobe_useauthoring = "adobe_useauthoring";
			public const string adobe_useragent = "adobe_useragent";
			public const string adobe_usermessagequickcreateform = "adobe_usermessagequickcreateform";
			public const string adobe_waitingforsendersignature = "adobe_waitingforsendersignature";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "adobe_agreement";

		public const int EntityTypeCode = 10393;

		[DebuggerNonUserCode()]
		public adobe_agreement()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_agreement(Guid adobe_agreementId)
		{
			Entity = new Entity(EntityLogicalName, adobe_agreementId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_agreement(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_agreement(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_agreement(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_agreement(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Add Recipient From Parent Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_add_recipient_from_parent_entity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_add_recipient_from_parent_entity); }
			set { Entity.Attributes[Fields.adobe_add_recipient_from_parent_entity] = value; }
		}

		/// <summary>
		/// <para>Redirect your signers or approvers to a landing page of your choice</para>
		/// <para>Boolean</para>
		/// <para>Add Post Sign Redirect URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_addpostsignredirecturl
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_addpostsignredirecturl); }
			set { Entity.Attributes[Fields.adobe_addpostsignredirecturl] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Choose User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_adobe_agreementsystemuserlookup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_adobe_agreementsystemuserlookup); }
			set { Entity.Attributes[Fields.adobe_adobe_agreementsystemuserlookup] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Choose Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_agreementAccountlookup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_agreementAccountlookup); }
			set { Entity.Attributes[Fields.adobe_agreementAccountlookup] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Choose Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_agreementcontactlookup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_agreementcontactlookup); }
			set { Entity.Attributes[Fields.adobe_agreementcontactlookup] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Contract associated with Agreement.</para>
		/// <para>Lookup</para>
		/// <para>Choose Contract</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_agreementcontractlookup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_agreementcontractlookup); }
			set { Entity.Attributes[Fields.adobe_agreementcontractlookup] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Agreement Expires</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_agreementexpires
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_agreementexpires); }
			set { Entity.Attributes[Fields.adobe_agreementexpires] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Agreement Mapping Template associated with Agreement.</para>
		/// <para>Lookup</para>
		/// <para>Agreement Form</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_AgreementFormId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_AgreementFormId); }
			set { Entity.Attributes[Fields.adobe_AgreementFormId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Agreement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid adobe_agreementId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.adobe_agreementId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Choose Invoice</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_agreementInvoicelookup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_agreementInvoicelookup); }
			set { Entity.Attributes[Fields.adobe_agreementInvoicelookup] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Choose Lead</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_agreementleadlookup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_agreementleadlookup); }
			set { Entity.Attributes[Fields.adobe_agreementleadlookup] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 20000</para>
		/// <para>Agreement Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_agreementmessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_agreementmessage); }
			set { Entity.Attributes[Fields.adobe_agreementmessage] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Choose Opportunity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_agreementopportunitylookup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_agreementopportunitylookup); }
			set { Entity.Attributes[Fields.adobe_agreementopportunitylookup] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Choose Quote</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_agreementQuotelookup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_agreementQuotelookup); }
			set { Entity.Attributes[Fields.adobe_agreementQuotelookup] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Choose Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_agreementsalesorderlookup
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_agreementsalesorderlookup); }
			set { Entity.Attributes[Fields.adobe_agreementsalesorderlookup] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>Audit Trail Content</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_audittrailcontent
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_audittrailcontent); }
			set { Entity.Attributes[Fields.adobe_audittrailcontent] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Authoring URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_authoringurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_authoringurl); }
			set { Entity.Attributes[Fields.adobe_authoringurl] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Automatic Reminders</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets.adobe_automaticreminder? adobe_automaticreminder
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_automaticreminder);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets.adobe_automaticreminder)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_automaticreminder] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_automaticreminder] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Combined Document URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_combineddocumenturl
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_combineddocumenturl); }
			set { Entity.Attributes[Fields.adobe_combineddocumenturl] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>creationdata</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_creationdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_creationdata); }
			set { Entity.Attributes[Fields.adobe_creationdata] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>creation type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_creationtype
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_creationtype); }
			set { Entity.Attributes[Fields.adobe_creationtype] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>crmversion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_crmversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_crmversion); }
			set { Entity.Attributes[Fields.adobe_crmversion] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Current Signer Url</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_currentsignerurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_currentsignerurl); }
			set { Entity.Attributes[Fields.adobe_currentsignerurl] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Sent On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adobe_datesentUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adobe_datesent); }
			set { Entity.Attributes[Fields.adobe_datesent] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Signed On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adobe_datesignedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adobe_datesigned); }
			set { Entity.Attributes[Fields.adobe_datesigned] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Updated On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adobe_dateupdatedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adobe_dateupdated); }
			set { Entity.Attributes[Fields.adobe_dateupdated] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 1 - MaxValue: 500</para>
		/// <para>Days Until Expires</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adobe_daysuntilexpires
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adobe_daysuntilexpires); }
			set { Entity.Attributes[Fields.adobe_daysuntilexpires] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 1000000</para>
		/// <para>document images urls</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_documentimagesurls
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_documentimagesurls); }
			set { Entity.Attributes[Fields.adobe_documentimagesurls] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Dummy Email Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_emailid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_emailid); }
			set { Entity.Attributes[Fields.adobe_emailid] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Agreement Sign Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_esagreementid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_esagreementid); }
			set { Entity.Attributes[Fields.adobe_esagreementid] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Agreement Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_esagreementstatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_esagreementstatus); }
			set { Entity.Attributes[Fields.adobe_esagreementstatus] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Exception Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_exceptionmessage
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_exceptionmessage); }
			set { Entity.Attributes[Fields.adobe_exceptionmessage] = value; }
		}

		/// <summary>
		/// <para>Select this option when signers are present and will sign in person.</para>
		/// <para>Boolean</para>
		/// <para>Host Signing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_hostsigning
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_hostsigning); }
			set { Entity.Attributes[Fields.adobe_hostsigning] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Identity Verification</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets.adobe_identityverification? adobe_identityverification
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_identityverification);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets.adobe_identityverification)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_identityverification] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_identityverification] = null;
			}
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Is Attachment Added</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_isattachmentadded
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_isattachmentadded); }
			set { Entity.Attributes[Fields.adobe_isattachmentadded] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>isaudittrailattached</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_isaudittrailattached
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_isaudittrailattached); }
			set { Entity.Attributes[Fields.adobe_isaudittrailattached] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Is Post Added To Parent Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_isPostAddedToParentEntity
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_isPostAddedToParentEntity); }
			set { Entity.Attributes[Fields.adobe_isPostAddedToParentEntity] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>isQuickCreate</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_isQuickCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_isQuickCreate); }
			set { Entity.Attributes[Fields.adobe_isQuickCreate] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Is Recipient Added</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_isrecipientadded
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_isrecipientadded); }
			set { Entity.Attributes[Fields.adobe_isrecipientadded] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>issignedpdfattached</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_issignedpdfattached
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_issignedpdfattached); }
			set { Entity.Attributes[Fields.adobe_issignedpdfattached] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>legacyid</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_legacyid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_legacyid); }
			set { Entity.Attributes[Fields.adobe_legacyid] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 4000</para>
		/// <para>Library Documents</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_librarydocuments
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_librarydocuments); }
			set { Entity.Attributes[Fields.adobe_librarydocuments] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 200000</para>
		/// <para>librarydocumentslong</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_librarydocumentslong
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_librarydocumentslong); }
			set { Entity.Attributes[Fields.adobe_librarydocumentslong] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>migration guid</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_migrationguid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_migrationguid); }
			set { Entity.Attributes[Fields.adobe_migrationguid] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>missing template document</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_missingtemplatedocument
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_missingtemplatedocument); }
			set { Entity.Attributes[Fields.adobe_missingtemplatedocument] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>missing template recipient</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_missingtemplaterecipient
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_missingtemplaterecipient); }
			set { Entity.Attributes[Fields.adobe_missingtemplaterecipient] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 400</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_name); }
			set { Entity.Attributes[Fields.adobe_name] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Select Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets.adobe_oquickcreateentityptionset? adobe_oquickcreateentityptionset
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_oquickcreateentityptionset);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets.adobe_oquickcreateentityptionset)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_oquickcreateentityptionset] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_oquickcreateentityptionset] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for Account associated with Agreement.</para>
		/// <para>Lookup</para>
		/// <para>Parent Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_parentaccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_parentaccountId); }
			set { Entity.Attributes[Fields.adobe_parentaccountId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Contact associated with Agreement.</para>
		/// <para>Lookup</para>
		/// <para>Parent Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_parentcontactid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_parentcontactid); }
			set { Entity.Attributes[Fields.adobe_parentcontactid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Contract associated with Agreement.</para>
		/// <para>Lookup</para>
		/// <para>Parent Contract</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_parentcontractid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_parentcontractid); }
			set { Entity.Attributes[Fields.adobe_parentcontractid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Invoice associated with Agreement.</para>
		/// <para>Lookup</para>
		/// <para>Parent Invoice</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_ParentInvoiceId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_ParentInvoiceId); }
			set { Entity.Attributes[Fields.adobe_ParentInvoiceId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Lead associated with Agreement.</para>
		/// <para>Lookup</para>
		/// <para>Parent Lead</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_parentleadid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_parentleadid); }
			set { Entity.Attributes[Fields.adobe_parentleadid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Opportunity associated with Agreement.</para>
		/// <para>Lookup</para>
		/// <para>Parent Opportunity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_parentopportunityid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_parentopportunityid); }
			set { Entity.Attributes[Fields.adobe_parentopportunityid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Order associated with Agreement.</para>
		/// <para>Lookup</para>
		/// <para>Parent Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_ParentOrderId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_ParentOrderId); }
			set { Entity.Attributes[Fields.adobe_ParentOrderId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Quote associated with Agreement.</para>
		/// <para>Lookup</para>
		/// <para>Parent Quote</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_parentquoteid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_parentquoteid); }
			set { Entity.Attributes[Fields.adobe_parentquoteid] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for User associated with Agreement.</para>
		/// <para>Lookup</para>
		/// <para>Parent User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_parentuserid
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_parentuserid); }
			set { Entity.Attributes[Fields.adobe_parentuserid] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Plugin Trigger</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_plugintrigger
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_plugintrigger); }
			set { Entity.Attributes[Fields.adobe_plugintrigger] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 20</para>
		/// <para>PluginTriggerAsync</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_plugintriggerasync
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_plugintriggerasync); }
			set { Entity.Attributes[Fields.adobe_plugintriggerasync] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Post Sign Redirect URL</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_postsigningredirecturl
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_postsigningredirecturl); }
			set { Entity.Attributes[Fields.adobe_postsigningredirecturl] = value; }
		}

		/// <summary>
		/// <para>It is recommended you allow the user to see the completion screen and download any documents before re-directing to your landing page.  Adobe recommends between 10-30 seconds.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 10,000</para>
		/// <para>Post Sign Redirect Delay</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adobe_postsignredirectdelay
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adobe_postsignredirectdelay); }
			set { Entity.Attributes[Fields.adobe_postsignredirectdelay] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Post Sign Redirect URL old</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_postsignredirecturl
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_postsignredirecturl); }
			set { Entity.Attributes[Fields.adobe_postsignredirecturl] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Choose a Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_quickcreatelookuptemplatelist
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_quickcreatelookuptemplatelist); }
			set { Entity.Attributes[Fields.adobe_quickcreatelookuptemplatelist] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Reader Role Only</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_ReaderRoleOnly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_ReaderRoleOnly); }
			set { Entity.Attributes[Fields.adobe_ReaderRoleOnly] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Recipient Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_recipientdata
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_recipientdata); }
			set { Entity.Attributes[Fields.adobe_recipientdata] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>reviewsigningorder</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_reviewsigningorder
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_reviewsigningorder); }
			set { Entity.Attributes[Fields.adobe_reviewsigningorder] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Secure Signed PDF</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_securesignedpdf
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_securesignedpdf); }
			set { Entity.Attributes[Fields.adobe_securesignedpdf] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Selected Data Map</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_selecteddatamap
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_selecteddatamap); }
			set { Entity.Attributes[Fields.adobe_selecteddatamap] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Selected Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_selectedlanguage
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_selectedlanguage); }
			set { Entity.Attributes[Fields.adobe_selectedlanguage] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Selected Library Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_selectedlibraryid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_selectedlibraryid); }
			set { Entity.Attributes[Fields.adobe_selectedlibraryid] = value; }
		}

		/// <summary>
		/// <para>User Id of the sender of agreement</para>
		/// <para>Lookup</para>
		/// <para>senderId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_senderId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_senderId); }
			set { Entity.Attributes[Fields.adobe_senderId] = value; }
		}

		/// <summary>
		/// <para>Add yourself to the signing order</para>
		/// <para>Boolean</para>
		/// <para>Sender Signing</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_sendersigning
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_sendersigning); }
			set { Entity.Attributes[Fields.adobe_sendersigning] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>sender signing options</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets.adobe_sendersigningoptions? adobe_sendersigningoptions
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_sendersigningoptions);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets.adobe_sendersigningoptions)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_sendersigningoptions] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_sendersigningoptions] = null;
			}
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Sender Signing Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_sendersigningorder
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_sendersigningorder); }
			set { Entity.Attributes[Fields.adobe_sendersigningorder] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Sender Signs Only</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_sendersignsonly
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_sendersignsonly); }
			set { Entity.Attributes[Fields.adobe_sendersignsonly] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Send From Library</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_sendfromlibrary
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_sendfromlibrary); }
			set { Entity.Attributes[Fields.adobe_sendfromlibrary] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>send frm library checkbox value</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_sendfromlibrarycheckboxvalue
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_sendfromlibrarycheckboxvalue); }
			set { Entity.Attributes[Fields.adobe_sendfromlibrarycheckboxvalue] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Signature Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_signaturetype
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_signaturetype); }
			set { Entity.Attributes[Fields.adobe_signaturetype] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Signed Pdf Password</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_signedpdfpassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_signedpdfpassword); }
			set { Entity.Attributes[Fields.adobe_signedpdfpassword] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Signing Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_signingorder
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_signingorder); }
			set { Entity.Attributes[Fields.adobe_signingorder] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Signing Password</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_signingpassword
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_signingpassword); }
			set { Entity.Attributes[Fields.adobe_signingpassword] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>subject</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_subject); }
			set { Entity.Attributes[Fields.adobe_subject] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 1000</para>
		/// <para>templateid</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_templateid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_templateid); }
			set { Entity.Attributes[Fields.adobe_templateid] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Trigger Update</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adobe_triggeragreementupdateUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adobe_triggeragreementupdate); }
			set { Entity.Attributes[Fields.adobe_triggeragreementupdate] = value; }
		}

		/// <summary>
		/// <para>Preview documents before sending</para>
		/// <para>Boolean</para>
		/// <para>Use Authoring</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_useauthoring
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_useauthoring); }
			set { Entity.Attributes[Fields.adobe_useauthoring] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>user agent</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_useragent
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_useragent); }
			set { Entity.Attributes[Fields.adobe_useragent] = value; }
		}

		/// <summary>
		/// <para>Memo - MaxLength: 2000</para>
		/// <para>usermessagequickcreateform</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_usermessagequickcreateform
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_usermessagequickcreateform); }
			set { Entity.Attributes[Fields.adobe_usermessagequickcreateform] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Waiting For Sender Signature</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_waitingforsendersignature
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_waitingforsendersignature); }
			set { Entity.Attributes[Fields.adobe_waitingforsendersignature] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}

		/// <summary>
		/// <para>Status of the Agreement</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Agreement</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_agreementOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
