//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Xyz.LuckyMokey.Shared.Entities.msdyn_sessioneventOptionSets
{
	public enum msdyn_eventinfo
	{
		/// <summary>
		/// Default = 192350000
		/// </summary>
		Default = 192350000
	}

	public enum msdyn_eventreason
	{
		/// <summary>
		/// AgentTransfer = 192350001
		/// </summary>
		AgentTransfer = 192350001,
		/// <summary>
		/// QueueTransfer = 192350002
		/// </summary>
		QueueTransfer = 192350002,
		/// <summary>
		/// PreChatSurvey = 192350003
		/// </summary>
		PreChatSurvey = 192350003,
		/// <summary>
		/// PostchatSurvey = 192350004
		/// </summary>
		PostchatSurvey = 192350004,
		/// <summary>
		/// UserAccept = 192350005
		/// </summary>
		UserAccept = 192350005,
		/// <summary>
		/// AutoAccept = 192350006
		/// </summary>
		AutoAccept = 192350006,
		/// <summary>
		/// Closed = 192350007
		/// </summary>
		Closed = 192350007,
		/// <summary>
		/// AgentInviteRejected = 192350008
		/// </summary>
		AgentInviteRejected = 192350008,
		/// <summary>
		/// AgentInviteTimeout = 192350009
		/// </summary>
		AgentInviteTimeout = 192350009,
		/// <summary>
		/// AgentDisconnected = 192350010
		/// </summary>
		AgentDisconnected = 192350010,
		/// <summary>
		/// AgentTimeout = 192350011
		/// </summary>
		AgentTimeout = 192350011,
		/// <summary>
		/// AgentTransferred = 192350012
		/// </summary>
		AgentTransferred = 192350012,
		/// <summary>
		/// CustomerTimeout = 192350013
		/// </summary>
		CustomerTimeout = 192350013,
		/// <summary>
		/// CustomerDisconnect = 192350014
		/// </summary>
		CustomerDisconnect = 192350014,
		/// <summary>
		/// SessionTimeout = 192350015
		/// </summary>
		SessionTimeout = 192350015,
		/// <summary>
		/// Escalated = 192350016
		/// </summary>
		Escalated = 192350016,
		/// <summary>
		/// Rejected = 192350017
		/// </summary>
		Rejected = 192350017,
		/// <summary>
		/// TimedOut = 192350018
		/// </summary>
		TimedOut = 192350018,
		/// <summary>
		/// Accepted = 192350019
		/// </summary>
		Accepted = 192350019,
		/// <summary>
		/// AutoAccepted = 192350020
		/// </summary>
		AutoAccepted = 192350020,
		/// <summary>
		/// Item = 192350021
		/// </summary>
		Item = 192350021,
		/// <summary>
		/// Disconnect = 192350022
		/// </summary>
		Disconnect = 192350022,
		/// <summary>
		/// Timeout = 192350023
		/// </summary>
		Timeout = 192350023,
		/// <summary>
		/// End = 192350024
		/// </summary>
		End = 192350024,
		/// <summary>
		/// Default = 192350000
		/// </summary>
		Default = 192350000
	}

	public enum msdyn_eventtype
	{
		/// <summary>
		/// Default = 192350000
		/// </summary>
		Default = 192350000,
		/// <summary>
		/// QueueAssigned = 192350001
		/// </summary>
		QueueAssigned = 192350001,
		/// <summary>
		/// AgentAssigned = 192350002
		/// </summary>
		AgentAssigned = 192350002,
		/// <summary>
		/// AgentAccepted = 192350003
		/// </summary>
		AgentAccepted = 192350003,
		/// <summary>
		/// AgentInviteRejected = 192350004
		/// </summary>
		AgentInviteRejected = 192350004,
		/// <summary>
		/// SessionEnd = 192350005
		/// </summary>
		SessionEnd = 192350005,
		/// <summary>
		/// SessionCreated = 192350006
		/// </summary>
		SessionCreated = 192350006,
		/// <summary>
		/// AgentInviteTimeout = 192350007
		/// </summary>
		AgentInviteTimeout = 192350007,
		/// <summary>
		/// Escalated = 192350008
		/// </summary>
		Escalated = 192350008,
		/// <summary>
		/// ParticipantInvited = 192350009
		/// </summary>
		ParticipantInvited = 192350009,
		/// <summary>
		/// ParticipantInviteRejected = 192350010
		/// </summary>
		ParticipantInviteRejected = 192350010,
		/// <summary>
		/// ParticipantInviteAccepted = 192350011
		/// </summary>
		ParticipantInviteAccepted = 192350011,
		/// <summary>
		/// ParticipantInviteTimeout = 192350012
		/// </summary>
		ParticipantInviteTimeout = 192350012,
		/// <summary>
		/// ParticipantEnd = 192350013
		/// </summary>
		ParticipantEnd = 192350013,
		/// <summary>
		/// AgentDisconnected = 192350014
		/// </summary>
		AgentDisconnected = 192350014,
		/// <summary>
		/// AgentTimeout = 192350015
		/// </summary>
		AgentTimeout = 192350015,
		/// <summary>
		/// CustomerTimeout = 192350016
		/// </summary>
		CustomerTimeout = 192350016,
		/// <summary>
		/// CustomerDisconnected = 192350017
		/// </summary>
		CustomerDisconnected = 192350017,
		/// <summary>
		/// TransferedToAgent = 192350018
		/// </summary>
		TransferedToAgent = 192350018,
		/// <summary>
		/// TransferedToQueue = 192350019
		/// </summary>
		TransferedToQueue = 192350019,
		/// <summary>
		/// ParticipantLeft = 192350020
		/// </summary>
		ParticipantLeft = 192350020
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Xyz.LuckyMokey.Shared.Entities
{
	public partial class msdyn_sessionevent : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_eventinfo = "msdyn_eventinfo";
			public const string msdyn_eventreason = "msdyn_eventreason";
			public const string msdyn_eventtime = "msdyn_eventtime";
			public const string msdyn_eventtype = "msdyn_eventtype";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_omnichannelsession = "msdyn_omnichannelsession";
			public const string msdyn_sessioneventId = "msdyn_sessioneventid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_sessionevent";

		public const int EntityTypeCode = 10357;

		[DebuggerNonUserCode()]
		public msdyn_sessionevent()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sessionevent(Guid msdyn_sessioneventId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_sessioneventId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sessionevent(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sessionevent(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sessionevent(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_sessionevent(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Event Info</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventinfo? msdyn_eventinfo
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_eventinfo);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventinfo)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_eventinfo] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_eventinfo] = null;
			}
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Event Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventreason? msdyn_eventreason
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_eventreason);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventreason)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_eventreason] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_eventreason] = null;
			}
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Event Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? msdyn_eventtimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.msdyn_eventtime); }
			set { Entity.Attributes[Fields.msdyn_eventtime] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Event Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventtype? msdyn_eventtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_eventtype);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_sessioneventOptionSets.msdyn_eventtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_eventtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_eventtype] = null;
			}
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Omni Channel Session</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_omnichannelsession
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_omnichannelsession); }
			set { Entity.Attributes[Fields.msdyn_omnichannelsession] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Session event</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_sessioneventId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_sessioneventId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Session event</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_sessioneventOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_sessioneventOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Session event</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.msdyn_sessioneventOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.msdyn_sessioneventOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
