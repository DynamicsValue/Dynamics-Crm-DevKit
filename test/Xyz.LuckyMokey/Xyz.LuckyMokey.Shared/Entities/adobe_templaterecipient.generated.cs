//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets
{
	public enum adobe_accountoptions
	{
		/// <summary>
		/// Lead_Contact_Only = 648770000
		/// </summary>
		Lead_Contact_Only = 648770000,
		/// <summary>
		/// All_Contacts_associated_with_Account = 648770001
		/// </summary>
		All_Contacts_associated_with_Account = 648770001
	}

	public enum adobe_customentityoptions
	{
		/// <summary>
		/// Lead_Contact_Only = 648770000
		/// </summary>
		Lead_Contact_Only = 648770000,
		/// <summary>
		/// All_Contacts_associated_with_Entity = 648770001
		/// </summary>
		All_Contacts_associated_with_Entity = 648770001,
		/// <summary>
		/// Lead_Contact_from_associated_Account = 648770002
		/// </summary>
		Lead_Contact_from_associated_Account = 648770002,
		/// <summary>
		/// All_Contacts_from_associated_Account = 648770003
		/// </summary>
		All_Contacts_from_associated_Account = 648770003
	}

	public enum adobe_identityverification
	{
		/// <summary>
		/// EMAIL = 648770003
		/// </summary>
		EMAIL = 648770003,
		/// <summary>
		/// PHONE = 648770004
		/// </summary>
		PHONE = 648770004,
		/// <summary>
		/// PASSWORD = 648770000
		/// </summary>
		PASSWORD = 648770000,
		/// <summary>
		/// KNOWLEDGE_BASE = 648770001
		/// </summary>
		KNOWLEDGE_BASE = 648770001,
		/// <summary>
		/// WEB_IDENTITY = 648770002
		/// </summary>
		WEB_IDENTITY = 648770002
	}

	public enum adobe_opportunityoptions
	{
		/// <summary>
		/// Lead_Contact_Only = 648770000
		/// </summary>
		Lead_Contact_Only = 648770000,
		/// <summary>
		/// All_Contacts_Associated_With_Opportunity = 648770001
		/// </summary>
		All_Contacts_Associated_With_Opportunity = 648770001
	}

	public enum adobe_recipientrole
	{
		/// <summary>
		/// SIGNER = 648770000
		/// </summary>
		SIGNER = 648770000,
		/// <summary>
		/// APPROVER = 648770001
		/// </summary>
		APPROVER = 648770001,
		/// <summary>
		/// CC = 648770002
		/// </summary>
		CC = 648770002
	}

	public enum adobe_recipienttype
	{
		/// <summary>
		/// New = 648770000
		/// </summary>
		New = 648770000,
		/// <summary>
		/// Contact = 648770001
		/// </summary>
		Contact = 648770001,
		/// <summary>
		/// Lead = 648770002
		/// </summary>
		Lead = 648770002,
		/// <summary>
		/// User = 648770003
		/// </summary>
		User = 648770003
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Xyz.LuckyMokey.Shared.Entities
{
	public partial class adobe_templaterecipient : EntityBase
	{
		public struct Fields
		{
			public const string adobe_accountoptions = "adobe_accountoptions";
			public const string adobe_addrecipientmanually = "adobe_addrecipientmanually";
			public const string adobe_contactleadoptions = "adobe_contactleadoptions";
			public const string adobe_countrycode = "adobe_countrycode";
			public const string adobe_customentityoptions = "adobe_customentityoptions";
			public const string adobe_displayedorder = "adobe_displayedorder";
			public const string adobe_dynamicrecipient = "adobe_dynamicrecipient";
			public const string adobe_email = "adobe_email";
			public const string adobe_emaildisplay = "adobe_emaildisplay";
			public const string adobe_fullname = "adobe_fullname";
			public const string adobe_identityverification = "adobe_identityverification";
			public const string adobe_multiplerecipients = "adobe_multiplerecipients";
			public const string adobe_name = "adobe_name";
			public const string adobe_opportunityoptions = "adobe_opportunityoptions";
			public const string adobe_overridedefaultverification = "adobe_overridedefaultverification";
			public const string adobe_password = "adobe_password";
			public const string adobe_phonenumber = "adobe_phonenumber";
			public const string adobe_primarycontactonly = "adobe_primarycontactonly";
			public const string adobe_primaryentity = "adobe_primaryentity";
			public const string adobe_primaryentityschema = "adobe_primaryentityschema";
			public const string adobe_recipientorderint = "adobe_recipientorderint";
			public const string adobe_recipientrole = "adobe_recipientrole";
			public const string adobe_recipienttype = "adobe_recipienttype";
			public const string adobe_relatedcontact = "adobe_relatedcontact";
			public const string adobe_relatedentity = "adobe_relatedentity";
			public const string adobe_relatedlead = "adobe_relatedlead";
			public const string adobe_relateduser = "adobe_relateduser";
			public const string adobe_sequentialorder = "adobe_sequentialorder";
			public const string adobe_templateId = "adobe_templateid";
			public const string adobe_templaterecipientId = "adobe_templaterecipientid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "adobe_templaterecipient";

		public const int EntityTypeCode = 10404;

		[DebuggerNonUserCode()]
		public adobe_templaterecipient()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_templaterecipient(Guid adobe_templaterecipientId)
		{
			Entity = new Entity(EntityLogicalName, adobe_templaterecipientId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_templaterecipient(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_templaterecipient(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_templaterecipient(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_templaterecipient(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>accountoptions</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.adobe_accountoptions? adobe_accountoptions
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_accountoptions);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.adobe_accountoptions)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_accountoptions] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_accountoptions] = null;
			}
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Add Recipient Manually</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_addrecipientmanually
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_addrecipientmanually); }
			set { Entity.Attributes[Fields.adobe_addrecipientmanually] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>contactleadoptions</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_contactleadoptions
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_contactleadoptions); }
			set { Entity.Attributes[Fields.adobe_contactleadoptions] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>country code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adobe_countrycode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adobe_countrycode); }
			set { Entity.Attributes[Fields.adobe_countrycode] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>customentityoptions</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.adobe_customentityoptions? adobe_customentityoptions
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_customentityoptions);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.adobe_customentityoptions)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_customentityoptions] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_customentityoptions] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Recipient Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_displayedorder
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_displayedorder); }
			set { Entity.Attributes[Fields.adobe_displayedorder] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>dynamicrecipient</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_dynamicrecipient
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_dynamicrecipient); }
			set { Entity.Attributes[Fields.adobe_dynamicrecipient] = value; }
		}

		/// <summary>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>email</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_email
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_email); }
			set { Entity.Attributes[Fields.adobe_email] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 500</para>
		/// <para>Recipient Info</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_emaildisplay
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_emaildisplay); }
			set { Entity.Attributes[Fields.adobe_emaildisplay] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Full Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_fullname
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_fullname); }
			set { Entity.Attributes[Fields.adobe_fullname] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Identity Verification</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.adobe_identityverification? adobe_identityverification
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_identityverification);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.adobe_identityverification)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_identityverification] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_identityverification] = null;
			}
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>multiplerecipients</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_multiplerecipients
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_multiplerecipients); }
			set { Entity.Attributes[Fields.adobe_multiplerecipients] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_name); }
			set { Entity.Attributes[Fields.adobe_name] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>opportunityoptions</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.adobe_opportunityoptions? adobe_opportunityoptions
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_opportunityoptions);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.adobe_opportunityoptions)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_opportunityoptions] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_opportunityoptions] = null;
			}
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>override default verification</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_overridedefaultverification
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_overridedefaultverification); }
			set { Entity.Attributes[Fields.adobe_overridedefaultverification] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>password</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_password
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_password); }
			set { Entity.Attributes[Fields.adobe_password] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>phone number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_phonenumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_phonenumber); }
			set { Entity.Attributes[Fields.adobe_phonenumber] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>primarycontactonly</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_primarycontactonly
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_primarycontactonly); }
			set { Entity.Attributes[Fields.adobe_primarycontactonly] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Primary Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_primaryentity
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_primaryentity); }
			set { Entity.Attributes[Fields.adobe_primaryentity] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>primaryentityschema</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_primaryentityschema
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_primaryentityschema); }
			set { Entity.Attributes[Fields.adobe_primaryentityschema] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 1 - MaxValue: 50</para>
		/// <para>order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adobe_recipientorderint
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adobe_recipientorderint); }
			set { Entity.Attributes[Fields.adobe_recipientorderint] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Role</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.adobe_recipientrole? adobe_recipientrole
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_recipientrole);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.adobe_recipientrole)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_recipientrole] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_recipientrole] = null;
			}
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>recipient type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.adobe_recipienttype? adobe_recipienttype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_recipienttype);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.adobe_recipienttype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_recipienttype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_recipienttype] = null;
			}
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>related contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_relatedcontact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_relatedcontact); }
			set { Entity.Attributes[Fields.adobe_relatedcontact] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>related entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_relatedentity
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_relatedentity); }
			set { Entity.Attributes[Fields.adobe_relatedentity] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>related lead</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_relatedlead
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_relatedlead); }
			set { Entity.Attributes[Fields.adobe_relatedlead] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>related user</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_relateduser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_relateduser); }
			set { Entity.Attributes[Fields.adobe_relateduser] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>sequentialorder</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_sequentialorder
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_sequentialorder); }
			set { Entity.Attributes[Fields.adobe_sequentialorder] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for Agreement Template associated with template recipient.</para>
		/// <para>Required - Lookup</para>
		/// <para>template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_templateId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_templateId); }
			set { Entity.Attributes[Fields.adobe_templateId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>template recipient</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid adobe_templaterecipientId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.adobe_templaterecipientId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the template recipient</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the template recipient</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_templaterecipientOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
