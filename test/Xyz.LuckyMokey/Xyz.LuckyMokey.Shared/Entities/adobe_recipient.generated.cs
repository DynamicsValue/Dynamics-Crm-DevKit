//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets
{
	public enum adobe_identityverification
	{
		/// <summary>
		/// EMAIL = 648770003
		/// </summary>
		EMAIL = 648770003,
		/// <summary>
		/// PHONE = 648770004
		/// </summary>
		PHONE = 648770004,
		/// <summary>
		/// PASSWORD = 648770000
		/// </summary>
		PASSWORD = 648770000,
		/// <summary>
		/// KNOWLEDGE_BASE = 648770001
		/// </summary>
		KNOWLEDGE_BASE = 648770001,
		/// <summary>
		/// WEB_IDENTITY = 648770002
		/// </summary>
		WEB_IDENTITY = 648770002
	}

	public enum adobe_recipientcrmtype
	{
		/// <summary>
		/// New = 648770000
		/// </summary>
		New = 648770000,
		/// <summary>
		/// Contact = 648770001
		/// </summary>
		Contact = 648770001,
		/// <summary>
		/// Lead = 648770002
		/// </summary>
		Lead = 648770002,
		/// <summary>
		/// User = 648770003
		/// </summary>
		User = 648770003
	}

	public enum adobe_recipientlookuptype
	{
		/// <summary>
		/// Lead = 648770000
		/// </summary>
		Lead = 648770000,
		/// <summary>
		/// Contact = 648770001
		/// </summary>
		Contact = 648770001,
		/// <summary>
		/// User = 648770002
		/// </summary>
		User = 648770002
	}

	public enum adobe_recipientrole
	{
		/// <summary>
		/// SIGNER = 648770000
		/// </summary>
		SIGNER = 648770000,
		/// <summary>
		/// APPROVER = 648770001
		/// </summary>
		APPROVER = 648770001,
		/// <summary>
		/// CC = 648770002
		/// </summary>
		CC = 648770002
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Xyz.LuckyMokey.Shared.Entities
{
	public partial class adobe_recipient : EntityBase
	{
		public struct Fields
		{
			public const string adobe_AgreementId = "adobe_agreementid";
			public const string adobe_countrycode = "adobe_countrycode";
			public const string adobe_datesigned = "adobe_datesigned";
			public const string adobe_displayedorder = "adobe_displayedorder";
			public const string adobe_emailaddress = "adobe_emailaddress";
			public const string adobe_fullname = "adobe_fullname";
			public const string adobe_hassigned = "adobe_hassigned";
			public const string adobe_identityverification = "adobe_identityverification";
			public const string adobe_name = "adobe_name";
			public const string adobe_overridedefaultverification = "adobe_overridedefaultverification";
			public const string adobe_parentagreementstatus = "adobe_parentagreementstatus";
			public const string adobe_participantid = "adobe_participantid";
			public const string adobe_password = "adobe_password";
			public const string adobe_phone = "adobe_phone";
			public const string adobe_recipientcrmtype = "adobe_recipientcrmtype";
			public const string adobe_recipientId = "adobe_recipientid";
			public const string adobe_recipientlookuptype = "adobe_recipientlookuptype";
			public const string adobe_recipientorderbackup = "adobe_recipientorderbackup";
			public const string adobe_recipientorderint = "adobe_recipientorderint";
			public const string adobe_recipientrole = "adobe_recipientrole";
			public const string adobe_relatedcontact = "adobe_relatedcontact";
			public const string adobe_relatedlead = "adobe_relatedlead";
			public const string adobe_relateduser = "adobe_relateduser";
			public const string adobe_signingurl = "adobe_signingurl";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string processid = "processid";
			public const string stageid = "stageid";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string traversedpath = "traversedpath";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "adobe_recipient";

		public const int EntityTypeCode = 10402;

		[DebuggerNonUserCode()]
		public adobe_recipient()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_recipient(Guid adobe_recipientId)
		{
			Entity = new Entity(EntityLogicalName, adobe_recipientId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_recipient(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_recipient(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_recipient(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_recipient(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier for Agreement associated with Recipient.</para>
		/// <para>Required - Lookup</para>
		/// <para>Agreement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_AgreementId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_AgreementId); }
			set { Entity.Attributes[Fields.adobe_AgreementId] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>countrycode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_countrycode
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_countrycode); }
			set { Entity.Attributes[Fields.adobe_countrycode] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Date Signed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adobe_datesignedUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adobe_datesigned); }
			set { Entity.Attributes[Fields.adobe_datesigned] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_displayedorder
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_displayedorder); }
			set { Entity.Attributes[Fields.adobe_displayedorder] = value; }
		}

		/// <summary>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Email Address</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_emailaddress
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_emailaddress); }
			set { Entity.Attributes[Fields.adobe_emailaddress] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Full Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_fullname
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_fullname); }
			set { Entity.Attributes[Fields.adobe_fullname] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Action Completed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_hassigned
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_hassigned); }
			set { Entity.Attributes[Fields.adobe_hassigned] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Identity Verification</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets.adobe_identityverification? adobe_identityverification
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_identityverification);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets.adobe_identityverification)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_identityverification] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_identityverification] = null;
			}
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_name); }
			set { Entity.Attributes[Fields.adobe_name] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Override Default Verification</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_overridedefaultverification
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_overridedefaultverification); }
			set { Entity.Attributes[Fields.adobe_overridedefaultverification] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Parent Agreement Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_parentagreementstatus
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_parentagreementstatus); }
			set { Entity.Attributes[Fields.adobe_parentagreementstatus] = value; }
		}

		/// <summary>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Participant id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_participantid
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_participantid); }
			set { Entity.Attributes[Fields.adobe_participantid] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Password</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_password
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_password); }
			set { Entity.Attributes[Fields.adobe_password] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Phone</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_phone
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_phone); }
			set { Entity.Attributes[Fields.adobe_phone] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Recipient Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets.adobe_recipientcrmtype? adobe_recipientcrmtype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_recipientcrmtype);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets.adobe_recipientcrmtype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_recipientcrmtype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_recipientcrmtype] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Recipient</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid adobe_recipientId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.adobe_recipientId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Recipient Lookup Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets.adobe_recipientlookuptype? adobe_recipientlookuptype
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_recipientlookuptype);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets.adobe_recipientlookuptype)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_recipientlookuptype] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_recipientlookuptype] = null;
			}
		}

		/// <summary>
		/// <para>Required - Integer - MinValue: 1 - MaxValue: 50</para>
		/// <para>Recipient Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adobe_recipientorderbackup
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adobe_recipientorderbackup); }
			set { Entity.Attributes[Fields.adobe_recipientorderbackup] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 1 - MaxValue: 50</para>
		/// <para>Recipient Order Int</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adobe_recipientorderint
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adobe_recipientorderint); }
			set { Entity.Attributes[Fields.adobe_recipientorderint] = value; }
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Recipient Role</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets.adobe_recipientrole? adobe_recipientrole
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.adobe_recipientrole);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets.adobe_recipientrole)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.adobe_recipientrole] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.adobe_recipientrole] = null;
			}
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Related Contact</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_relatedcontact
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_relatedcontact); }
			set { Entity.Attributes[Fields.adobe_relatedcontact] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Related Lead</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_relatedlead
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_relatedlead); }
			set { Entity.Attributes[Fields.adobe_relatedlead] = value; }
		}

		/// <summary>
		/// <para>Lookup</para>
		/// <para>Related User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference adobe_relateduser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.adobe_relateduser); }
			set { Entity.Attributes[Fields.adobe_relateduser] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Signing Url</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_signingurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_signingurl); }
			set { Entity.Attributes[Fields.adobe_signingurl] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Contains the id of the process associated with the entity.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Process Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? processid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.processid); }
			set { Entity.Attributes[Fields.processid] = value; }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}

		/// <summary>
		/// <para>Status of the Recipient</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Recipient</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_recipientOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
