//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Xyz.LuckyMokey.Shared.Entities.adobe_integrationsettingsOptionSets
{
	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Xyz.LuckyMokey.Shared.Entities
{
	public partial class adobe_integrationsettings : EntityBase
	{
		public struct Fields
		{
			public const string adobe_ActivateandSetupAdobeSign = "adobe_activateandsetupadobesign";
			public const string adobe_apiaccesspoint = "adobe_apiaccesspoint";
			public const string adobe_AttachAuditTrail = "adobe_attachaudittrail";
			public const string adobe_AttachCombinedAgreement = "adobe_attachcombinedagreement";
			public const string adobe_AttachImages = "adobe_attachimages";
			public const string adobe_AttachSignedAgreement = "adobe_attachsignedagreement";
			public const string adobe_AutoProvisionUser = "adobe_autoprovisionuser";
			public const string adobe_crmversion = "adobe_crmversion";
			public const string adobe_data0 = "adobe_data0";
			public const string adobe_data1 = "adobe_data1";
			public const string adobe_data2 = "adobe_data2";
			public const string adobe_data3 = "adobe_data3";
			public const string adobe_EnableLinkedInSalesNavigator = "adobe_enablelinkedinsalesnavigator";
			public const string adobe_expiration = "adobe_expiration";
			public const string adobe_integrationsettingsId = "adobe_integrationsettingsid";
			public const string adobe_keynotvalid = "adobe_keynotvalid";
			public const string adobe_migratedagreements = "adobe_migratedagreements";
			public const string adobe_migrateddatamappings = "adobe_migrateddatamappings";
			public const string adobe_migratedusertemplates = "adobe_migratedusertemplates";
			public const string adobe_name = "adobe_name";
			public const string adobe_newagreements = "adobe_newagreements";
			public const string adobe_OAuthCode = "adobe_oauthcode";
			public const string adobe_serverurl = "adobe_serverurl";
			public const string adobe_settings_unique_id = "adobe_settings_unique_id";
			public const string adobe_SetupFirstDataMapping = "adobe_setupfirstdatamapping";
			public const string adobe_SetupFirstTemplate = "adobe_setupfirsttemplate";
			public const string adobe_timestamp = "adobe_timestamp";
			public const string adobe_versionnumber = "adobe_versionnumber";
			public const string adobe_xEchoSignTest = "adobe_xechosigntest";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "adobe_integrationsettings";

		public const int EntityTypeCode = 10400;

		[DebuggerNonUserCode()]
		public adobe_integrationsettings()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_integrationsettings(Guid adobe_integrationsettingsId)
		{
			Entity = new Entity(EntityLogicalName, adobe_integrationsettingsId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_integrationsettings(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_integrationsettings(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_integrationsettings(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public adobe_integrationsettings(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Activate and Setup Adobe Sign</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_ActivateandSetupAdobeSign
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_ActivateandSetupAdobeSign); }
			set { Entity.Attributes[Fields.adobe_ActivateandSetupAdobeSign] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>apiaccesspoint</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_apiaccesspoint
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_apiaccesspoint); }
			set { Entity.Attributes[Fields.adobe_apiaccesspoint] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Attach Audit Trail</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_AttachAuditTrail
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_AttachAuditTrail); }
			set { Entity.Attributes[Fields.adobe_AttachAuditTrail] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Attach Combined Agreement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_AttachCombinedAgreement
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_AttachCombinedAgreement); }
			set { Entity.Attributes[Fields.adobe_AttachCombinedAgreement] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Attach Images</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_AttachImages
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_AttachImages); }
			set { Entity.Attributes[Fields.adobe_AttachImages] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Attach Signed Agreement</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_AttachSignedAgreement
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_AttachSignedAgreement); }
			set { Entity.Attributes[Fields.adobe_AttachSignedAgreement] = value; }
		}

		/// <summary>
		/// <para>Allow your Dynamics 365 users to be automatically provisioned to use Adobe Sign</para>
		/// <para>Boolean</para>
		/// <para>Auto Provision User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_AutoProvisionUser
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_AutoProvisionUser); }
			set { Entity.Attributes[Fields.adobe_AutoProvisionUser] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>crmversion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_crmversion
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_crmversion); }
			set { Entity.Attributes[Fields.adobe_crmversion] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>data0</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_data0
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_data0); }
			set { Entity.Attributes[Fields.adobe_data0] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>data1</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_data1
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_data1); }
			set { Entity.Attributes[Fields.adobe_data1] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>data2</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_data2
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_data2); }
			set { Entity.Attributes[Fields.adobe_data2] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>data3</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_data3
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_data3); }
			set { Entity.Attributes[Fields.adobe_data3] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Enable LinkedIn Sales Navigator</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_EnableLinkedInSalesNavigator
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_EnableLinkedInSalesNavigator); }
			set { Entity.Attributes[Fields.adobe_EnableLinkedInSalesNavigator] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>expiration</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adobe_expiration
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adobe_expiration); }
			set { Entity.Attributes[Fields.adobe_expiration] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Integration Settings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid adobe_integrationsettingsId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.adobe_integrationsettingsId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>keynotvalid</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_keynotvalid
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_keynotvalid); }
			set { Entity.Attributes[Fields.adobe_keynotvalid] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>migrated agreements</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adobe_migratedagreements
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adobe_migratedagreements); }
			set { Entity.Attributes[Fields.adobe_migratedagreements] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>migrated data mappings</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adobe_migrateddatamappings
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adobe_migrateddatamappings); }
			set { Entity.Attributes[Fields.adobe_migrateddatamappings] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>migrated user templates</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adobe_migratedusertemplates
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adobe_migratedusertemplates); }
			set { Entity.Attributes[Fields.adobe_migratedusertemplates] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_name); }
			set { Entity.Attributes[Fields.adobe_name] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 1000</para>
		/// <para>newagreements</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_newagreements
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_newagreements); }
			set { Entity.Attributes[Fields.adobe_newagreements] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>OAuth Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_OAuthCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_OAuthCode); }
			set { Entity.Attributes[Fields.adobe_OAuthCode] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 1000</para>
		/// <para>Server Url</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_serverurl
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_serverurl); }
			set { Entity.Attributes[Fields.adobe_serverurl] = value; }
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>Settings Unique Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_settings_unique_id
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_settings_unique_id); }
			set { Entity.Attributes[Fields.adobe_settings_unique_id] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Setup First Data Mapping</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_SetupFirstDataMapping
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_SetupFirstDataMapping); }
			set { Entity.Attributes[Fields.adobe_SetupFirstDataMapping] = value; }
		}

		/// <summary>
		/// <para>Boolean</para>
		/// <para>Setup First Template</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? adobe_SetupFirstTemplate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.adobe_SetupFirstTemplate); }
			set { Entity.Attributes[Fields.adobe_SetupFirstTemplate] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>timestamp</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? adobe_timestampUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.adobe_timestamp); }
			set { Entity.Attributes[Fields.adobe_timestamp] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String - MaxLength: 4000</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string adobe_versionnumber
		{
			get { return Entity.GetAttributeValue<string>(Fields.adobe_versionnumber); }
		}

		/// <summary>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>xEchoSignTest</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? adobe_xEchoSignTest
		{
			get { return Entity.GetAttributeValue<int?>(Fields.adobe_xEchoSignTest); }
			set { Entity.Attributes[Fields.adobe_xEchoSignTest] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Integration Settings</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_integrationsettingsOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_integrationsettingsOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Integration Settings</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.adobe_integrationsettingsOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.adobe_integrationsettingsOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
