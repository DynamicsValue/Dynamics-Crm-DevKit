//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets
{
	public enum BusinessProcessType
	{
		/// <summary>
		/// Business_Flow = 0
		/// </summary>
		Business_Flow = 0,
		/// <summary>
		/// Task_Flow = 1
		/// </summary>
		Task_Flow = 1
	}

	public enum Category
	{
		/// <summary>
		/// Workflow = 0
		/// </summary>
		Workflow = 0,
		/// <summary>
		/// Dialog = 1
		/// </summary>
		Dialog = 1,
		/// <summary>
		/// Business_Rule = 2
		/// </summary>
		Business_Rule = 2,
		/// <summary>
		/// Action = 3
		/// </summary>
		Action = 3,
		/// <summary>
		/// Business_Process_Flow = 4
		/// </summary>
		Business_Process_Flow = 4,
		/// <summary>
		/// Modern_Flow = 5
		/// </summary>
		Modern_Flow = 5,
		/// <summary>
		/// Reserved = 6
		/// </summary>
		Reserved = 6
	}

	public enum ComponentState
	{
		/// <summary>
		/// Published = 0
		/// </summary>
		Published = 0,
		/// <summary>
		/// Unpublished = 1
		/// </summary>
		Unpublished = 1,
		/// <summary>
		/// Deleted = 2
		/// </summary>
		Deleted = 2,
		/// <summary>
		/// Deleted_Unpublished = 3
		/// </summary>
		Deleted_Unpublished = 3
	}

	public enum CreateStage
	{
		/// <summary>
		/// Pre_operation = 20
		/// </summary>
		Pre_operation = 20,
		/// <summary>
		/// Post_operation = 40
		/// </summary>
		Post_operation = 40
	}

	public enum DeleteStage
	{
		/// <summary>
		/// Pre_operation = 20
		/// </summary>
		Pre_operation = 20,
		/// <summary>
		/// Post_operation = 40
		/// </summary>
		Post_operation = 40
	}

	public enum Mode
	{
		/// <summary>
		/// Background = 0
		/// </summary>
		Background = 0,
		/// <summary>
		/// Real_time = 1
		/// </summary>
		Real_time = 1
	}

	public enum ProcessTriggerScope
	{
		/// <summary>
		/// Form = 1
		/// </summary>
		Form = 1,
		/// <summary>
		/// Entity = 2
		/// </summary>
		Entity = 2
	}

	public enum RunAs
	{
		/// <summary>
		/// Owner = 0
		/// </summary>
		Owner = 0,
		/// <summary>
		/// Calling_User = 1
		/// </summary>
		Calling_User = 1
	}

	public enum Scope
	{
		/// <summary>
		/// User = 1
		/// </summary>
		User = 1,
		/// <summary>
		/// Business_Unit = 2
		/// </summary>
		Business_Unit = 2,
		/// <summary>
		/// Parent_Child_Business_Units = 3
		/// </summary>
		Parent_Child_Business_Units = 3,
		/// <summary>
		/// Organization = 4
		/// </summary>
		Organization = 4
	}

	public enum StateCode
	{
		/// <summary>
		/// Draft = 0
		/// </summary>
		Draft = 0,
		/// <summary>
		/// Activated = 1
		/// </summary>
		Activated = 1
	}

	public enum StatusCode
	{
		/// <summary>
		/// Draft = 1
		/// </summary>
		Draft = 1,
		/// <summary>
		/// Activated = 2
		/// </summary>
		Activated = 2
	}

	public enum Type
	{
		/// <summary>
		/// Definition = 1
		/// </summary>
		Definition = 1,
		/// <summary>
		/// Activation = 2
		/// </summary>
		Activation = 2,
		/// <summary>
		/// Template = 3
		/// </summary>
		Template = 3
	}

	public enum UIFlowType
	{
		/// <summary>
		/// Desktop = 0
		/// </summary>
		Desktop = 0,
		/// <summary>
		/// Selenium_IDE = 1
		/// </summary>
		Selenium_IDE = 1,
		/// <summary>
		/// PowerShell = 2
		/// </summary>
		PowerShell = 2
	}

	public enum UpdateStage
	{
		/// <summary>
		/// Pre_operation = 20
		/// </summary>
		Pre_operation = 20,
		/// <summary>
		/// Post_operation = 40
		/// </summary>
		Post_operation = 40
	}
}

namespace Xyz.LuckyMokey.Shared.Entities
{
	public partial class Workflow : EntityBase
	{
		public struct Fields
		{
			public const string ActiveWorkflowId = "activeworkflowid";
			public const string AsyncAutoDelete = "asyncautodelete";
			public const string BusinessProcessType = "businessprocesstype";
			public const string Category = "category";
			public const string ClientData = "clientdata";
			public const string ComponentState = "componentstate";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreateStage = "createstage";
			public const string DeleteStage = "deletestage";
			public const string Description = "description";
			public const string EntityImageId = "entityimageid";
			public const string FormId = "formid";
			public const string InputParameters = "inputparameters";
			public const string IntroducedVersion = "introducedversion";
			public const string IsCrmUIWorkflow = "iscrmuiworkflow";
			public const string IsManaged = "ismanaged";
			public const string IsTransacted = "istransacted";
			public const string LanguageCode = "languagecode";
			public const string Mode = "mode";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string Name = "name";
			public const string OnDemand = "ondemand";
			public const string OverwriteTime = "overwritetime";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string ParentWorkflowId = "parentworkflowid";
			public const string PluginTypeId = "plugintypeid";
			public const string PrimaryEntity = "primaryentity";
			public const string ProcessOrder = "processorder";
			public const string ProcessRoleAssignment = "processroleassignment";
			public const string ProcessTriggerFormId = "processtriggerformid";
			public const string ProcessTriggerScope = "processtriggerscope";
			public const string Rank = "rank";
			public const string RendererObjectTypeCode = "rendererobjecttypecode";
			public const string RunAs = "runas";
			public const string Scope = "scope";
			public const string SdkMessageId = "sdkmessageid";
			public const string SolutionId = "solutionid";
			public const string stageid = "stageid";
			public const string StateCode = "statecode";
			public const string StatusCode = "statuscode";
			public const string Subprocess = "subprocess";
			public const string SupportingSolutionId = "supportingsolutionid";
			public const string SyncWorkflowLogOnFailure = "syncworkflowlogonfailure";
			public const string traversedpath = "traversedpath";
			public const string TriggerOnCreate = "triggeroncreate";
			public const string TriggerOnDelete = "triggerondelete";
			public const string TriggerOnUpdateAttributeList = "triggeronupdateattributelist";
			public const string Type = "type";
			public const string UIData = "uidata";
			public const string UIFlowType = "uiflowtype";
			public const string UniqueName = "uniquename";
			public const string UpdateStage = "updatestage";
			public const string VersionNumber = "versionnumber";
			public const string WorkflowId = "workflowid";
			public const string WorkflowIdUnique = "workflowidunique";
			public const string Xaml = "xaml";
		}

		public const string EntityLogicalName = "workflow";

		public const int EntityTypeCode = 4703;

		[DebuggerNonUserCode()]
		public Workflow()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Workflow(Guid WorkflowId)
		{
			Entity = new Entity(EntityLogicalName, WorkflowId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Workflow(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Workflow(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Workflow(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Workflow(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the latest activation record for the process.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Active Process ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ActiveWorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ActiveWorkflowId); }
		}

		/// <summary>
		/// <para>Indicates whether the asynchronous system job is automatically deleted on completion.</para>
		/// <para>Boolean</para>
		/// <para>Delete Job On Completion</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? AsyncAutoDelete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.AsyncAutoDelete); }
			set { Entity.Attributes[Fields.AsyncAutoDelete] = value; }
		}

		/// <summary>
		/// <para>Business Process Type.</para>
		/// <para>Picklist</para>
		/// <para>Business Process Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.BusinessProcessType? BusinessProcessType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.BusinessProcessType);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.BusinessProcessType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.BusinessProcessType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.BusinessProcessType] = null;
			}
		}

		/// <summary>
		/// <para>Category of the process.</para>
		/// <para>Picklist</para>
		/// <para>Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.Category? Category
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Category);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.Category)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Category] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Category] = null;
			}
		}

		/// <summary>
		/// <para>Business logic converted into client data</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Client Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ClientData
		{
			get { return Entity.GetAttributeValue<string>(Fields.ClientData); }
			set { Entity.Attributes[Fields.ClientData] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Picklist</para>
		/// <para>Component State</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.ComponentState? ComponentState
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ComponentState);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.ComponentState)value.Value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the process.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the process was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the process.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Stage of the process when triggered on Create.</para>
		/// <para>Picklist</para>
		/// <para>Create Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.CreateStage? CreateStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.CreateStage);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.CreateStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.CreateStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.CreateStage] = null;
			}
		}

		/// <summary>
		/// <para>Stage of the process when triggered on Delete.</para>
		/// <para>Picklist</para>
		/// <para>Delete stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.DeleteStage? DeleteStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.DeleteStage);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.DeleteStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.DeleteStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.DeleteStage] = null;
			}
		}

		/// <summary>
		/// <para>Description of the process.</para>
		/// <para>Memo - MaxLength: 100000</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Description
		{
			get { return Entity.GetAttributeValue<string>(Fields.Description); }
			set { Entity.Attributes[Fields.Description] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Entity Image Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? EntityImageId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.EntityImageId); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated form.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>Form ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? FormId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.FormId); }
			set { Entity.Attributes[Fields.FormId] = value; }
		}

		/// <summary>
		/// <para>Input parameters to the process.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Input Parameters</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string InputParameters
		{
			get { return Entity.GetAttributeValue<string>(Fields.InputParameters); }
			set { Entity.Attributes[Fields.InputParameters] = value; }
		}

		/// <summary>
		/// <para>Version in which the form is introduced.</para>
		/// <para>String - MaxLength: 48</para>
		/// <para>Introduced Version</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string IntroducedVersion
		{
			get { return Entity.GetAttributeValue<string>(Fields.IntroducedVersion); }
			set { Entity.Attributes[Fields.IntroducedVersion] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the process was created using the Microsoft Dynamics 365 Web application.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is CRM Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsCrmUIWorkflow
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsCrmUIWorkflow); }
		}

		/// <summary>
		/// <para>Indicates whether the solution component is part of a managed solution.</para>
		/// <para>ReadOnly - Boolean</para>
		/// <para>Is Managed</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsManaged
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsManaged); }
		}

		/// <summary>
		/// <para>Whether or not the steps in the process are executed in a single transaction.</para>
		/// <para>Boolean</para>
		/// <para>Is Transacted</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsTransacted
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsTransacted); }
			set { Entity.Attributes[Fields.IsTransacted] = value; }
		}

		/// <summary>
		/// <para>Language of the process.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Language</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? LanguageCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.LanguageCode); }
			set { Entity.Attributes[Fields.LanguageCode] = value; }
		}

		/// <summary>
		/// <para>Shows the mode of the process.</para>
		/// <para>Picklist</para>
		/// <para>Mode</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.Mode? Mode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Mode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.Mode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Mode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Mode] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the process.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the process was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the process.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Name of the process.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Process Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Name
		{
			get { return Entity.GetAttributeValue<string>(Fields.Name); }
			set { Entity.Attributes[Fields.Name] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the process is able to run as an on-demand process.</para>
		/// <para>Boolean</para>
		/// <para>Run as On Demand</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? OnDemand
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.OnDemand); }
			set { Entity.Attributes[Fields.OnDemand] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Overwrite Time</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverwriteTimeUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverwriteTime); }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the process.</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the process.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the process.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the process.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Unique identifier of the definition for process activation.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>Parent Process ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ParentWorkflowId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ParentWorkflowId); }
		}

		/// <summary>
		/// <para>Unique identifier of the plug-in type.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference PluginTypeId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.PluginTypeId); }
		}

		/// <summary>
		/// <para>Primary entity for the process. The process can be associated for one or more SDK operations defined on the primary entity.</para>
		/// <para>EntityName</para>
		/// <para>Primary Entity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string PrimaryEntity
		{
			get { return Entity.GetAttributeValue<string>(Fields.PrimaryEntity); }
			set { Entity.Attributes[Fields.PrimaryEntity] = value; }
		}

		/// <summary>
		/// <para>Type the business process flow order.</para>
		/// <para>Integer - MinValue: 0 - MaxValue: 2,147,483,647</para>
		/// <para>Process Order</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ProcessOrder
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ProcessOrder); }
			set { Entity.Attributes[Fields.ProcessOrder] = value; }
		}

		/// <summary>
		/// <para>Contains the role assignment for the process.</para>
		/// <para>Memo - MaxLength: 1048576</para>
		/// <para>Role assignment for Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ProcessRoleAssignment
		{
			get { return Entity.GetAttributeValue<string>(Fields.ProcessRoleAssignment); }
			set { Entity.Attributes[Fields.ProcessRoleAssignment] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the associated form for process trigger.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>ProcessTriggerFormId</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? ProcessTriggerFormId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.ProcessTriggerFormId); }
			set { Entity.Attributes[Fields.ProcessTriggerFormId] = value; }
		}

		/// <summary>
		/// <para>Scope of the process trigger.</para>
		/// <para>Picklist</para>
		/// <para>ProcessTriggerScope</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.ProcessTriggerScope? ProcessTriggerScope
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.ProcessTriggerScope);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.ProcessTriggerScope)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.ProcessTriggerScope] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.ProcessTriggerScope] = null;
			}
		}

		/// <summary>
		/// <para>Indicates the rank for order of execution for the synchronous workflow.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Rank</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? Rank
		{
			get { return Entity.GetAttributeValue<int?>(Fields.Rank); }
			set { Entity.Attributes[Fields.Rank] = value; }
		}

		/// <summary>
		/// <para>The renderer type of Workflow</para>
		/// <para>EntityName</para>
		/// <para>Renderer Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string RendererObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.RendererObjectTypeCode); }
			set { Entity.Attributes[Fields.RendererObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Specifies the system user account under which a workflow executes.</para>
		/// <para>Picklist</para>
		/// <para>Run As User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.RunAs? RunAs
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.RunAs);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.RunAs)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.RunAs] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.RunAs] = null;
			}
		}

		/// <summary>
		/// <para>Scope of the process.</para>
		/// <para>Picklist</para>
		/// <para>Scope</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.Scope? Scope
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Scope);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.Scope)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Scope] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Scope] = null;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the SDK Message associated with this workflow.</para>
		/// <para>ReadOnly - Lookup</para>
		/// <para>SDK Message</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference SdkMessageId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.SdkMessageId); }
		}

		/// <summary>
		/// <para>Unique identifier of the associated solution.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SolutionId); }
		}

		/// <summary>
		/// <para>Contains the id of the stage where the entity is located.</para>
		/// <para>Uniqueidentifier</para>
		/// <para>(Deprecated) Stage Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? stageid
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.stageid); }
			set { Entity.Attributes[Fields.stageid] = value; }
		}

		/// <summary>
		/// <para>Status of the process.</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.StateCode? StateCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StateCode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.StateCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StateCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StateCode] = null;
			}
		}

		/// <summary>
		/// <para>Additional information about status of the process.</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.StatusCode? StatusCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.StatusCode);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.StatusCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.StatusCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.StatusCode] = null;
			}
		}

		/// <summary>
		/// <para>Indicates whether the process can be included in other processes as a child process.</para>
		/// <para>Boolean</para>
		/// <para>Is Child Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? Subprocess
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.Subprocess); }
			set { Entity.Attributes[Fields.Subprocess] = value; }
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para>Solution</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? SupportingSolutionId
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.SupportingSolutionId); }
		}

		/// <summary>
		/// <para>Select whether synchronous workflow failures will be saved to log files.</para>
		/// <para>Boolean</para>
		/// <para>Log upon Failure</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? SyncWorkflowLogOnFailure
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.SyncWorkflowLogOnFailure); }
			set { Entity.Attributes[Fields.SyncWorkflowLogOnFailure] = value; }
		}

		/// <summary>
		/// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
		/// <para>String - MaxLength: 1250</para>
		/// <para>(Deprecated) Traversed Path</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string traversedpath
		{
			get { return Entity.GetAttributeValue<string>(Fields.traversedpath); }
			set { Entity.Attributes[Fields.traversedpath] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the process will be triggered when the primary entity is created.</para>
		/// <para>Boolean</para>
		/// <para>Trigger On Create</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TriggerOnCreate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TriggerOnCreate); }
			set { Entity.Attributes[Fields.TriggerOnCreate] = value; }
		}

		/// <summary>
		/// <para>Indicates whether the process will be triggered on deletion of the primary entity.</para>
		/// <para>Boolean</para>
		/// <para>Trigger On Delete</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? TriggerOnDelete
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.TriggerOnDelete); }
			set { Entity.Attributes[Fields.TriggerOnDelete] = value; }
		}

		/// <summary>
		/// <para>Attributes that trigger the process when updated.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Trigger On Update Attribute List</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string TriggerOnUpdateAttributeList
		{
			get { return Entity.GetAttributeValue<string>(Fields.TriggerOnUpdateAttributeList); }
			set { Entity.Attributes[Fields.TriggerOnUpdateAttributeList] = value; }
		}

		/// <summary>
		/// <para>Type of the process.</para>
		/// <para>Picklist</para>
		/// <para>Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.Type? Type
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.Type);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.Type)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.Type] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.Type] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Memo - MaxLength: 1073741823</para>
		/// <para>UI Data</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UIData
		{
			get { return Entity.GetAttributeValue<string>(Fields.UIData); }
		}

		/// <summary>
		/// <para>Type of the UI Flow process.</para>
		/// <para>Picklist</para>
		/// <para>UI Flow Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.UIFlowType? UIFlowType
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UIFlowType);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.UIFlowType)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UIFlowType] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UIFlowType] = null;
			}
		}

		/// <summary>
		/// <para>Unique name of the process</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Unique Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string UniqueName
		{
			get { return Entity.GetAttributeValue<string>(Fields.UniqueName); }
			set { Entity.Attributes[Fields.UniqueName] = value; }
		}

		/// <summary>
		/// <para>Select the stage a process will be triggered on update.</para>
		/// <para>Picklist</para>
		/// <para>Update Stage</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.UpdateStage? UpdateStage
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.UpdateStage);
				if (value == null) return null;
				return (Xyz.LuckyMokey.Shared.Entities.WorkflowOptionSets.UpdateStage)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.UpdateStage] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.UpdateStage] = null;
			}
		}

		/// <summary>
		/// <para>ReadOnly - BigInt</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}

		/// <summary>
		/// <para>Unique identifier of the process.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Process</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid WorkflowId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.WorkflowId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>ReadOnly - Uniqueidentifier</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid? WorkflowIdUnique
		{
			get { return Entity.GetAttributeValue<Guid?>(Fields.WorkflowIdUnique); }
		}

		/// <summary>
		/// <para>XAML that defines the process.</para>
		/// <para>Required - Memo - MaxLength: 1073741823</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Xaml
		{
			get { return Entity.GetAttributeValue<string>(Fields.Xaml); }
			set { Entity.Attributes[Fields.Xaml] = value; }
		}

		/// <summary>
		/// <para>byte[]</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public byte[] EntityImage
		{
			get { return Entity.GetAttributeValue<byte[]>("entityimage"); }
			set { Entity.Attributes["entityimage"] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - String</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string EntityImageUrl
		{
			get { return Entity.GetAttributeValue<string>("entityimage_url"); }
		}
	}
}
