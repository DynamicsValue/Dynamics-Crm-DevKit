//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.msdyn_conversationactionlocaleOptionSets
{
	public enum msdyn_Locale_picklist
	{
		/// <summary>
		/// ar-SA = 1025
		/// </summary>
		arSA = 1025,
		/// <summary>
		/// bg-BG = 1026
		/// </summary>
		bgBG = 1026,
		/// <summary>
		/// ca-ES = 1027
		/// </summary>
		caES = 1027,
		/// <summary>
		/// cs-CZ = 1029
		/// </summary>
		csCZ = 1029,
		/// <summary>
		/// da-DK = 1030
		/// </summary>
		daDK = 1030,
		/// <summary>
		/// de-DE = 1031
		/// </summary>
		deDE = 1031,
		/// <summary>
		/// el-GR = 1032
		/// </summary>
		elGR = 1032,
		/// <summary>
		/// en-US = 1033
		/// </summary>
		enUS = 1033,
		/// <summary>
		/// es-ES = 3082
		/// </summary>
		esES = 3082,
		/// <summary>
		/// et-EE = 1061
		/// </summary>
		etEE = 1061,
		/// <summary>
		/// eu-ES = 1069
		/// </summary>
		euES = 1069,
		/// <summary>
		/// fi-FI = 1035
		/// </summary>
		fiFI = 1035,
		/// <summary>
		/// fr-FR = 1036
		/// </summary>
		frFR = 1036,
		/// <summary>
		/// gl-ES = 1110
		/// </summary>
		glES = 1110,
		/// <summary>
		/// he-IL = 1037
		/// </summary>
		heIL = 1037,
		/// <summary>
		/// hi-IN = 1081
		/// </summary>
		hiIN = 1081,
		/// <summary>
		/// hr-HR = 1050
		/// </summary>
		hrHR = 1050,
		/// <summary>
		/// hu-HU = 1038
		/// </summary>
		huHU = 1038,
		/// <summary>
		/// id-ID = 1057
		/// </summary>
		idID = 1057,
		/// <summary>
		/// it-IT = 1040
		/// </summary>
		itIT = 1040,
		/// <summary>
		/// ja-JP = 1041
		/// </summary>
		jaJP = 1041,
		/// <summary>
		/// kk-KZ = 1087
		/// </summary>
		kkKZ = 1087,
		/// <summary>
		/// ko-KR = 1042
		/// </summary>
		koKR = 1042,
		/// <summary>
		/// lt-LT = 1063
		/// </summary>
		ltLT = 1063,
		/// <summary>
		/// lv-LV = 1062
		/// </summary>
		lvLV = 1062,
		/// <summary>
		/// ms-MY = 1086
		/// </summary>
		msMY = 1086,
		/// <summary>
		/// nb-NO = 1044
		/// </summary>
		nbNO = 1044,
		/// <summary>
		/// nl-NL = 1043
		/// </summary>
		nlNL = 1043,
		/// <summary>
		/// pl-PL = 1045
		/// </summary>
		plPL = 1045,
		/// <summary>
		/// pt-BR = 1046
		/// </summary>
		ptBR = 1046,
		/// <summary>
		/// pt-PT = 2070
		/// </summary>
		ptPT = 2070,
		/// <summary>
		/// ro-RO = 1048
		/// </summary>
		roRO = 1048,
		/// <summary>
		/// ru-RU = 1049
		/// </summary>
		ruRU = 1049,
		/// <summary>
		/// sk-SK = 1051
		/// </summary>
		skSK = 1051,
		/// <summary>
		/// sl-SI = 1060
		/// </summary>
		slSI = 1060,
		/// <summary>
		/// sr-Cyrl-CS = 3098
		/// </summary>
		srCyrlCS = 3098,
		/// <summary>
		/// sr-Latn-CS = 2074
		/// </summary>
		srLatnCS = 2074,
		/// <summary>
		/// sv-SE = 1053
		/// </summary>
		svSE = 1053,
		/// <summary>
		/// th-TH = 1054
		/// </summary>
		thTH = 1054,
		/// <summary>
		/// tr-TR = 1055
		/// </summary>
		trTR = 1055,
		/// <summary>
		/// uk-UA = 1058
		/// </summary>
		ukUA = 1058,
		/// <summary>
		/// vi-VN = 1066
		/// </summary>
		viVN = 1066,
		/// <summary>
		/// zh-CN = 2052
		/// </summary>
		zhCN = 2052,
		/// <summary>
		/// zh-HK = 3076
		/// </summary>
		zhHK = 3076,
		/// <summary>
		/// zh-TW = 1028
		/// </summary>
		zhTW = 1028
	}

	public enum statecode
	{
		/// <summary>
		/// Active = 0
		/// </summary>
		Active = 0,
		/// <summary>
		/// Inactive = 1
		/// </summary>
		Inactive = 1
	}

	public enum statuscode
	{
		/// <summary>
		/// Active = 1
		/// </summary>
		Active = 1,
		/// <summary>
		/// Inactive = 2
		/// </summary>
		Inactive = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	public partial class msdyn_conversationactionlocale : EntityBase
	{
		public struct Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string msdyn_Conversationactionkey = "msdyn_conversationactionkey";
			public const string msdyn_conversationactionlocaleId = "msdyn_conversationactionlocaleid";
			public const string msdyn_Label = "msdyn_label";
			public const string msdyn_Locale_picklist = "msdyn_locale_picklist";
			public const string msdyn_name = "msdyn_name";
			public const string msdyn_SlashCommands = "msdyn_slashcommands";
			public const string msdyn_Tooltip = "msdyn_tooltip";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string statecode = "statecode";
			public const string statuscode = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "msdyn_conversationactionlocale";

		[System.Obsolete("This value is different for each instance. Please don't use it.")]
		public const int EntityTypeCode = 10631;

		[DebuggerNonUserCode()]
		public msdyn_conversationactionlocale()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_conversationactionlocale(Guid msdyn_conversationactionlocaleId)
		{
			Entity = new Entity(EntityLogicalName, msdyn_conversationactionlocaleId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_conversationactionlocale(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_conversationactionlocale(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_conversationactionlocale(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public msdyn_conversationactionlocale(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Sequence number of the import that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the record was modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who modified the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Conversation action Id</para>
		/// <para>Required - Lookup to msdyn_conversationaction</para>
		/// <para>Conversation Action key</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference msdyn_Conversationactionkey
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.msdyn_Conversationactionkey); }
			set { Entity.Attributes[Fields.msdyn_Conversationactionkey] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Conversation Action Locale</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid msdyn_conversationactionlocaleId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.msdyn_conversationactionlocaleId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Label string for conversation action button</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Label</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Label
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Label); }
			set { Entity.Attributes[Fields.msdyn_Label] = value; }
		}

		/// <summary>
		/// <para>Locale code for conversation action UI strings</para>
		/// <para>Required - Picklist</para>
		/// <para>Locale</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_conversationactionlocaleOptionSets.msdyn_Locale_picklist? msdyn_Locale_picklist
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.msdyn_Locale_picklist);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_conversationactionlocaleOptionSets.msdyn_Locale_picklist)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.msdyn_Locale_picklist] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.msdyn_Locale_picklist] = null;
			}
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_name); }
			set { Entity.Attributes[Fields.msdyn_name] = value; }
		}

		/// <summary>
		/// <para>Slash commad string for conversation action button</para>
		/// <para>String - MaxLength: 100</para>
		/// <para>Slash Commands</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_SlashCommands
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_SlashCommands); }
			set { Entity.Attributes[Fields.msdyn_SlashCommands] = value; }
		}

		/// <summary>
		/// <para>Tooltip for Conversation Action</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Tooltip</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string msdyn_Tooltip
		{
			get { return Entity.GetAttributeValue<string>(Fields.msdyn_Tooltip); }
			set { Entity.Attributes[Fields.msdyn_Tooltip] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Owner Id</para>
		/// <para>Lookup to systemuser, team</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for the business unit that owns the record</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier for the team that owns the record.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier for the user that owns the record.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Status of the Conversation Action Locale</para>
		/// <para>State</para>
		/// <para>Status</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_conversationactionlocaleOptionSets.statecode? statecode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statecode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_conversationactionlocaleOptionSets.statecode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statecode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statecode] = null;
			}
		}

		/// <summary>
		/// <para>Reason for the status of the Conversation Action Locale</para>
		/// <para>Status</para>
		/// <para>Status Reason</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.msdyn_conversationactionlocaleOptionSets.statuscode? statuscode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.statuscode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.msdyn_conversationactionlocaleOptionSets.statuscode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.statuscode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.statuscode] = null;
			}
		}

		/// <summary>
		/// <para>For internal use only.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>Time Zone Rule Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? TimeZoneRuleVersionNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.TimeZoneRuleVersionNumber); }
			set { Entity.Attributes[Fields.TimeZoneRuleVersionNumber] = value; }
		}

		/// <summary>
		/// <para>Time zone code that was in use when the record was created.</para>
		/// <para>Integer - MinValue: -1 - MaxValue: 2,147,483,647</para>
		/// <para>UTC Conversion Time Zone Code</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? UTCConversionTimeZoneCode
		{
			get { return Entity.GetAttributeValue<int?>(Fields.UTCConversionTimeZoneCode); }
			set { Entity.Attributes[Fields.UTCConversionTimeZoneCode] = value; }
		}

		/// <summary>
		/// <para>Version Number</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
