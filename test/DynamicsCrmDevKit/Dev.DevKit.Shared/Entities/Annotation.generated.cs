//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.AnnotationOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	public partial class Annotation : EntityBase
	{
		public struct Fields
		{
			public const string AnnotationId = "annotationid";
			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string DocumentBody = "documentbody";
			public const string DummyFileName = "dummyfilename";
			public const string DummyRegarding = "dummyregarding";
			public const string FileName = "filename";
			public const string FilePointer = "filepointer";
			public const string FileSize = "filesize";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsDocument = "isdocument";
			public const string IsPrivate = "isprivate";
			public const string LangId = "langid";
			public const string MimeType = "mimetype";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string NoteText = "notetext";
			public const string ObjectId = "objectid";
			public const string ObjectTypeCode = "objecttypecode";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string OwnerId = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Prefix = "prefix";
			public const string StepId = "stepid";
			public const string StoragePointer = "storagepointer";
			public const string Subject = "subject";
			public const string VersionNumber = "versionnumber";
		}

		public const string EntityLogicalName = "annotation";

		public const int EntityTypeCode = 5;

		[DebuggerNonUserCode()]
		public Annotation()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Annotation(Guid AnnotationId)
		{
			Entity = new Entity(EntityLogicalName, AnnotationId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Annotation(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Annotation(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Annotation(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public Annotation(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Unique identifier of the note.</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Note</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid AnnotationId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.AnnotationId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Unique identifier of the user who created the note.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedBy); }
		}

		/// <summary>
		/// <para>Date and time when the note was created.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.CreatedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who created the annotation.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Created By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference CreatedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.CreatedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Contents of the note's attachment.</para>
		/// <para>String - MaxLength: 1073741823</para>
		/// <para>Document</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DocumentBody
		{
			get { return Entity.GetAttributeValue<string>(Fields.DocumentBody); }
			set { Entity.Attributes[Fields.DocumentBody] = value; }
		}

		/// <summary>
		/// <para>Dummy attribute associated with the note attachment</para>
		/// <para>ReadOnly - String - MaxLength: 500</para>
		/// <para>File Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DummyFileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.DummyFileName); }
		}

		/// <summary>
		/// <para>Dummy attribute associated with the note regarding</para>
		/// <para>ReadOnly - String - MaxLength: 500</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string DummyRegarding
		{
			get { return Entity.GetAttributeValue<string>(Fields.DummyRegarding); }
		}

		/// <summary>
		/// <para>File name of the note.</para>
		/// <para>String - MaxLength: 255</para>
		/// <para>File Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FileName
		{
			get { return Entity.GetAttributeValue<string>(Fields.FileName); }
			set { Entity.Attributes[Fields.FileName] = value; }
		}

		/// <summary>
		/// <para>File pointer of the attachment.</para>
		/// <para>ReadOnly - String - MaxLength: 255</para>
		/// <para>File Pointer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string FilePointer
		{
			get { return Entity.GetAttributeValue<string>(Fields.FilePointer); }
		}

		/// <summary>
		/// <para>File size of the note.</para>
		/// <para>ReadOnly - Integer - MinValue: 0 - MaxValue: 1,000,000,000</para>
		/// <para>File Size (Bytes)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? FileSize
		{
			get { return Entity.GetAttributeValue<int?>(Fields.FileSize); }
		}

		/// <summary>
		/// <para>Unique identifier of the data import or data migration that created this record.</para>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Import Sequence Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? ImportSequenceNumber
		{
			get { return Entity.GetAttributeValue<int?>(Fields.ImportSequenceNumber); }
			set { Entity.Attributes[Fields.ImportSequenceNumber] = value; }
		}

		/// <summary>
		/// <para>Specifies whether the note is an attachment.</para>
		/// <para>Boolean</para>
		/// <para>Is Document</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsDocument
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsDocument); }
			set { Entity.Attributes[Fields.IsDocument] = value; }
		}

		/// <summary>
		/// <para>ReadOnly - Boolean</para>
		/// <para></para>
		/// </summary>
		[DebuggerNonUserCode()]
		public bool? IsPrivate
		{
			get { return Entity.GetAttributeValue<bool?>(Fields.IsPrivate); }
		}

		/// <summary>
		/// <para>Language identifier for the note.</para>
		/// <para>String - MaxLength: 2</para>
		/// <para>Language ID</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string LangId
		{
			get { return Entity.GetAttributeValue<string>(Fields.LangId); }
			set { Entity.Attributes[Fields.LangId] = value; }
		}

		/// <summary>
		/// <para>MIME type of the note's attachment.</para>
		/// <para>String - MaxLength: 256</para>
		/// <para>Mime Type</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string MimeType
		{
			get { return Entity.GetAttributeValue<string>(Fields.MimeType); }
			set { Entity.Attributes[Fields.MimeType] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user who last modified the note.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedBy); }
		}

		/// <summary>
		/// <para>Date and time when the note was last modified.</para>
		/// <para>ReadOnly - DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.ModifiedOn); }
		}

		/// <summary>
		/// <para>Unique identifier of the delegate user who last modified the annotation.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Modified By (Delegate)</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ModifiedOnBehalfBy
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ModifiedOnBehalfBy); }
		}

		/// <summary>
		/// <para>Text of the note.</para>
		/// <para>Memo - MaxLength: 1073741823</para>
		/// <para>Description</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string NoteText
		{
			get { return Entity.GetAttributeValue<string>(Fields.NoteText); }
			set { Entity.Attributes[Fields.NoteText] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the object with which the note is associated.</para>
		/// <para>Lookup to account;appointment;calendar;channelaccessprofile;channelaccessprofilerule;channelaccessprofileruleitem;contact;convertrule;devkit_azureaccount;devkit_customactivity;devkit_location;devkit_webapi;duplicaterule;email;emailserverprofile;fax;goal;kbarticle;knowledgearticle;knowledgebaserecord;letter;mailbox;msdyn_aifptrainingdocument;msdyn_aimodel;msdyn_aiodimage;msdyn_solutioncomponentdatasource;msdyn_solutionhistorydatasource;phonecall;recurringappointmentmaster;routingrule;routingruleitem;sharepointdocument;sla;socialactivity;task;workflow</para>
		/// <para>Regarding</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference ObjectId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.ObjectId); }
			set { Entity.Attributes[Fields.ObjectId] = value; }
		}

		/// <summary>
		/// <para>Type of entity with which the note is associated.</para>
		/// <para>EntityName</para>
		/// <para>Object Type </para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string ObjectTypeCode
		{
			get { return Entity.GetAttributeValue<string>(Fields.ObjectTypeCode); }
			set { Entity.Attributes[Fields.ObjectTypeCode] = value; }
		}

		/// <summary>
		/// <para>Date and time that the record was migrated.</para>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateOnly</para>
		/// <para>Record Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? OverriddenCreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.OverriddenCreatedOn); }
			set { Entity.Attributes[Fields.OverriddenCreatedOn] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the user or team who owns the note.</para>
		/// <para>Owner</para>
		/// <para>Owner</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwnerId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwnerId); }
			set { Entity.Attributes[Fields.OwnerId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier of the business unit that owns the note.</para>
		/// <para>ReadOnly - Lookup to businessunit</para>
		/// <para>Owning Business Unit</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningBusinessUnit
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningBusinessUnit); }
		}

		/// <summary>
		/// <para>Unique identifier of the team who owns the note.</para>
		/// <para>ReadOnly - Lookup to team</para>
		/// <para>Owning Team</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningTeam
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningTeam); }
		}

		/// <summary>
		/// <para>Unique identifier of the user who owns the note.</para>
		/// <para>ReadOnly - Lookup to systemuser</para>
		/// <para>Owning User</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference OwningUser
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.OwningUser); }
		}

		/// <summary>
		/// <para>Prefix of the file pointer in blob storage.</para>
		/// <para>ReadOnly - String - MaxLength: 10</para>
		/// <para>Prefix</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Prefix
		{
			get { return Entity.GetAttributeValue<string>(Fields.Prefix); }
		}

		/// <summary>
		/// <para>workflow step id associated with the note.</para>
		/// <para>String - MaxLength: 32</para>
		/// <para>Step Id</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StepId
		{
			get { return Entity.GetAttributeValue<string>(Fields.StepId); }
			set { Entity.Attributes[Fields.StepId] = value; }
		}

		/// <summary>
		/// <para>Storage pointer.</para>
		/// <para>ReadOnly - String - MaxLength: 10</para>
		/// <para>Storage Pointer</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string StoragePointer
		{
			get { return Entity.GetAttributeValue<string>(Fields.StoragePointer); }
		}

		/// <summary>
		/// <para>Subject associated with the note.</para>
		/// <para>Required - String - MaxLength: 500</para>
		/// <para>Title</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string Subject
		{
			get { return Entity.GetAttributeValue<string>(Fields.Subject); }
			set { Entity.Attributes[Fields.Subject] = value; }
		}

		/// <summary>
		/// <para>Version number of the note.</para>
		/// <para>ReadOnly - BigInt</para>
		/// <para>Version Number</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public long? VersionNumber
		{
			get { return Entity.GetAttributeValue<long?>(Fields.VersionNumber); }
		}
	}
}
