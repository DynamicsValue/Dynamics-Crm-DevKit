//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.new_VETicketOptionSets
{

}

namespace Dev.DevKit.Shared.Entities
{
	public partial class new_VETicket : EntityBase
	{
		public struct Fields
		{
			public const string new_name = "new_name";
			public const string new_Severity = "new_severity";
			public const string new_VETicketId = "new_veticketid";
		}

		public const string EntityLogicalName = "new_veticket";

		public const int EntityTypeCode = 10147;

		[DebuggerNonUserCode()]
		public new_VETicket()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public new_VETicket(Guid new_VETicketId)
		{
			Entity = new Entity(EntityLogicalName, new_VETicketId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public new_VETicket(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public new_VETicket(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public new_VETicket(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public new_VETicket(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string new_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.new_name); }
			set { Entity.Attributes[Fields.new_name] = value; }
		}

		/// <summary>
		/// <para>Integer - MinValue: -2,147,483,648 - MaxValue: 2,147,483,647</para>
		/// <para>Severity</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public int? new_Severity
		{
			get { return Entity.GetAttributeValue<int?>(Fields.new_Severity); }
			set { Entity.Attributes[Fields.new_Severity] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>VETicket</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid new_VETicketId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.new_VETicketId] = value;
				Entity.Id = value;
			}
		}
	}
}
