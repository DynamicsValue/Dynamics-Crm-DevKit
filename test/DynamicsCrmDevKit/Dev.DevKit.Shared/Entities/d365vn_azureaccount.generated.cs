//---------------------------------------------------------------------------------------------------
// <auto-generated>
//		Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//		Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using Microsoft.Xrm.Sdk;
using System;
using System.Diagnostics;

namespace Dev.DevKit.Shared.Entities.d365vn_azureaccountOptionSets
{
	public enum d365vn_CategoryCode
	{
		/// <summary>
		/// Organization = 1
		/// </summary>
		Organization = 1,
		/// <summary>
		/// Owner = 2
		/// </summary>
		Owner = 2
	}
}

namespace Dev.DevKit.Shared.Entities
{
	public partial class d365vn_azureaccount : EntityBase
	{
		public struct Fields
		{
			public const string d365vn_AccountId = "d365vn_accountid";
			public const string d365vn_azureaccountId = "d365vn_azureaccountid";
			public const string d365vn_CategoryCode = "d365vn_categorycode";
			public const string d365vn_City = "d365vn_city";
			public const string d365vn_CreatedOn = "d365vn_createdon";
			public const string d365vn_ModifiedOn = "d365vn_modifiedon";
			public const string d365vn_name = "d365vn_name";
			public const string d365vn_Price = "d365vn_price";
		}

		public const string EntityLogicalName = "d365vn_azureaccount";

		public const int EntityTypeCode = 10151;

		[DebuggerNonUserCode()]
		public d365vn_azureaccount()
		{
			Entity = new Entity(EntityLogicalName);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public d365vn_azureaccount(Guid d365vn_azureaccountId)
		{
			Entity = new Entity(EntityLogicalName, d365vn_azureaccountId);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public d365vn_azureaccount(string keyName, object keyValue)
		{
			Entity = new Entity(EntityLogicalName, keyName, keyValue);
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public d365vn_azureaccount(Entity entity)
		{
			Entity = entity;
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public d365vn_azureaccount(Entity entity, Entity merge)
		{
			Entity = entity;
			foreach (var property in merge?.Attributes)
			{
				var key = property.Key;
				var value = property.Value;
				Entity[key] = value;
			}
			PreEntity = CloneThisEntity(Entity);
		}

		[DebuggerNonUserCode()]
		public d365vn_azureaccount(KeyAttributeCollection keys)
		{
			Entity = new Entity(EntityLogicalName, keys);
			PreEntity = CloneThisEntity(Entity);
		}

		/// <summary>
		/// <para>Lookup to account</para>
		/// <para>Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public EntityReference d365vn_AccountId
		{
			get { return Entity.GetAttributeValue<EntityReference>(Fields.d365vn_AccountId); }
			set { Entity.Attributes[Fields.d365vn_AccountId] = value; }
		}

		/// <summary>
		/// <para>Unique identifier for entity instances</para>
		/// <para>Primary Key - Uniqueidentifier</para>
		/// <para>Azure Account</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Guid d365vn_azureaccountId
		{
			get { return Id; }
			set
			{
				Entity.Attributes[Fields.d365vn_azureaccountId] = value;
				Entity.Id = value;
			}
		}

		/// <summary>
		/// <para>Picklist</para>
		/// <para>Category</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public Dev.DevKit.Shared.Entities.d365vn_azureaccountOptionSets.d365vn_CategoryCode? d365vn_CategoryCode
		{
			get
			{
				var value = Entity.GetAttributeValue<OptionSetValue>(Fields.d365vn_CategoryCode);
				if (value == null) return null;
				return (Dev.DevKit.Shared.Entities.d365vn_azureaccountOptionSets.d365vn_CategoryCode)value.Value;
			}
			set
			{
				if (value.HasValue)
					Entity.Attributes[Fields.d365vn_CategoryCode] = new OptionSetValue((int)value.Value);
				else
					Entity.Attributes[Fields.d365vn_CategoryCode] = null;
			}
		}

		/// <summary>
		/// <para>String - MaxLength: 100</para>
		/// <para>City</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string d365vn_City
		{
			get { return Entity.GetAttributeValue<string>(Fields.d365vn_City); }
			set { Entity.Attributes[Fields.d365vn_City] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Created On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? d365vn_CreatedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.d365vn_CreatedOn); }
			set { Entity.Attributes[Fields.d365vn_CreatedOn] = value; }
		}

		/// <summary>
		/// <para>DateTimeBehavior: UserLocal - DateTimeFormat: DateAndTime</para>
		/// <para>Modified On</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public DateTime? d365vn_ModifiedOnUtc
		{
			get { return Entity.GetAttributeValue<DateTime?>(Fields.d365vn_ModifiedOn); }
			set { Entity.Attributes[Fields.d365vn_ModifiedOn] = value; }
		}

		/// <summary>
		/// <para>The name of the custom entity.</para>
		/// <para>Required - String - MaxLength: 100</para>
		/// <para>Name</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public string d365vn_name
		{
			get { return Entity.GetAttributeValue<string>(Fields.d365vn_name); }
			set { Entity.Attributes[Fields.d365vn_name] = value; }
		}

		/// <summary>
		/// <para>Decimal - MinValue: -100,000,000,000 - MaxValue: 100,000,000,000</para>
		/// <para>Price</para>
		/// </summary>
		[DebuggerNonUserCode()]
		public decimal? d365vn_Price
		{
			get { return Entity.GetAttributeValue<decimal?>(Fields.d365vn_Price); }
			set { Entity.Attributes[Fields.d365vn_Price] = value; }
		}
	}
}
