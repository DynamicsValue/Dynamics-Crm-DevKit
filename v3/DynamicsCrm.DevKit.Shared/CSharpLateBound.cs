using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Tooling.Connector;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security;
using System.Text;

namespace DynamicsCrm.DevKit.Shared
{
    public static class CSharpLateBound
    {
        private const string NEW_LINE = "\r\n";
        private const string TAB = "\t";


        public static string GetCsCode(CrmServiceClient crmServiceClient, EntityMetadata entityMetadata, string schemaName, string rootNameSpace)
        {
            //ReadMetadata(crmServiceClient, schemaName);

            EntityMetadata = entityMetadata;

            var code = string.Empty;
            code += $"//---------------------------------------------------------------------------------------------------{NEW_LINE}";
            code += $"// <auto-generated>{NEW_LINE}";
            code += $"//{TAB}{TAB}Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.{NEW_LINE}";
            code += $"//{TAB}{TAB}Generated by DynamicsCrm.DevKit - https://github.com/phuocle/Dynamics-Crm-DevKit{NEW_LINE}";
            code += $"// </auto-generated>{NEW_LINE}";
            code += $"//---------------------------------------------------------------------------------------------------{NEW_LINE}";
            code += $"using Microsoft.Xrm.Sdk;{NEW_LINE}";
            code += $"using System;{NEW_LINE}";
            code += $"using System.Diagnostics;{NEW_LINE}";
            code += $"{NEW_LINE}";
            code += $"namespace {rootNameSpace}.{schemaName}OptionSets{NEW_LINE}";
            code += $"{{{NEW_LINE}";
            code += $"{GeneratorEnum()}";
            code += $"}}{NEW_LINE}";






            return code;
        }

        private static void ReadMetadata(CrmServiceClient crmServiceClient, string schemaName)
        {
            var request = new RetrieveEntityRequest
            {
                EntityFilters = EntityFilters.Attributes,
                LogicalName = schemaName.ToLower()
            };
            var response = (RetrieveEntityResponse)crmServiceClient.Execute(request);

            //Attributes = response.EntityMetadata.Attributes;
        }

        private static string GeneratorEnum()
        {
            var @enum = string.Empty;
            @enum += $"{TAB}public enum [[Enum]]{NEW_LINE}";
            @enum += $"{TAB}{{{NEW_LINE}";
            @enum += $"[[Declare]]";
            @enum += $"{TAB}}}{NEW_LINE}{NEW_LINE}";
            var code = string.Empty;
            foreach(var attribute in EntityMetadata.Attributes.OrderBy(x => x.SchemaName))
            {
                if (XrmHelper.IsOptionSet(attribute))
                {
                    var tmp = string.Empty;
                    var values = attribute.OptionSetValues();
                    foreach (var value in values)
                    {
                        tmp += $"{TAB}{TAB}/// <summary>{NEW_LINE}";
                        tmp += $"{TAB}{TAB}/// {SecurityElement.Escape(value.Name)} = {value.Value}{NEW_LINE}";
                        tmp += $"{TAB}{TAB}/// </summary>{NEW_LINE}";
                        tmp += $"{TAB}{TAB}{Utility.SafeIdentifier(value.Name)} = {value.Value},{NEW_LINE}";
                    }
                    tmp = tmp.TrimEnd($",{NEW_LINE}".ToCharArray());
                    tmp += NEW_LINE;
                    code += @enum.Replace("[[Enum]]", Utility.SafeIdentifier(attribute.SchemaName)).Replace("[[Declare]]", tmp);
                }
            }
            return code;
        }

        //private static AttributeMetadata[] Attributes { get; set; }
        private static EntityMetadata EntityMetadata { get; set; }
    }
}
